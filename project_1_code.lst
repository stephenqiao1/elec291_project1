                  2   $LIST
0000              4   
0000              5   
0000              6   ;-------------------------------------------------------------------------------------------------------------------------------
0000              7   ;These EQU must match the wiring between the microcontroller and ADC
0000              8   CLK  EQU 22118400
0000              9   TIMER1_RATE    EQU 25000 ;22050     ; 22050Hz is the sampling rate of the wav file we are playing
0000             10   TIMER1_RELOAD  EQU 0x10000-(CLK/TIMER1_RATE)
0000             11   BAUD equ 115200
0000             12   BRG_VAL equ (0x100-(CLK/(16*BAUD)))
0000             13   
0000             14   TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
0000             15   TIMER2_RELOAD EQU (65536-(CLK/TIMER2_RATE))
0000             16   
0000             17   ;shjfjdfs
0000             18   ;-------------------------------------------------------------------------------------------------------------------------------
0000             19   ;Button Pin Mapping
0000             20   NEXT_STATE_BUTTON  equ P0.5
0000             21   STIME_BUTTON    equ P0.2
0000             22   STEMP_BUTTON    equ P0.3
0000             23   RTIME_BUTTON    equ P0.4
0000             24   RTEMP_BUTTON    equ P0.6
0000             25   PROFILE_BUTTON  equ P0.0
0000             26   
0000             27   POWER_BUTTON    equ P4.5
0000             28   SHIFT_BUTTON    equ p0.1
0000             29   
0000             30   ;Output Pins
0000             31   OVEN_POWER      equ P0.7
0000             32   SPEAKER         equ P2.6
0000             33   
0000             34   PWM_OUTPUT      equ P1.0 ; Attach an LED (with 1k resistor in series) to P1.0
0000             35   FAN             equ P1.1
0000             36   
0000             37   
0000             38   ;FLASH pins
0000             39   MY_MOSI_SOUND EQU P2.4
0000             40   MY_MISO_SOUND EQU P2.1
0000             41   MY_SCLK_SOUND EQU P2.0
0000             42   FLASH_CE      EQU P2.5
0000             43   
0000             44   ;Thermowire Pins
0000             45   CE_ADC    EQU  P1.7
0000             46   MY_MOSI   EQU  P1.6
0000             47   MY_MISO   EQU  P1.5
0000             48   MY_SCLK   EQU  P1.4 
0000             49   
0000             50   ; Commands supported by the SPI flash memory according to the datasheet
0000             51   WRITE_ENABLE     EQU 0x06  ; Address:0 Dummy:0 Num:0
0000             52   WRITE_DISABLE    EQU 0x04  ; Address:0 Dummy:0 Num:0
0000             53   READ_STATUS      EQU 0x05  ; Address:0 Dummy:0 Num:1 to infinite
0000             54   READ_BYTES       EQU 0x03  ; Address:3 Dummy:0 Num:1 to infinite
0000             55   READ_SILICON_ID  EQU 0xab  ; Address:0 Dummy:3 Num:1 to infinite
0000             56   FAST_READ        EQU 0x0b  ; Address:3 Dummy:1 Num:1 to infinite
0000             57   WRITE_STATUS     EQU 0x01  ; Address:0 Dummy:0 Num:1
0000             58   WRITE_BYTES      EQU 0x02  ; Address:3 Dummy:0 Num:1 to 256
0000             59   ERASE_ALL        EQU 0xc7  ; Address:0 Dummy:0 Num:0
0000             60   ERASE_BLOCK      EQU 0xd8  ; Address:3 Dummy:0 Num:0
0000             61   READ_DEVICE_ID   EQU 0x9f  ; Address:0 Dummy:2 Num:1 to infinite
0000             62   
0000             63   ; These 'equ' must match the hardware wiring
0000             64   LCD_RS equ P3.2
0000             65   ;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
0000             66   LCD_E  equ P3.3
0000             67   LCD_D4 equ P3.4
0000             68   LCD_D5 equ P3.5
0000             69   LCD_D6 equ P3.6
0000             70   LCD_D7 equ P3.7
0000             71   
0000             72   ;-------------------------------------------------------------------------------------------------------------------------------
0000             73   
0000             74   org 0x0000
0000 0218F1      75       ljmp main
0003             76   
0003             77   ; External interrupt 0 vector (not used in this code)
0003             78   org 0x0003
0003 32          79            reti
0004             80   
0004             81   ; Timer/Counter 0 overflow interrupt vector
000B             82   org 0x000B
000B 32          83            reti
000C             84   
000C             85   ; External interrupt 1 vector (not used in this code)
0013             86   org 0x0013
0013 32          87            reti
0014             88   
0014             89   ; Timer/Counter 1 overflow interrupt vector
001B             90   org 0x001B
001B 021845      91            ljmp Timer1_ISR
001E             92   
001E             93   ; Serial port receive/transmit interrupt vector (not used in this code)
0023             94   org 0x0023 
0023 32          95            reti
0024             96            
0024             97   ; Timer/Counter 2 overflow interrupt vector
002B             98   org 0x002B
002B 02189B      99       ljmp Timer2_ISR
002E            100   ;-------------------------------------------------------------------------------------------------------------------------------
002E            101   ; Place our variables here
0030            102   DSEG at 0x30 ; Before the state machine!
0030            103   Count1ms:         ds 2 ; Used to determine when one second has passed
0032            104   Count5sec:        ds 1
0033            105   States:           ds 1
0034            106   Temp_soak:        ds 1
0035            107   Time_soak:        ds 1
0036            108   Temp_refl:        ds 1
0037            109   Time_refl:        ds 1
0038            110   Run_time_seconds: ds 1
0039            111   Run_time_minutes: ds 1
003A            112   State_time:       ds 1
003B            113   Temp_oven:        ds 1
003C            114   KTemp_oven:       ds 1
003D            115   x:                ds 4
0041            116   y:                ds 4
0045            117   bcd:              ds 5
004A            118   Result:           ds 2
004C            119   w:                ds 3
004F            120   pwm_ratio:        ds 2
0051            121   average_count:    ds 1
0052            122   K_or_C:           ds 1
0053            123   Profile:          ds 1 ; Select profile1 if equ 0, 2 if equ 1
0054            124   
                126   $LIST
00F0            128   
                546   $LIST
                130   $LIST
0360            132   
0360            133   ;$NOLIST
0360            134   ;$INCLUDE(sound_for_project1_index.asm)
0360            135   ;$LIST
0360            136   
0000            137   bseg
0000            138   one_seconds_flag:  dbit 1
0001            139   five_seconds_flag: dbit 1
0002            140   enable_clk:        dbit 1
0003            141   mf:                dbit 1
0004            142   SPAN_ENG:          dbit 1
0005            143   ;sound_flag: dbit 1
0005            144   
0360            145   cseg
0360            146   
0360            147   ;-------------------------------------------------------------------------------------------------------------------------------
0360            148   ;***Messages To Display*** 
0360            149   
0360            150   ;shortened labels
0360 53546D70   151   STemp:  db 'STmp:', 0
     3A00
0366 53546D3A   152   STime:  db 'STm:', 0
     00
036B 52546D70   153   RTemp:  db 'RTmp:', 0
     3A00
0371 52546D3A   154   RTime:  db 'RTm:', 0
     00
0376            155   
0376            156   ;lables for runnning oven
0376 53746174   157   state:     db 'State>' , 0
     653E00
037D 546D653E   158   time:      db 'Tme>' , 0
     00
0382 3A00       159   colon:     db ':', 0
0384 546D703E   160   temp:      db 'Tmp>', 0
     00
0389            161   
0389            162   ;labels for changin parameters
0389 5265666C   163   ReflowTemp:  db 'Reflow Temperature:', 0
     6F772054
     656D7065
     72617475
     72653A00
039D 5265666C   164   ReflowTime:  db 'Reflow Time:', 0
     6F772054
     696D653A
     00
03AA 536F616B   165   SoakTime:    db 'Soak Time:', 0
     2054696D
     653A00
03B5 536F616B   166   SoakTemp:    db 'Soak Temperature:', 0
     2054656D
     70657261
     74757265
     3A00
03C7            167   
03C7            168   
03C7            169   ;Current State in Oven
03C7 52616D70   170   Ramp2Soak: db 'Ramp-Soak' , 0
     2D536F61
     6B00
03D1 536F616B   171   Soak:      db 'Soak' , 0
     00
03D6 52616D70   172   Ramp2Peak: db 'Ramp-Peak' , 0
     2D506561
     6B00
03E0 5265666C   173   Reflow:    db 'Reflow' , 0
     6F7700
03E7 436F6F6C   174   Cooling:   db 'Cooling' , 0
     696E6700
03EF            175   
03EF            176   ;-------------------------------------------------------------------------------------------------------------------------------
03EF            177   ;FXNS FOR THERMOWIRE
03EF            178   
03EF            179   ;initialize SPI 
03EF            180   INI_SPI:
03EF D295       181            setb MY_MISO          ; Make MISO an input pin
03F1 C294       182            clr MY_SCLK           ; Mode 0,0 default
03F3 22         183            ret
03F4            184   DO_SPI_G:
03F4 C0E0       185            push acc
03F6 7900       186            mov R1, #0            ; Received byte stored in R1
03F8 7A08       187            mov R2, #8            ; Loop counter (8-bits)
03FA            188   DO_SPI_G_LOOP:
03FA E8         189            mov a, R0             ; Byte to write is in R0
03FB 33         190            rlc a                 ; Carry flag has bit to write
03FC F8         191            mov R0, a
03FD 9296       192            mov MY_MOSI, c
03FF D294       193            setb MY_SCLK          ; Transmit
0401 A295       194            mov c, MY_MISO        ; Read received bit
0403 E9         195            mov a, R1             ; Save received bit in R1
0404 33         196            rlc a
0405 F9         197            mov R1, a
0406 C294       198            clr MY_SCLK
0408 DAF0       199            djnz R2, DO_SPI_G_LOOP
040A D0E0       200            pop acc
040C 22         201   ret
040D            202   
040D            203   Send_SPI:
                204   	SPIBIT MAC
                205   	    ; Send/Receive bit %0
                206   		rlc a
                207   		mov MY_MOSI_SOUND, c
                208   		setb MY_SCLK_SOUND
                209   		mov c, MY_MISO_SOUND
                210   		clr MY_SCLK_SOUND
                211   		mov acc.0, c
                212   	ENDMAC
040D            213            
040D            214                ; Send/Receive bit 7
040D 33         214                    rlc a
040E 92A4       214                    mov MY_MOSI_SOUND, c
0410 D2A0       214                    setb MY_SCLK_SOUND
0412 A2A1       214                    mov c, MY_MISO_SOUND
0414 C2A0       214                    clr MY_SCLK_SOUND
0416 92E0       214                    mov acc.0, c
0418            215                ; Send/Receive bit 6
0418 33         215                    rlc a
0419 92A4       215                    mov MY_MOSI_SOUND, c
041B D2A0       215                    setb MY_SCLK_SOUND
041D A2A1       215                    mov c, MY_MISO_SOUND
041F C2A0       215                    clr MY_SCLK_SOUND
0421 92E0       215                    mov acc.0, c
0423            216                ; Send/Receive bit 5
0423 33         216                    rlc a
0424 92A4       216                    mov MY_MOSI_SOUND, c
0426 D2A0       216                    setb MY_SCLK_SOUND
0428 A2A1       216                    mov c, MY_MISO_SOUND
042A C2A0       216                    clr MY_SCLK_SOUND
042C 92E0       216                    mov acc.0, c
042E            217                ; Send/Receive bit 4
042E 33         217                    rlc a
042F 92A4       217                    mov MY_MOSI_SOUND, c
0431 D2A0       217                    setb MY_SCLK_SOUND
0433 A2A1       217                    mov c, MY_MISO_SOUND
0435 C2A0       217                    clr MY_SCLK_SOUND
0437 92E0       217                    mov acc.0, c
0439            218                ; Send/Receive bit 3
0439 33         218                    rlc a
043A 92A4       218                    mov MY_MOSI_SOUND, c
043C D2A0       218                    setb MY_SCLK_SOUND
043E A2A1       218                    mov c, MY_MISO_SOUND
0440 C2A0       218                    clr MY_SCLK_SOUND
0442 92E0       218                    mov acc.0, c
0444            219                ; Send/Receive bit 2
0444 33         219                    rlc a
0445 92A4       219                    mov MY_MOSI_SOUND, c
0447 D2A0       219                    setb MY_SCLK_SOUND
0449 A2A1       219                    mov c, MY_MISO_SOUND
044B C2A0       219                    clr MY_SCLK_SOUND
044D 92E0       219                    mov acc.0, c
044F            220                ; Send/Receive bit 1
044F 33         220                    rlc a
0450 92A4       220                    mov MY_MOSI_SOUND, c
0452 D2A0       220                    setb MY_SCLK_SOUND
0454 A2A1       220                    mov c, MY_MISO_SOUND
0456 C2A0       220                    clr MY_SCLK_SOUND
0458 92E0       220                    mov acc.0, c
045A            221                ; Send/Receive bit 0
045A 33         221                    rlc a
045B 92A4       221                    mov MY_MOSI_SOUND, c
045D D2A0       221                    setb MY_SCLK_SOUND
045F A2A1       221                    mov c, MY_MISO_SOUND
0461 C2A0       221                    clr MY_SCLK_SOUND
0463 92E0       221                    mov acc.0, c
0465            222   
0465 22         223   ret
0466            224   
                225   Change_8bit_Variable MAC
                226       jb %0, %2
                227       Wait_Milli_Seconds(#50) ; de-bounce
                228       jb %0, %2
                229       jnb %0, $
                230       jb SHIFT_BUTTON, skip%Mb
                231       dec %1
                232       sjmp skip%Ma
                233       skip%Mb:
                234       inc %1
                235       skip%Ma:
                236       mov a, Profile
                237       cjne a, #0, skip%Mc
                238       lcall Save_Configuration1
                239       sjmp skip%Md
                240       skip%Mc:
                241       lcall Save_Configuration2
                242       skip%Md:
                243   ENDMAC
0466            244   
0466            245   
0466            246   
0466            247   ;Change_8bit_Variable(MY_VARIABLE_BUTTON, my_variable, loop_c)
0466            248   ;    Set_Cursor(2, 14)
0466            249   ;    mov a, my_variable
0466            250   ;    lcall SendToLCD
0466            251   ;lcall Save_Configuration
0466            252   
0466            253   ;-------------------------------------------------------------------------------------------------------------------------------
0466            254   ;***FXNS For Serial Port
0466            255   
0466            256   ; Configure the serial port and baud rate
0466            257   InitSerialPort:
0466            258       ; Since the reset button bounces, we need to wait a bit before
0466            259       ; sending messages, otherwise we risk displaying gibberish!
0466 79DE       260       mov R1, #222
0468 78A6       261       mov R0, #166
046A D8FE       262       djnz R0, $   ; 3 cycles->3*45.21123ns*166=22.51519us
046C D9FA       263       djnz R1, $-4 ; 22.51519us*222=4.998ms
046E            264       ; Now we can proceed with the configuration
046E 438780     265            orl     PCON,#0x80
0471 759852     266            mov     SCON,#0x52
0474 759B00     267            mov     BDRCON,#0x00
0477 759AF4     268            mov     BRL,#BRG_VAL
047A 759B1E     269            mov     BDRCON,#0x1E ; BDRCON=BRR|TBCK|RBCK|SPD;
047D 22         270   ret
047E            271   
047E            272   
047E            273   putchar:
047E 3099FD     274       jnb TI, putchar
0481 C299       275       clr TI
0483 F599       276       mov SBUF, a
0485 22         277   ret
0486            278   
0486            279   ;-------------------------------------------------------------------------------------------------------------------------------
0486            280   ;***FXNS to CHECK BUTTONS
0486            281   
0486            282   CHECK_STIME:
0486            283   
0486 208225     284       jb STIME_BUTTON, CHECK_STIME_END
0489 C002       284            push AR2
048B 7A32       284            mov R2, #50
048D 120039     284            lcall ?Wait_Milli_Seconds
0490 D002       284            pop AR2 ; de-bounce
0492 208219     284       jb STIME_BUTTON, CHECK_STIME_END
0495 3082FD     284       jnb STIME_BUTTON, $
0498 208104     284       jb SHIFT_BUTTON, skip16b
049B 1535       284       dec Time_soak
049D 8002       284       sjmp skip16a
049F            284       skip16b:
049F 0535       284       inc Time_soak
04A1            284       skip16a:
04A1 E553       284       mov a, Profile
04A3 B40005     284       cjne a, #0, skip16c
04A6 121666     284       lcall Save_Configuration1
04A9 8003       284       sjmp skip16d
04AB            284       skip16c:
04AB 12169D     284       lcall Save_Configuration2
04AE            284       skip16d:
04AE            285            
04AE            286   CHECK_STIME_END:
04AE 22         287   ret
04AF            288   
04AF            289   CHECK_STEMP:
04AF 208325     290       jb STEMP_BUTTON, CHECK_STEMP_END
04B2 C002       290            push AR2
04B4 7A32       290            mov R2, #50
04B6 120039     290            lcall ?Wait_Milli_Seconds
04B9 D002       290            pop AR2 ; de-bounce
04BB 208319     290       jb STEMP_BUTTON, CHECK_STEMP_END
04BE 3083FD     290       jnb STEMP_BUTTON, $
04C1 208104     290       jb SHIFT_BUTTON, skip18b
04C4 1534       290       dec Temp_soak
04C6 8002       290       sjmp skip18a
04C8            290       skip18b:
04C8 0534       290       inc Temp_soak
04CA            290       skip18a:
04CA E553       290       mov a, Profile
04CC B40005     290       cjne a, #0, skip18c
04CF 121666     290       lcall Save_Configuration1
04D2 8003       290       sjmp skip18d
04D4            290       skip18c:
04D4 12169D     290       lcall Save_Configuration2
04D7            290       skip18d:
04D7            291       ;lcall Save_Configuration
04D7            292            
04D7            293   CHECK_STEMP_END:
04D7 22         294   ret
04D8            295   
04D8            296   CHECK_RTIME:
04D8 208425     297       jb RTIME_BUTTON, CHECK_RTIME_END
04DB C002       297            push AR2
04DD 7A32       297            mov R2, #50
04DF 120039     297            lcall ?Wait_Milli_Seconds
04E2 D002       297            pop AR2 ; de-bounce
04E4 208419     297       jb RTIME_BUTTON, CHECK_RTIME_END
04E7 3084FD     297       jnb RTIME_BUTTON, $
04EA 208104     297       jb SHIFT_BUTTON, skip20b
04ED 1537       297       dec Time_refl
04EF 8002       297       sjmp skip20a
04F1            297       skip20b:
04F1 0537       297       inc Time_refl
04F3            297       skip20a:
04F3 E553       297       mov a, Profile
04F5 B40005     297       cjne a, #0, skip20c
04F8 121666     297       lcall Save_Configuration1
04FB 8003       297       sjmp skip20d
04FD            297       skip20c:
04FD 12169D     297       lcall Save_Configuration2
0500            297       skip20d:
0500            298   CHECK_RTIME_END:
0500 22         299   ret
0501            300   
0501            301   CHECK_RTEMP:
0501 208625     302       jb RTEMP_BUTTON, CHECK_RTEMP_END
0504 C002       302            push AR2
0506 7A32       302            mov R2, #50
0508 120039     302            lcall ?Wait_Milli_Seconds
050B D002       302            pop AR2 ; de-bounce
050D 208619     302       jb RTEMP_BUTTON, CHECK_RTEMP_END
0510 3086FD     302       jnb RTEMP_BUTTON, $
0513 208104     302       jb SHIFT_BUTTON, skip22b
0516 1536       302       dec Temp_refl
0518 8002       302       sjmp skip22a
051A            302       skip22b:
051A 0536       302       inc Temp_refl
051C            302       skip22a:
051C E553       302       mov a, Profile
051E B40005     302       cjne a, #0, skip22c
0521 121666     302       lcall Save_Configuration1
0524 8003       302       sjmp skip22d
0526            302       skip22c:
0526 12169D     302       lcall Save_Configuration2
0529            302       skip22d:
0529            303   CHECK_RTEMP_END:
0529 22         304   ret
052A            305   
052A            306   CHECK_POWER:
052A 20C518     307       jb POWER_BUTTON, CHECK_POWER_END ; if button not pressed, stop checking
052D C002       308            push AR2
052F 7A32       308            mov R2, #50
0531 120039     308            lcall ?Wait_Milli_Seconds
0534 D002       308            pop AR2 ; debounce time
0536 20C50C     309            jb POWER_BUTTON, CHECK_POWER_END ; if button not pressed, stop checking
0539 30C5FD     310            jnb POWER_BUTTON, $ ; loop while the button is pressed
053C 754F00     311       mov pwm_ratio+0, #low(0)
053F 755000     312            mov pwm_ratio+1, #high(0)
0542 121740     313       lcall OFF_STATE
0545            314   CHECK_POWER_END:
0545 22         315   ret
0546            316   
0546            317   CHECK_PROFILE:
0546 208022     318       jb PROFILE_BUTTON, CHECK_PROFILE_END
0549 C002       319            push AR2
054B 7A32       319            mov R2, #50
054D 120039     319            lcall ?Wait_Milli_Seconds
0550 D002       319            pop AR2 ; de-bounce
0552 208016     320       jb PROFILE_BUTTON, CHECK_PROFILE_END
0555 3080FD     321       jnb PROFILE_BUTTON, $
0558 E553       322       mov a, Profile
055A B40008     323       cjne a, #0, To_Profile1
055D 1216FD     324       lcall Load_Configuration2
0560 755301     325       mov Profile, #1
0563 8006       326       sjmp CHECK_PROFILE_END
0565            327   To_Profile1:
0565 1216D4     328       lcall Load_Configuration1
0568 755300     329       mov Profile, #0
056B            330   CHECK_PROFILE_END:
056B 22         331   ret
056C            332   
056C            333   CHECK_K_OR_C:
056C            334   
056C 20860F     335       jb RTEMP_BUTTON, CHECK_K_OR_C_END ; if button not pressed, stop checking
056F C002       336            push AR2
0571 7A32       336            mov R2, #50
0573 120039     336            lcall ?Wait_Milli_Seconds
0576 D002       336            pop AR2 ; debounce time
0578 208603     337            jb RTEMP_BUTTON, CHECK_K_OR_C_END ; if button not pressed, stop checking
057B 3086FD     338            jnb RTEMP_BUTTON, $ ; loop while the button is pressed
057E            339       
057E            340       ;mov a, K_or_C
057E            341       ;anl a,
057E            342       ;anl a, #00000001B  ; We need only the two least significant bits
057E            343   
057E            344   
057E            345   CHECK_K_OR_C_END:
057E 22         346   ret
057F            347   
057F            348   ; Playback MACRO for sound --------------------------------------------------
057F            349   
                350   PLAYBACK_TEMP MAC
                351       ; ***play audio***
                352       ;cjne sound_flag, #0, $
                353       lcall Wait_Half_Second
                354       clr TR1 ; Stop Timer 1 ISR from playing previous request
                355       setb FLASH_CE
                356       ;setb sound_flag ; sound starts
                357       clr SPEAKER ; Turn off speaker
                358       clr FLASH_CE ; Enable SPI Flash
                359       mov a, #READ_BYTES
                360       lcall Send_SPI
                361       ; Set the initial position in memory where to start playing
                362       
                363       mov a, %0 ; change initial position
                364       lcall Send_SPI
                365       mov a, %1 ; next memory position
                366       lcall Send_SPI
                367       mov a, %2 ; next memory position
                368       lcall Send_SPI
                369       mov a, %0 ; request first byte to send to DAC
                370       lcall Send_SPI
                371       
                372       ; How many bytes to play?
                373       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
                374       mov w+1, %3 ; Load the middle byte of the number of bytes to play
                375       mov w+0, %4 ; Load the low byte of the number of bytes to play
                376       
                377       
                378       setb SPEAKER ;Turn on speaker
                379       setb TR1 ;Start playback by enabling Timer1
                380       ;clr sound_flag ; sound ends
                381   ENDMAC
057F            382   
                383   PLAYBACK_MUSIC MAC
                384       ; ***play audio***
                385       ;cjne sound_flag, #0, $
                386       
                387       clr TR1 ; Stop Timer 1 ISR from playing previous request
                388       setb FLASH_CE
                389       ;setb sound_flag ; sound starts
                390       clr SPEAKER ; Turn off speaker
                391       clr FLASH_CE ; Enable SPI Flash
                392       mov a, #READ_BYTES
                393       lcall Send_SPI
                394       ; Set the initial position in memory where to start playing
                395       
                396       mov a, %0 ; change initial position
                397       lcall Send_SPI
                398       mov a, %1 ; next memory position
                399       lcall Send_SPI
                400       mov a, %2 ; next memory position
                401       lcall Send_SPI
                402       mov a, %0 ; request first byte to send to DAC
                403       lcall Send_SPI
                404       
                405       ; How many bytes to play?
                406       mov w+2, #0x02 ; Load the high byte of the number of bytes to play
                407       mov w+1, %3 ; Load the middle byte of the number of bytes to play
                408       mov w+0, %4 ; Load the low byte of the number of bytes to play
                409       
                410       
                411       setb SPEAKER ;Turn on speaker
                412       setb TR1 ;Start playback by enabling Timer1
                413       ;clr sound_flag ; sound ends
                414   ENDMAC
057F            415   
057F            416   
057F            417   ;****ENGLISH SOUND FSM--------------------------------------------------------
057F            418   
057F            419   SOUND_FSM:
057F            420   state_0_sound:
057F            421   ;check if 5 seconds has passed, if yes go to state 1, if no exit function 
057F 300104     422       jnb five_seconds_flag, Sound_ret
0582 C201       423       clr five_seconds_flag
0584 8001       424       sjmp state_1_sound
0586            425   Sound_ret:
0586 22         426       ret
0587            427   
0587            428   state_1_sound:
0587            429   ; check if temp is greater than or equal to 100, if yes go to state 2
0587            430   ; check if temp is less than 100, if yes go to state 4
0587 E53B       431       mov a, Temp_oven
0589 9464       432       subb a, #100
058B 5002       433       jnc state_2_sound_hop
058D 4002       434       jc state_4_sound_hop
058F            435   
058F            436       state_2_sound_hop:
058F 8003       437           sjmp state_2_sound
0591            438   
0591            439       state_4_sound_hop:
0591 02068D     440           ljmp state_4_sound
0594            441   
0594            442   state_2_sound:
0594            443   ;divide temp by 100, if it is 1 play sound: "100", if it is 2 play sound: "200"
0594            444   ; go to state_3_sound
0594 75F064     445       mov b, #100
0597 E53B       446       mov a, Temp_oven
0599 84         447       div ab
059A 9401       448       subb a, #1
059C 600A       449       jz play_sound_100
059E            450   
059E 75F064     451       mov b, #100
05A1 E53B       452       mov a, Temp_oven
05A3 84         453       div ab
05A4 9402       454       subb a, #2
05A6 6065       455       jz play_sound_200
05A8            456      
05A8            457       play_sound_100: 
05A8            458       ; ***play audio***
05A8            458       ;cjne sound_flag, #0, $
05A8 12182D     458       lcall Wait_Half_Second
05AB C28E       458       clr TR1 ; Stop Timer 1 ISR from playing previous request
05AD D2A5       458       setb FLASH_CE
05AF            458       ;setb sound_flag ; sound starts
05AF C2A6       458       clr SPEAKER ; Turn off speaker
05B1 C2A5       458       clr FLASH_CE ; Enable SPI Flash
05B3 7403       458       mov a, #READ_BYTES
05B5 12040D     458       lcall Send_SPI
05B8            458       ; Set the initial position in memory where to start playing
05B8            458       
05B8 7401       458       mov a, #0x01 ; change initial position
05BA 12040D     458       lcall Send_SPI
05BD 7493       458       mov a, #0x93 ; next memory position
05BF 12040D     458       lcall Send_SPI
05C2 7484       458       mov a, #0x84 ; next memory position
05C4 12040D     458       lcall Send_SPI
05C7 7401       458       mov a, #0x01 ; request first byte to send to DAC
05C9 12040D     458       lcall Send_SPI
05CC            458       
05CC            458       ; How many bytes to play?
05CC 754E00     458       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
05CF 754D36     458       mov w+1, #0x36 ; Load the middle byte of the number of bytes to play
05D2 754CB0     458       mov w+0, #0xb0 ; Load the low byte of the number of bytes to play
05D5            458       
05D5            458       
05D5 D2A6       458       setb SPEAKER ;Turn on speaker
05D7 D28E       458       setb TR1 ;Start playback by enabling Timer1
05D9            458       ;clr sound_flag ; sound ends ;one
05D9            459       ; ***play audio***
05D9            459       ;cjne sound_flag, #0, $
05D9 12182D     459       lcall Wait_Half_Second
05DC C28E       459       clr TR1 ; Stop Timer 1 ISR from playing previous request
05DE D2A5       459       setb FLASH_CE
05E0            459       ;setb sound_flag ; sound starts
05E0 C2A6       459       clr SPEAKER ; Turn off speaker
05E2 C2A5       459       clr FLASH_CE ; Enable SPI Flash
05E4 7403       459       mov a, #READ_BYTES
05E6 12040D     459       lcall Send_SPI
05E9            459       ; Set the initial position in memory where to start playing
05E9            459       
05E9 7405       459       mov a, #0x05 ; change initial position
05EB 12040D     459       lcall Send_SPI
05EE 7409       459       mov a, #0x09 ; next memory position
05F0 12040D     459       lcall Send_SPI
05F3 7410       459       mov a, #0x10 ; next memory position
05F5 12040D     459       lcall Send_SPI
05F8 7405       459       mov a, #0x05 ; request first byte to send to DAC
05FA 12040D     459       lcall Send_SPI
05FD            459       
05FD            459       ; How many bytes to play?
05FD 754E00     459       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0600 754D27     459       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
0603 754C10     459       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
0606            459       
0606            459       
0606 D2A6       459       setb SPEAKER ;Turn on speaker
0608 D28E       459       setb TR1 ;Start playback by enabling Timer1
060A            459       ;clr sound_flag ; sound ends ;hundred
060A 020672     460           ljmp state_3_sound
060D            461   
060D            462       play_sound_200:
060D            463       ; ***play audio***
060D            463       ;cjne sound_flag, #0, $
060D 12182D     463       lcall Wait_Half_Second
0610 C28E       463       clr TR1 ; Stop Timer 1 ISR from playing previous request
0612 D2A5       463       setb FLASH_CE
0614            463       ;setb sound_flag ; sound starts
0614 C2A6       463       clr SPEAKER ; Turn off speaker
0616 C2A5       463       clr FLASH_CE ; Enable SPI Flash
0618 7403       463       mov a, #READ_BYTES
061A 12040D     463       lcall Send_SPI
061D            463       ; Set the initial position in memory where to start playing
061D            463       
061D 7401       463       mov a, #0x01 ; change initial position
061F 12040D     463       lcall Send_SPI
0622 74C7       463       mov a, #0xc7 ; next memory position
0624 12040D     463       lcall Send_SPI
0627 7414       463       mov a, #0x14 ; next memory position
0629 12040D     463       lcall Send_SPI
062C 7401       463       mov a, #0x01 ; request first byte to send to DAC
062E 12040D     463       lcall Send_SPI
0631            463       
0631            463       ; How many bytes to play?
0631 754E00     463       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0634 754D13     463       mov w+1, #0x13 ; Load the middle byte of the number of bytes to play
0637 754C88     463       mov w+0, #0x88 ; Load the low byte of the number of bytes to play
063A            463       
063A            463       
063A D2A6       463       setb SPEAKER ;Turn on speaker
063C D28E       463       setb TR1 ;Start playback by enabling Timer1
063E            463       ;clr sound_flag ; sound ends ;two
063E            464       ; ***play audio***
063E            464       ;cjne sound_flag, #0, $
063E 12182D     464       lcall Wait_Half_Second
0641 C28E       464       clr TR1 ; Stop Timer 1 ISR from playing previous request
0643 D2A5       464       setb FLASH_CE
0645            464       ;setb sound_flag ; sound starts
0645 C2A6       464       clr SPEAKER ; Turn off speaker
0647 C2A5       464       clr FLASH_CE ; Enable SPI Flash
0649 7403       464       mov a, #READ_BYTES
064B 12040D     464       lcall Send_SPI
064E            464       ; Set the initial position in memory where to start playing
064E            464       
064E 7405       464       mov a, #0x05 ; change initial position
0650 12040D     464       lcall Send_SPI
0653 7409       464       mov a, #0x09 ; next memory position
0655 12040D     464       lcall Send_SPI
0658 7410       464       mov a, #0x10 ; next memory position
065A 12040D     464       lcall Send_SPI
065D 7405       464       mov a, #0x05 ; request first byte to send to DAC
065F 12040D     464       lcall Send_SPI
0662            464       
0662            464       ; How many bytes to play?
0662 754E00     464       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0665 754D27     464       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
0668 754C10     464       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
066B            464       
066B            464       
066B D2A6       464       setb SPEAKER ;Turn on speaker
066D D28E       464       setb TR1 ;Start playback by enabling Timer1
066F            464       ;clr sound_flag ; sound ends ;hundred
066F 020672     465           ljmp state_3_sound
0672            466   
0672            467   state_3_sound:
0672            468   ; check remainder of temp, if it is 0, exit
0672            469   ; if not 0, go to state_4_sound
0672            470   
0672            471   
0672 75F064     472       mov b, #100
0675 E53B       473       mov a, Temp_oven
0677 95F0       474       subb a, b
0679 E5F0       475       mov a, b
067B 600D       476       jz state_3_sound_hop
067D            477       
067D 75F0C8     478       mov b, #200
0680 E53B       479       mov a, Temp_oven
0682 95F0       480       subb a, b
0684 E5F0       481       mov a, b
0686 6002       482       jz state_3_sound_hop
0688            483   
0688 8003       484       sjmp state_4_sound
068A            485   
068A            486       state_3_sound_hop:
068A 020586     487           ljmp Sound_ret
068D            488   
068D            489   state_4_sound:
068D            490   ; if T % 100 greater or equal to 20, go to state_5_sound,
068D 75F064     491       mov b, #100
0690 E53B       492       mov a, Temp_oven
0692 84         493       div ab
0693            494       ;mov R0, b
0693 E5F0       495       mov a, b 
0695            496   
0695            497   
0695 9414       498       subb a, #20
0697 5027       499       jnc state_5_sound
0699 6025       500       jz state_5_sound
069B E4         501       clr a
069C            502   ; if T % 100 is less than 10, go to state_6_sound
069C 75F064     503       mov b, #100
069F E53B       504       mov a, Temp_oven
06A1 84         505       div ab
06A2 E5F0       506       mov a, b
06A4 940A       507       subb a, #10
06A6 4015       508       jc state_6_sound_hop0
06A8            509       
06A8            510       ;mov a, b
06A8            511       
06A8            512       ; ubb a, #0
06A8            513       ;jc state_6_sound_hop0
06A8            514       ;clr a
06A8            515   ; if T % 100 is greater than or equal to 10 and less than 20, go to state_7_sound
06A8            516   
06A8 75F064     517       mov b, #100
06AB E53B       518       mov a, Temp_oven
06AD 84         519       div ab
06AE E5F0       520       mov a, b
06B0 940A       521       subb a, #10
06B2 6000       522       jz and_branch
06B4            523   
06B4            524       and_branch:
06B4 E5F0       525           mov a, b
06B6 9414       526           subb a, #20
06B8 4000       527           jc state_7_sound_hop0
06BA            528       
06BA            529       state_7_sound_hop0:
06BA 020A81     530           ljmp state_7_sound
06BD            531   
06BD            532       state_6_sound_hop0:
06BD 020881     533           ljmp state_6_sound
06C0            534       
06C0            535   
06C0            536   state_5_sound:
06C0            537   ; play number from 20 to 90 in decades (20, 30, 40, 50, 60, 70, 80, 90), based off remainder from temp divided by 100
06C0            538   ; if (T % 100) % 10 is not equal to 0, go to state_6_sound
06C0            539   ; if (T % 100) % 10 is equal to 0, go to state_8_sound
06C0            540   
06C0            541       play_sound:
06C0            542           ;ljmp PLAYBACK_TEMP
06C0 E53B       543           mov a, Temp_oven
06C2 75F064     544           mov b, #100
06C5 84         545           div ab
06C6 E5F0       546           mov a, b
06C8 75F00A     547           mov b, #10
06CB 84         548           div ab
06CC B40234     549           cjne a, #2, play_30
06CF            550           ;mov    
06CF            551   
06CF            552           play_20:
06CF            553       ; ***play audio***
06CF            553       ;cjne sound_flag, #0, $
06CF 12182D     553       lcall Wait_Half_Second
06D2 C28E       553       clr TR1 ; Stop Timer 1 ISR from playing previous request
06D4 D2A5       553       setb FLASH_CE
06D6            553       ;setb sound_flag ; sound starts
06D6 C2A6       553       clr SPEAKER ; Turn off speaker
06D8 C2A5       553       clr FLASH_CE ; Enable SPI Flash
06DA 7403       553       mov a, #READ_BYTES
06DC 12040D     553       lcall Send_SPI
06DF            553       ; Set the initial position in memory where to start playing
06DF            553       
06DF 7403       553       mov a, #0x03 ; change initial position
06E1 12040D     553       lcall Send_SPI
06E4 74EF       553       mov a, #0xef ; next memory position
06E6 12040D     553       lcall Send_SPI
06E9 74D0       553       mov a, #0xd0 ; next memory position
06EB 12040D     553       lcall Send_SPI
06EE 7403       553       mov a, #0x03 ; request first byte to send to DAC
06F0 12040D     553       lcall Send_SPI
06F3            553       
06F3            553       ; How many bytes to play?
06F3 754E00     553       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
06F6 754D27     553       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
06F9 754C10     553       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
06FC            553       
06FC            553       
06FC D2A6       553       setb SPEAKER ;Turn on speaker
06FE D28E       553       setb TR1 ;Start playback by enabling Timer1
0700            553       ;clr sound_flag ; sound ends
0700            554               ;lcall Wait_One_Second
0700 02087E     555               ljmp state_6_sound_hop1
0703            556   
0703            557           play_30:
0703            558               
0703 B40334     559               cjne a, #3, play_40   
0706            560       ; ***play audio***
0706            560       ;cjne sound_flag, #0, $
0706 12182D     560       lcall Wait_Half_Second
0709 C28E       560       clr TR1 ; Stop Timer 1 ISR from playing previous request
070B D2A5       560       setb FLASH_CE
070D            560       ;setb sound_flag ; sound starts
070D C2A6       560       clr SPEAKER ; Turn off speaker
070F C2A5       560       clr FLASH_CE ; Enable SPI Flash
0711 7403       560       mov a, #READ_BYTES
0713 12040D     560       lcall Send_SPI
0716            560       ; Set the initial position in memory where to start playing
0716            560       
0716 7404       560       mov a, #0x04 ; change initial position
0718 12040D     560       lcall Send_SPI
071B 7416       560       mov a, #0x16 ; next memory position
071D 12040D     560       lcall Send_SPI
0720 74E0       560       mov a, #0xe0 ; next memory position
0722 12040D     560       lcall Send_SPI
0725 7404       560       mov a, #0x04 ; request first byte to send to DAC
0727 12040D     560       lcall Send_SPI
072A            560       
072A            560       ; How many bytes to play?
072A 754E00     560       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
072D 754D23     560       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
0730 754C28     560       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
0733            560       
0733            560       
0733 D2A6       560       setb SPEAKER ;Turn on speaker
0735 D28E       560       setb TR1 ;Start playback by enabling Timer1
0737            560       ;clr sound_flag ; sound ends
0737 02087E     561               ljmp state_6_sound_hop1
073A            562   
073A            563           play_40:
073A            564               
073A B40434     565               cjne a, #4, play_50  
073D            566       ; ***play audio***
073D            566       ;cjne sound_flag, #0, $
073D 12182D     566       lcall Wait_Half_Second
0740 C28E       566       clr TR1 ; Stop Timer 1 ISR from playing previous request
0742 D2A5       566       setb FLASH_CE
0744            566       ;setb sound_flag ; sound starts
0744 C2A6       566       clr SPEAKER ; Turn off speaker
0746 C2A5       566       clr FLASH_CE ; Enable SPI Flash
0748 7403       566       mov a, #READ_BYTES
074A 12040D     566       lcall Send_SPI
074D            566       ; Set the initial position in memory where to start playing
074D            566       
074D 7404       566       mov a, #0x04 ; change initial position
074F 12040D     566       lcall Send_SPI
0752 743D       566       mov a, #0x3d ; next memory position
0754 12040D     566       lcall Send_SPI
0757 74F0       566       mov a, #0xf0 ; next memory position
0759 12040D     566       lcall Send_SPI
075C 7404       566       mov a, #0x04 ; request first byte to send to DAC
075E 12040D     566       lcall Send_SPI
0761            566       
0761            566       ; How many bytes to play?
0761 754E00     566       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0764 754D1F     566       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
0767 754C40     566       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
076A            566       
076A            566       
076A D2A6       566       setb SPEAKER ;Turn on speaker
076C D28E       566       setb TR1 ;Start playback by enabling Timer1
076E            566       ;clr sound_flag ; sound ends
076E 02087E     567               ljmp state_6_sound_hop1
0771            568   
0771            569           play_50:
0771            570              
0771 B40534     571               cjne a, #5, play_60  
0774            572       ; ***play audio***
0774            572       ;cjne sound_flag, #0, $
0774 12182D     572       lcall Wait_Half_Second
0777 C28E       572       clr TR1 ; Stop Timer 1 ISR from playing previous request
0779 D2A5       572       setb FLASH_CE
077B            572       ;setb sound_flag ; sound starts
077B C2A6       572       clr SPEAKER ; Turn off speaker
077D C2A5       572       clr FLASH_CE ; Enable SPI Flash
077F 7403       572       mov a, #READ_BYTES
0781 12040D     572       lcall Send_SPI
0784            572       ; Set the initial position in memory where to start playing
0784            572       
0784 7404       572       mov a, #0x04 ; change initial position
0786 12040D     572       lcall Send_SPI
0789 7451       572       mov a, #0x51 ; next memory position
078B 12040D     572       lcall Send_SPI
078E 7478       572       mov a, #0x78 ; next memory position
0790 12040D     572       lcall Send_SPI
0793 7404       572       mov a, #0x04 ; request first byte to send to DAC
0795 12040D     572       lcall Send_SPI
0798            572       
0798            572       ; How many bytes to play?
0798 754E00     572       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
079B 754D23     572       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
079E 754C28     572       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
07A1            572       
07A1            572       
07A1 D2A6       572       setb SPEAKER ;Turn on speaker
07A3 D28E       572       setb TR1 ;Start playback by enabling Timer1
07A5            572       ;clr sound_flag ; sound ends
07A5 02087E     573               ljmp state_6_sound_hop1
07A8            574   
07A8            575           play_60:
07A8            576               
07A8 B40634     577               cjne a, #6, play_70  
07AB            578       ; ***play audio***
07AB            578       ;cjne sound_flag, #0, $
07AB 12182D     578       lcall Wait_Half_Second
07AE C28E       578       clr TR1 ; Stop Timer 1 ISR from playing previous request
07B0 D2A5       578       setb FLASH_CE
07B2            578       ;setb sound_flag ; sound starts
07B2 C2A6       578       clr SPEAKER ; Turn off speaker
07B4 C2A5       578       clr FLASH_CE ; Enable SPI Flash
07B6 7403       578       mov a, #READ_BYTES
07B8 12040D     578       lcall Send_SPI
07BB            578       ; Set the initial position in memory where to start playing
07BB            578       
07BB 7404       578       mov a, #0x04 ; change initial position
07BD 12040D     578       lcall Send_SPI
07C0 7474       578       mov a, #0x74 ; next memory position
07C2 12040D     578       lcall Send_SPI
07C5 74A0       578       mov a, #0xa0 ; next memory position
07C7 12040D     578       lcall Send_SPI
07CA 7404       578       mov a, #0x04 ; request first byte to send to DAC
07CC 12040D     578       lcall Send_SPI
07CF            578       
07CF            578       ; How many bytes to play?
07CF 754E00     578       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
07D2 754D27     578       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
07D5 754C10     578       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
07D8            578       
07D8            578       
07D8 D2A6       578       setb SPEAKER ;Turn on speaker
07DA D28E       578       setb TR1 ;Start playback by enabling Timer1
07DC            578       ;clr sound_flag ; sound ends
07DC 02087E     579               ljmp state_6_sound_hop1
07DF            580   
07DF            581           play_70:
07DF            582              
07DF B40734     583               cjne a, #7, play_80  
07E2            584       ; ***play audio***
07E2            584       ;cjne sound_flag, #0, $
07E2 12182D     584       lcall Wait_Half_Second
07E5 C28E       584       clr TR1 ; Stop Timer 1 ISR from playing previous request
07E7 D2A5       584       setb FLASH_CE
07E9            584       ;setb sound_flag ; sound starts
07E9 C2A6       584       clr SPEAKER ; Turn off speaker
07EB C2A5       584       clr FLASH_CE ; Enable SPI Flash
07ED 7403       584       mov a, #READ_BYTES
07EF 12040D     584       lcall Send_SPI
07F2            584       ; Set the initial position in memory where to start playing
07F2            584       
07F2 7404       584       mov a, #0x04 ; change initial position
07F4 12040D     584       lcall Send_SPI
07F7 749B       584       mov a, #0x9b ; next memory position
07F9 12040D     584       lcall Send_SPI
07FC 74B0       584       mov a, #0xb0 ; next memory position
07FE 12040D     584       lcall Send_SPI
0801 7404       584       mov a, #0x04 ; request first byte to send to DAC
0803 12040D     584       lcall Send_SPI
0806            584       
0806            584       ; How many bytes to play?
0806 754E00     584       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0809 754D32     584       mov w+1, #0x32 ; Load the middle byte of the number of bytes to play
080C 754CC8     584       mov w+0, #0xc8 ; Load the low byte of the number of bytes to play
080F            584       
080F            584       
080F D2A6       584       setb SPEAKER ;Turn on speaker
0811 D28E       584       setb TR1 ;Start playback by enabling Timer1
0813            584       ;clr sound_flag ; sound ends
0813 02087E     585               ljmp state_6_sound_hop1
0816            586   
0816            587           play_80:
0816            588               
0816 B40834     589               cjne a, #8, play_90  
0819            590       ; ***play audio***
0819            590       ;cjne sound_flag, #0, $
0819 12182D     590       lcall Wait_Half_Second
081C C28E       590       clr TR1 ; Stop Timer 1 ISR from playing previous request
081E D2A5       590       setb FLASH_CE
0820            590       ;setb sound_flag ; sound starts
0820 C2A6       590       clr SPEAKER ; Turn off speaker
0822 C2A5       590       clr FLASH_CE ; Enable SPI Flash
0824 7403       590       mov a, #READ_BYTES
0826 12040D     590       lcall Send_SPI
0829            590       ; Set the initial position in memory where to start playing
0829            590       
0829 7404       590       mov a, #0x04 ; change initial position
082B 12040D     590       lcall Send_SPI
082E 74C6       590       mov a, #0xc6 ; next memory position
0830 12040D     590       lcall Send_SPI
0833 74A8       590       mov a, #0xa8 ; next memory position
0835 12040D     590       lcall Send_SPI
0838 7404       590       mov a, #0x04 ; request first byte to send to DAC
083A 12040D     590       lcall Send_SPI
083D            590       
083D            590       ; How many bytes to play?
083D 754E00     590       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0840 754D23     590       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
0843 754C28     590       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
0846            590       
0846            590       
0846 D2A6       590       setb SPEAKER ;Turn on speaker
0848 D28E       590       setb TR1 ;Start playback by enabling Timer1
084A            590       ;clr sound_flag ; sound ends
084A 02087E     591               ljmp state_6_sound_hop1
084D            592   
084D            593           play_90:
084D            594       ; ***play audio***
084D            594       ;cjne sound_flag, #0, $
084D 12182D     594       lcall Wait_Half_Second
0850 C28E       594       clr TR1 ; Stop Timer 1 ISR from playing previous request
0852 D2A5       594       setb FLASH_CE
0854            594       ;setb sound_flag ; sound starts
0854 C2A6       594       clr SPEAKER ; Turn off speaker
0856 C2A5       594       clr FLASH_CE ; Enable SPI Flash
0858 7403       594       mov a, #READ_BYTES
085A 12040D     594       lcall Send_SPI
085D            594       ; Set the initial position in memory where to start playing
085D            594       
085D 7404       594       mov a, #0x04 ; change initial position
085F 12040D     594       lcall Send_SPI
0862 74ED       594       mov a, #0xed ; next memory position
0864 12040D     594       lcall Send_SPI
0867 74B8       594       mov a, #0xb8 ; next memory position
0869 12040D     594       lcall Send_SPI
086C 7404       594       mov a, #0x04 ; request first byte to send to DAC
086E 12040D     594       lcall Send_SPI
0871            594       
0871            594       ; How many bytes to play?
0871 754E00     594       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0874 754D1F     594       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
0877 754C40     594       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
087A            594       
087A            594       
087A D2A6       594       setb SPEAKER ;Turn on speaker
087C D28E       594       setb TR1 ;Start playback by enabling Timer1
087E            594       ;clr sound_flag ; sound ends
087E            595   
087E            596       state_6_sound_hop1:
087E 020881     597           ljmp state_6_sound
0881            598           
0881            599       ;state_8_hop0:
0881            600           ;ljmp state_6_sound ;state_8_sound
0881            601   
0881            602   
0881            603   state_6_sound:
0881            604   ; play 1 - 9
0881            605       ;ljmp PLAYBACK_TEMP
0881 75F064     606       mov b, #100
0884 E53B       607       mov a, Temp_oven
0886 84         608       div ab
0887 E5F0       609       mov a, b
0889 75F00A     610       mov b, #10
088C 84         611       div ab
088D E5F0       612       mov a, b
088F            613       
088F B40003     614       cjne a, #0x00, play_1
0892 020A7E     615       ljmp state_8_hop1
0895            616   
0895            617       play_1:
0895 B40134     618           cjne a, #0x01, play_2
0898            619       ; ***play audio***
0898            619       ;cjne sound_flag, #0, $
0898 12182D     619       lcall Wait_Half_Second
089B C28E       619       clr TR1 ; Stop Timer 1 ISR from playing previous request
089D D2A5       619       setb FLASH_CE
089F            619       ;setb sound_flag ; sound starts
089F C2A6       619       clr SPEAKER ; Turn off speaker
08A1 C2A5       619       clr FLASH_CE ; Enable SPI Flash
08A3 7403       619       mov a, #READ_BYTES
08A5 12040D     619       lcall Send_SPI
08A8            619       ; Set the initial position in memory where to start playing
08A8            619       
08A8 7401       619       mov a, #0x01 ; change initial position
08AA 12040D     619       lcall Send_SPI
08AD 7493       619       mov a, #0x93 ; next memory position
08AF 12040D     619       lcall Send_SPI
08B2 7484       619       mov a, #0x84 ; next memory position
08B4 12040D     619       lcall Send_SPI
08B7 7401       619       mov a, #0x01 ; request first byte to send to DAC
08B9 12040D     619       lcall Send_SPI
08BC            619       
08BC            619       ; How many bytes to play?
08BC 754E00     619       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
08BF 754D36     619       mov w+1, #0x36 ; Load the middle byte of the number of bytes to play
08C2 754CB0     619       mov w+0, #0xb0 ; Load the low byte of the number of bytes to play
08C5            619       
08C5            619       
08C5 D2A6       619       setb SPEAKER ;Turn on speaker
08C7 D28E       619       setb TR1 ;Start playback by enabling Timer1
08C9            619       ;clr sound_flag ; sound ends 
08C9 020A7E     620           ljmp state_8_hop1
08CC            621   
08CC            622       play_2:
08CC B40234     623           cjne a, #0x02, play_3
08CF            624       ; ***play audio***
08CF            624       ;cjne sound_flag, #0, $
08CF 12182D     624       lcall Wait_Half_Second
08D2 C28E       624       clr TR1 ; Stop Timer 1 ISR from playing previous request
08D4 D2A5       624       setb FLASH_CE
08D6            624       ;setb sound_flag ; sound starts
08D6 C2A6       624       clr SPEAKER ; Turn off speaker
08D8 C2A5       624       clr FLASH_CE ; Enable SPI Flash
08DA 7403       624       mov a, #READ_BYTES
08DC 12040D     624       lcall Send_SPI
08DF            624       ; Set the initial position in memory where to start playing
08DF            624       
08DF 7401       624       mov a, #0x01 ; change initial position
08E1 12040D     624       lcall Send_SPI
08E4 74C7       624       mov a, #0xc7 ; next memory position
08E6 12040D     624       lcall Send_SPI
08E9 7414       624       mov a, #0x14 ; next memory position
08EB 12040D     624       lcall Send_SPI
08EE 7401       624       mov a, #0x01 ; request first byte to send to DAC
08F0 12040D     624       lcall Send_SPI
08F3            624       
08F3            624       ; How many bytes to play?
08F3 754E00     624       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
08F6 754D13     624       mov w+1, #0x13 ; Load the middle byte of the number of bytes to play
08F9 754C88     624       mov w+0, #0x88 ; Load the low byte of the number of bytes to play
08FC            624       
08FC            624       
08FC D2A6       624       setb SPEAKER ;Turn on speaker
08FE D28E       624       setb TR1 ;Start playback by enabling Timer1
0900            624       ;clr sound_flag ; sound ends
0900 020A7E     625           ljmp state_8_hop1
0903            626   
0903            627       play_3:
0903 B40334     628           cjne a, #0x03, play_4
0906            629       ; ***play audio***
0906            629       ;cjne sound_flag, #0, $
0906 12182D     629       lcall Wait_Half_Second
0909 C28E       629       clr TR1 ; Stop Timer 1 ISR from playing previous request
090B D2A5       629       setb FLASH_CE
090D            629       ;setb sound_flag ; sound starts
090D C2A6       629       clr SPEAKER ; Turn off speaker
090F C2A5       629       clr FLASH_CE ; Enable SPI Flash
0911 7403       629       mov a, #READ_BYTES
0913 12040D     629       lcall Send_SPI
0916            629       ; Set the initial position in memory where to start playing
0916            629       
0916 7401       629       mov a, #0x01 ; change initial position
0918 12040D     629       lcall Send_SPI
091B 74D6       629       mov a, #0xd6 ; next memory position
091D 12040D     629       lcall Send_SPI
0920 7468       629       mov a, #0x68 ; next memory position
0922 12040D     629       lcall Send_SPI
0925 7401       629       mov a, #0x01 ; request first byte to send to DAC
0927 12040D     629       lcall Send_SPI
092A            629       
092A            629       ; How many bytes to play?
092A 754E00     629       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
092D 754D23     629       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
0930 754C28     629       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
0933            629       
0933            629       
0933 D2A6       629       setb SPEAKER ;Turn on speaker
0935 D28E       629       setb TR1 ;Start playback by enabling Timer1
0937            629       ;clr sound_flag ; sound ends
0937 020A7E     630           ljmp state_8_hop1
093A            631   
093A            632       play_4:
093A B40434     633           cjne a, #0x04, play_5
093D            634       ; ***play audio***
093D            634       ;cjne sound_flag, #0, $
093D 12182D     634       lcall Wait_Half_Second
0940 C28E       634       clr TR1 ; Stop Timer 1 ISR from playing previous request
0942 D2A5       634       setb FLASH_CE
0944            634       ;setb sound_flag ; sound starts
0944 C2A6       634       clr SPEAKER ; Turn off speaker
0946 C2A5       634       clr FLASH_CE ; Enable SPI Flash
0948 7403       634       mov a, #READ_BYTES
094A 12040D     634       lcall Send_SPI
094D            634       ; Set the initial position in memory where to start playing
094D            634       
094D 7401       634       mov a, #0x01 ; change initial position
094F 12040D     634       lcall Send_SPI
0952 74F4       634       mov a, #0xf4 ; next memory position
0954 12040D     634       lcall Send_SPI
0957 7400       634       mov a, #0x00 ; next memory position
0959 12040D     634       lcall Send_SPI
095C 7401       634       mov a, #0x01 ; request first byte to send to DAC
095E 12040D     634       lcall Send_SPI
0961            634       
0961            634       ; How many bytes to play?
0961 754E00     634       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0964 754D1B     634       mov w+1, #0x1b ; Load the middle byte of the number of bytes to play
0967 754C58     634       mov w+0, #0x58 ; Load the low byte of the number of bytes to play
096A            634       
096A            634       
096A D2A6       634       setb SPEAKER ;Turn on speaker
096C D28E       634       setb TR1 ;Start playback by enabling Timer1
096E            634       ;clr sound_flag ; sound ends
096E 020A7E     635           ljmp state_8_hop1
0971            636   
0971            637       play_5:
0971 B40534     638           cjne a, #0x05, play_6
0974            639       ; ***play audio***
0974            639       ;cjne sound_flag, #0, $
0974 12182D     639       lcall Wait_Half_Second
0977 C28E       639       clr TR1 ; Stop Timer 1 ISR from playing previous request
0979 D2A5       639       setb FLASH_CE
097B            639       ;setb sound_flag ; sound starts
097B C2A6       639       clr SPEAKER ; Turn off speaker
097D C2A5       639       clr FLASH_CE ; Enable SPI Flash
097F 7403       639       mov a, #READ_BYTES
0981 12040D     639       lcall Send_SPI
0984            639       ; Set the initial position in memory where to start playing
0984            639       
0984 7402       639       mov a, #0x02 ; change initial position
0986 12040D     639       lcall Send_SPI
0989 7407       639       mov a, #0x07 ; next memory position
098B 12040D     639       lcall Send_SPI
098E 7488       639       mov a, #0x88 ; next memory position
0990 12040D     639       lcall Send_SPI
0993 7402       639       mov a, #0x02 ; request first byte to send to DAC
0995 12040D     639       lcall Send_SPI
0998            639       
0998            639       ; How many bytes to play?
0998 754E00     639       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
099B 754D1B     639       mov w+1, #0x1b ; Load the middle byte of the number of bytes to play
099E 754C58     639       mov w+0, #0x58 ; Load the low byte of the number of bytes to play
09A1            639       
09A1            639       
09A1 D2A6       639       setb SPEAKER ;Turn on speaker
09A3 D28E       639       setb TR1 ;Start playback by enabling Timer1
09A5            639       ;clr sound_flag ; sound ends
09A5 020A7E     640           ljmp state_8_hop1
09A8            641   
09A8            642       play_6:
09A8 B40634     643           cjne a, #0x06, play_7
09AB            644       ; ***play audio***
09AB            644       ;cjne sound_flag, #0, $
09AB 12182D     644       lcall Wait_Half_Second
09AE C28E       644       clr TR1 ; Stop Timer 1 ISR from playing previous request
09B0 D2A5       644       setb FLASH_CE
09B2            644       ;setb sound_flag ; sound starts
09B2 C2A6       644       clr SPEAKER ; Turn off speaker
09B4 C2A5       644       clr FLASH_CE ; Enable SPI Flash
09B6 7403       644       mov a, #READ_BYTES
09B8 12040D     644       lcall Send_SPI
09BB            644       ; Set the initial position in memory where to start playing
09BB            644       
09BB 7402       644       mov a, #0x02 ; change initial position
09BD 12040D     644       lcall Send_SPI
09C0 7426       644       mov a, #0x26 ; next memory position
09C2 12040D     644       lcall Send_SPI
09C5 74C8       644       mov a, #0xc8 ; next memory position
09C7 12040D     644       lcall Send_SPI
09CA 7402       644       mov a, #0x02 ; request first byte to send to DAC
09CC 12040D     644       lcall Send_SPI
09CF            644       
09CF            644       ; How many bytes to play?
09CF 754E00     644       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
09D2 754D1F     644       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
09D5 754C40     644       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
09D8            644       
09D8            644       
09D8 D2A6       644       setb SPEAKER ;Turn on speaker
09DA D28E       644       setb TR1 ;Start playback by enabling Timer1
09DC            644       ;clr sound_flag ; sound ends
09DC 020A7E     645           ljmp state_8_hop1
09DF            646   
09DF            647       play_7:
09DF B40734     648           cjne a, #0x07, play_8
09E2            649       ; ***play audio***
09E2            649       ;cjne sound_flag, #0, $
09E2 12182D     649       lcall Wait_Half_Second
09E5 C28E       649       clr TR1 ; Stop Timer 1 ISR from playing previous request
09E7 D2A5       649       setb FLASH_CE
09E9            649       ;setb sound_flag ; sound starts
09E9 C2A6       649       clr SPEAKER ; Turn off speaker
09EB C2A5       649       clr FLASH_CE ; Enable SPI Flash
09ED 7403       649       mov a, #READ_BYTES
09EF 12040D     649       lcall Send_SPI
09F2            649       ; Set the initial position in memory where to start playing
09F2            649       
09F2 7402       649       mov a, #0x02 ; change initial position
09F4 12040D     649       lcall Send_SPI
09F7 7436       649       mov a, #0x36 ; next memory position
09F9 12040D     649       lcall Send_SPI
09FC 7468       649       mov a, #0x68 ; next memory position
09FE 12040D     649       lcall Send_SPI
0A01 7402       649       mov a, #0x02 ; request first byte to send to DAC
0A03 12040D     649       lcall Send_SPI
0A06            649       
0A06            649       ; How many bytes to play?
0A06 754E00     649       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0A09 754D23     649       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
0A0C 754C28     649       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
0A0F            649       
0A0F            649       
0A0F D2A6       649       setb SPEAKER ;Turn on speaker
0A11 D28E       649       setb TR1 ;Start playback by enabling Timer1
0A13            649       ;clr sound_flag ; sound ends
0A13 020A7E     650           ljmp state_8_hop1
0A16            651   
0A16            652       play_8:
0A16 B40834     653           cjne a, #0x08, play_9
0A19            654       ; ***play audio***
0A19            654       ;cjne sound_flag, #0, $
0A19 12182D     654       lcall Wait_Half_Second
0A1C C28E       654       clr TR1 ; Stop Timer 1 ISR from playing previous request
0A1E D2A5       654       setb FLASH_CE
0A20            654       ;setb sound_flag ; sound starts
0A20 C2A6       654       clr SPEAKER ; Turn off speaker
0A22 C2A5       654       clr FLASH_CE ; Enable SPI Flash
0A24 7403       654       mov a, #READ_BYTES
0A26 12040D     654       lcall Send_SPI
0A29            654       ; Set the initial position in memory where to start playing
0A29            654       
0A29 7402       654       mov a, #0x02 ; change initial position
0A2B 12040D     654       lcall Send_SPI
0A2E 7457       654       mov a, #0x57 ; next memory position
0A30 12040D     654       lcall Send_SPI
0A33 749C       654       mov a, #0x9c ; next memory position
0A35 12040D     654       lcall Send_SPI
0A38 7402       654       mov a, #0x02 ; request first byte to send to DAC
0A3A 12040D     654       lcall Send_SPI
0A3D            654       
0A3D            654       ; How many bytes to play?
0A3D 754E00     654       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0A40 754D1B     654       mov w+1, #0x1b ; Load the middle byte of the number of bytes to play
0A43 754C58     654       mov w+0, #0x58 ; Load the low byte of the number of bytes to play
0A46            654       
0A46            654       
0A46 D2A6       654       setb SPEAKER ;Turn on speaker
0A48 D28E       654       setb TR1 ;Start playback by enabling Timer1
0A4A            654       ;clr sound_flag ; sound ends
0A4A 020A7E     655           ljmp state_8_hop1
0A4D            656   
0A4D            657       play_9:
0A4D            658       ; ***play audio***
0A4D            658       ;cjne sound_flag, #0, $
0A4D 12182D     658       lcall Wait_Half_Second
0A50 C28E       658       clr TR1 ; Stop Timer 1 ISR from playing previous request
0A52 D2A5       658       setb FLASH_CE
0A54            658       ;setb sound_flag ; sound starts
0A54 C2A6       658       clr SPEAKER ; Turn off speaker
0A56 C2A5       658       clr FLASH_CE ; Enable SPI Flash
0A58 7403       658       mov a, #READ_BYTES
0A5A 12040D     658       lcall Send_SPI
0A5D            658       ; Set the initial position in memory where to start playing
0A5D            658       
0A5D 7402       658       mov a, #0x02 ; change initial position
0A5F 12040D     658       lcall Send_SPI
0A62 7469       658       mov a, #0x69 ; next memory position
0A64 12040D     658       lcall Send_SPI
0A67 7430       658       mov a, #0x30 ; next memory position
0A69 12040D     658       lcall Send_SPI
0A6C 7402       658       mov a, #0x02 ; request first byte to send to DAC
0A6E 12040D     658       lcall Send_SPI
0A71            658       
0A71            658       ; How many bytes to play?
0A71 754E00     658       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0A74 754D1F     658       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
0A77 754C40     658       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
0A7A            658       
0A7A            658       
0A7A D2A6       658       setb SPEAKER ;Turn on speaker
0A7C D28E       658       setb TR1 ;Start playback by enabling Timer1
0A7E            658       ;clr sound_flag ; sound ends
0A7E            659   
0A7E            660   state_8_hop1:
0A7E            661   ; go to state_8_sound
0A7E 020CAC     662       ljmp state_8_sound
0A81            663   
0A81            664   
0A81            665   state_7_sound:
0A81            666   ; play 10 - 19
0A81            667       ;ljmp PLAYBACK_TEMP
0A81 75F064     668       mov b, #100
0A84 E53B       669       mov a, Temp_oven
0A86 84         670       div ab
0A87 E5F0       671       mov a, b
0A89 B40A34     672       cjne a, #0x0a, play_11
0A8C            673       
0A8C            674       ; ***play audio***
0A8C            674       ;cjne sound_flag, #0, $
0A8C 12182D     674       lcall Wait_Half_Second
0A8F C28E       674       clr TR1 ; Stop Timer 1 ISR from playing previous request
0A91 D2A5       674       setb FLASH_CE
0A93            674       ;setb sound_flag ; sound starts
0A93 C2A6       674       clr SPEAKER ; Turn off speaker
0A95 C2A5       674       clr FLASH_CE ; Enable SPI Flash
0A97 7403       674       mov a, #READ_BYTES
0A99 12040D     674       lcall Send_SPI
0A9C            674       ; Set the initial position in memory where to start playing
0A9C            674       
0A9C 7402       674       mov a, #0x02 ; change initial position
0A9E 12040D     674       lcall Send_SPI
0AA1 7484       674       mov a, #0x84 ; next memory position
0AA3 12040D     674       lcall Send_SPI
0AA6 7488       674       mov a, #0x88 ; next memory position
0AA8 12040D     674       lcall Send_SPI
0AAB 7402       674       mov a, #0x02 ; request first byte to send to DAC
0AAD 12040D     674       lcall Send_SPI
0AB0            674       
0AB0            674       ; How many bytes to play?
0AB0 754E00     674       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0AB3 754D17     674       mov w+1, #0x17 ; Load the middle byte of the number of bytes to play
0AB6 754C70     674       mov w+0, #0x70 ; Load the low byte of the number of bytes to play
0AB9            674       
0AB9            674       
0AB9 D2A6       674       setb SPEAKER ;Turn on speaker
0ABB D28E       674       setb TR1 ;Start playback by enabling Timer1
0ABD            674       ;clr sound_flag ; sound ends
0ABD 020CA9     675       ljmp state_8_hop2
0AC0            676   
0AC0            677       play_11:
0AC0 B40B34     678           cjne a, #0x0b, play_12
0AC3            679       ; ***play audio***
0AC3            679       ;cjne sound_flag, #0, $
0AC3 12182D     679       lcall Wait_Half_Second
0AC6 C28E       679       clr TR1 ; Stop Timer 1 ISR from playing previous request
0AC8 D2A5       679       setb FLASH_CE
0ACA            679       ;setb sound_flag ; sound starts
0ACA C2A6       679       clr SPEAKER ; Turn off speaker
0ACC C2A5       679       clr FLASH_CE ; Enable SPI Flash
0ACE 7403       679       mov a, #READ_BYTES
0AD0 12040D     679       lcall Send_SPI
0AD3            679       ; Set the initial position in memory where to start playing
0AD3            679       
0AD3 7402       679       mov a, #0x02 ; change initial position
0AD5 12040D     679       lcall Send_SPI
0AD8 749B       679       mov a, #0x9b ; next memory position
0ADA 12040D     679       lcall Send_SPI
0ADD 74F8       679       mov a, #0xf8 ; next memory position
0ADF 12040D     679       lcall Send_SPI
0AE2 7402       679       mov a, #0x02 ; request first byte to send to DAC
0AE4 12040D     679       lcall Send_SPI
0AE7            679       
0AE7            679       ; How many bytes to play?
0AE7 754E00     679       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0AEA 754D1F     679       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
0AED 754C40     679       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
0AF0            679       
0AF0            679       
0AF0 D2A6       679       setb SPEAKER ;Turn on speaker
0AF2 D28E       679       setb TR1 ;Start playback by enabling Timer1
0AF4            679       ;clr sound_flag ; sound ends
0AF4 020CA9     680           ljmp state_8_hop2
0AF7            681   
0AF7            682       play_12:
0AF7 B40C34     683           cjne a, #0x0c, play_13
0AFA            684       ; ***play audio***
0AFA            684       ;cjne sound_flag, #0, $
0AFA 12182D     684       lcall Wait_Half_Second
0AFD C28E       684       clr TR1 ; Stop Timer 1 ISR from playing previous request
0AFF D2A5       684       setb FLASH_CE
0B01            684       ;setb sound_flag ; sound starts
0B01 C2A6       684       clr SPEAKER ; Turn off speaker
0B03 C2A5       684       clr FLASH_CE ; Enable SPI Flash
0B05 7403       684       mov a, #READ_BYTES
0B07 12040D     684       lcall Send_SPI
0B0A            684       ; Set the initial position in memory where to start playing
0B0A            684       
0B0A 7402       684       mov a, #0x02 ; change initial position
0B0C 12040D     684       lcall Send_SPI
0B0F 74B7       684       mov a, #0xb7 ; next memory position
0B11 12040D     684       lcall Send_SPI
0B14 7450       684       mov a, #0x50 ; next memory position
0B16 12040D     684       lcall Send_SPI
0B19 7402       684       mov a, #0x02 ; request first byte to send to DAC
0B1B 12040D     684       lcall Send_SPI
0B1E            684       
0B1E            684       ; How many bytes to play?
0B1E 754E00     684       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0B21 754D1F     684       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
0B24 754C40     684       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
0B27            684       
0B27            684       
0B27 D2A6       684       setb SPEAKER ;Turn on speaker
0B29 D28E       684       setb TR1 ;Start playback by enabling Timer1
0B2B            684       ;clr sound_flag ; sound ends
0B2B 020CA9     685           ljmp state_8_hop2
0B2E            686   
0B2E            687       play_13:
0B2E B40D34     688           cjne a, #0x0d, play_14
0B31            689       ; ***play audio***
0B31            689       ;cjne sound_flag, #0, $
0B31 12182D     689       lcall Wait_Half_Second
0B34 C28E       689       clr TR1 ; Stop Timer 1 ISR from playing previous request
0B36 D2A5       689       setb FLASH_CE
0B38            689       ;setb sound_flag ; sound starts
0B38 C2A6       689       clr SPEAKER ; Turn off speaker
0B3A C2A5       689       clr FLASH_CE ; Enable SPI Flash
0B3C 7403       689       mov a, #READ_BYTES
0B3E 12040D     689       lcall Send_SPI
0B41            689       ; Set the initial position in memory where to start playing
0B41            689       
0B41 7402       689       mov a, #0x02 ; change initial position
0B43 12040D     689       lcall Send_SPI
0B46 74CE       689       mov a, #0xce ; next memory position
0B48 12040D     689       lcall Send_SPI
0B4B 74C0       689       mov a, #0xc0 ; next memory position
0B4D 12040D     689       lcall Send_SPI
0B50 7402       689       mov a, #0x02 ; request first byte to send to DAC
0B52 12040D     689       lcall Send_SPI
0B55            689       
0B55            689       ; How many bytes to play?
0B55 754E00     689       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0B58 754D2E     689       mov w+1, #0x2e ; Load the middle byte of the number of bytes to play
0B5B 754CE0     689       mov w+0, #0xe0 ; Load the low byte of the number of bytes to play
0B5E            689       
0B5E            689       
0B5E D2A6       689       setb SPEAKER ;Turn on speaker
0B60 D28E       689       setb TR1 ;Start playback by enabling Timer1
0B62            689       ;clr sound_flag ; sound ends
0B62 020CA9     690           ljmp state_8_hop2
0B65            691   
0B65            692       play_14:
0B65 B40E34     693           cjne a, #0x0e, play_15
0B68            694       ; ***play audio***
0B68            694       ;cjne sound_flag, #0, $
0B68 12182D     694       lcall Wait_Half_Second
0B6B C28E       694       clr TR1 ; Stop Timer 1 ISR from playing previous request
0B6D D2A5       694       setb FLASH_CE
0B6F            694       ;setb sound_flag ; sound starts
0B6F C2A6       694       clr SPEAKER ; Turn off speaker
0B71 C2A5       694       clr FLASH_CE ; Enable SPI Flash
0B73 7403       694       mov a, #READ_BYTES
0B75 12040D     694       lcall Send_SPI
0B78            694       ; Set the initial position in memory where to start playing
0B78            694       
0B78 7402       694       mov a, #0x02 ; change initial position
0B7A 12040D     694       lcall Send_SPI
0B7D 74F5       694       mov a, #0xf5 ; next memory position
0B7F 12040D     694       lcall Send_SPI
0B82 74D0       694       mov a, #0xd0 ; next memory position
0B84 12040D     694       lcall Send_SPI
0B87 7402       694       mov a, #0x02 ; request first byte to send to DAC
0B89 12040D     694       lcall Send_SPI
0B8C            694       
0B8C            694       ; How many bytes to play?
0B8C 754E00     694       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0B8F 754D36     694       mov w+1, #0x36 ; Load the middle byte of the number of bytes to play
0B92 754CB0     694       mov w+0, #0xb0 ; Load the low byte of the number of bytes to play
0B95            694       
0B95            694       
0B95 D2A6       694       setb SPEAKER ;Turn on speaker
0B97 D28E       694       setb TR1 ;Start playback by enabling Timer1
0B99            694       ;clr sound_flag ; sound ends
0B99 020CA9     695           ljmp state_8_hop2
0B9C            696   
0B9C            697       play_15:
0B9C B40F34     698           cjne a, #0x0f, play_16
0B9F            699       ; ***play audio***
0B9F            699       ;cjne sound_flag, #0, $
0B9F 12182D     699       lcall Wait_Half_Second
0BA2 C28E       699       clr TR1 ; Stop Timer 1 ISR from playing previous request
0BA4 D2A5       699       setb FLASH_CE
0BA6            699       ;setb sound_flag ; sound starts
0BA6 C2A6       699       clr SPEAKER ; Turn off speaker
0BA8 C2A5       699       clr FLASH_CE ; Enable SPI Flash
0BAA 7403       699       mov a, #READ_BYTES
0BAC 12040D     699       lcall Send_SPI
0BAF            699       ; Set the initial position in memory where to start playing
0BAF            699       
0BAF 7403       699       mov a, #0x03 ; change initial position
0BB1 12040D     699       lcall Send_SPI
0BB4 7428       699       mov a, #0x28 ; next memory position
0BB6 12040D     699       lcall Send_SPI
0BB9 7498       699       mov a, #0x98 ; next memory position
0BBB 12040D     699       lcall Send_SPI
0BBE 7403       699       mov a, #0x03 ; request first byte to send to DAC
0BC0 12040D     699       lcall Send_SPI
0BC3            699       
0BC3            699       ; How many bytes to play?
0BC3 754E00     699       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0BC6 754D23     699       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
0BC9 754C28     699       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
0BCC            699       
0BCC            699       
0BCC D2A6       699       setb SPEAKER ;Turn on speaker
0BCE D28E       699       setb TR1 ;Start playback by enabling Timer1
0BD0            699       ;clr sound_flag ; sound ends
0BD0 020CA9     700           ljmp state_8_hop2
0BD3            701   
0BD3            702       play_16:
0BD3 B41034     703           cjne a, #0x10, play_17
0BD6            704       ; ***play audio***
0BD6            704       ;cjne sound_flag, #0, $
0BD6 12182D     704       lcall Wait_Half_Second
0BD9 C28E       704       clr TR1 ; Stop Timer 1 ISR from playing previous request
0BDB D2A5       704       setb FLASH_CE
0BDD            704       ;setb sound_flag ; sound starts
0BDD C2A6       704       clr SPEAKER ; Turn off speaker
0BDF C2A5       704       clr FLASH_CE ; Enable SPI Flash
0BE1 7403       704       mov a, #READ_BYTES
0BE3 12040D     704       lcall Send_SPI
0BE6            704       ; Set the initial position in memory where to start playing
0BE6            704       
0BE6 7403       704       mov a, #0x03 ; change initial position
0BE8 12040D     704       lcall Send_SPI
0BEB 7447       704       mov a, #0x47 ; next memory position
0BED 12040D     704       lcall Send_SPI
0BF0 74D8       704       mov a, #0xd8 ; next memory position
0BF2 12040D     704       lcall Send_SPI
0BF5 7403       704       mov a, #0x03 ; request first byte to send to DAC
0BF7 12040D     704       lcall Send_SPI
0BFA            704       
0BFA            704       ; How many bytes to play?
0BFA 754E00     704       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0BFD 754D32     704       mov w+1, #0x32 ; Load the middle byte of the number of bytes to play
0C00 754CC8     704       mov w+0, #0xc8 ; Load the low byte of the number of bytes to play
0C03            704       
0C03            704       
0C03 D2A6       704       setb SPEAKER ;Turn on speaker
0C05 D28E       704       setb TR1 ;Start playback by enabling Timer1
0C07            704       ;clr sound_flag ; sound ends
0C07 020CA9     705           ljmp state_8_hop2
0C0A            706   
0C0A            707       play_17:
0C0A B41134     708           cjne a, #0x11, play_18
0C0D            709       ; ***play audio***
0C0D            709       ;cjne sound_flag, #0, $
0C0D 12182D     709       lcall Wait_Half_Second
0C10 C28E       709       clr TR1 ; Stop Timer 1 ISR from playing previous request
0C12 D2A5       709       setb FLASH_CE
0C14            709       ;setb sound_flag ; sound starts
0C14 C2A6       709       clr SPEAKER ; Turn off speaker
0C16 C2A5       709       clr FLASH_CE ; Enable SPI Flash
0C18 7403       709       mov a, #READ_BYTES
0C1A 12040D     709       lcall Send_SPI
0C1D            709       ; Set the initial position in memory where to start playing
0C1D            709       
0C1D 7403       709       mov a, #0x03 ; change initial position
0C1F 12040D     709       lcall Send_SPI
0C22 7476       709       mov a, #0x76 ; next memory position
0C24 12040D     709       lcall Send_SPI
0C27 74B8       709       mov a, #0xb8 ; next memory position
0C29 12040D     709       lcall Send_SPI
0C2C 7403       709       mov a, #0x03 ; request first byte to send to DAC
0C2E 12040D     709       lcall Send_SPI
0C31            709       
0C31            709       ; How many bytes to play?
0C31 754E00     709       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0C34 754D2E     709       mov w+1, #0x2e ; Load the middle byte of the number of bytes to play
0C37 754C20     709       mov w+0, #0x20 ; Load the low byte of the number of bytes to play
0C3A            709       
0C3A            709       
0C3A D2A6       709       setb SPEAKER ;Turn on speaker
0C3C D28E       709       setb TR1 ;Start playback by enabling Timer1
0C3E            709       ;clr sound_flag ; sound ends
0C3E 020CA9     710           ljmp state_8_hop2
0C41            711   
0C41            712       play_18:
0C41 B41234     713           cjne a, #0x12, play_19
0C44            714       ; ***play audio***
0C44            714       ;cjne sound_flag, #0, $
0C44 12182D     714       lcall Wait_Half_Second
0C47 C28E       714       clr TR1 ; Stop Timer 1 ISR from playing previous request
0C49 D2A5       714       setb FLASH_CE
0C4B            714       ;setb sound_flag ; sound starts
0C4B C2A6       714       clr SPEAKER ; Turn off speaker
0C4D C2A5       714       clr FLASH_CE ; Enable SPI Flash
0C4F 7403       714       mov a, #READ_BYTES
0C51 12040D     714       lcall Send_SPI
0C54            714       ; Set the initial position in memory where to start playing
0C54            714       
0C54 7403       714       mov a, #0x03 ; change initial position
0C56 12040D     714       lcall Send_SPI
0C59 74A1       714       mov a, #0xa1 ; next memory position
0C5B 12040D     714       lcall Send_SPI
0C5E 74B0       714       mov a, #0xb0 ; next memory position
0C60 12040D     714       lcall Send_SPI
0C63 7403       714       mov a, #0x03 ; request first byte to send to DAC
0C65 12040D     714       lcall Send_SPI
0C68            714       
0C68            714       ; How many bytes to play?
0C68 754E00     714       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0C6B 754D27     714       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
0C6E 754C10     714       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
0C71            714       
0C71            714       
0C71 D2A6       714       setb SPEAKER ;Turn on speaker
0C73 D28E       714       setb TR1 ;Start playback by enabling Timer1
0C75            714       ;clr sound_flag ; sound ends
0C75 020CA9     715           ljmp state_8_hop2
0C78            716   
0C78            717       play_19:
0C78            718       ; ***play audio***
0C78            718       ;cjne sound_flag, #0, $
0C78 12182D     718       lcall Wait_Half_Second
0C7B C28E       718       clr TR1 ; Stop Timer 1 ISR from playing previous request
0C7D D2A5       718       setb FLASH_CE
0C7F            718       ;setb sound_flag ; sound starts
0C7F C2A6       718       clr SPEAKER ; Turn off speaker
0C81 C2A5       718       clr FLASH_CE ; Enable SPI Flash
0C83 7403       718       mov a, #READ_BYTES
0C85 12040D     718       lcall Send_SPI
0C88            718       ; Set the initial position in memory where to start playing
0C88            718       
0C88 7403       718       mov a, #0x03 ; change initial position
0C8A 12040D     718       lcall Send_SPI
0C8D 74C8       718       mov a, #0xc8 ; next memory position
0C8F 12040D     718       lcall Send_SPI
0C92 74C0       718       mov a, #0xc0 ; next memory position
0C94 12040D     718       lcall Send_SPI
0C97 7403       718       mov a, #0x03 ; request first byte to send to DAC
0C99 12040D     718       lcall Send_SPI
0C9C            718       
0C9C            718       ; How many bytes to play?
0C9C 754E00     718       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0C9F 754D27     718       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
0CA2 754C10     718       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
0CA5            718       
0CA5            718       
0CA5 D2A6       718       setb SPEAKER ;Turn on speaker
0CA7 D28E       718       setb TR1 ;Start playback by enabling Timer1
0CA9            718       ;clr sound_flag ; sound ends
0CA9            719   
0CA9            720       state_8_hop2:
0CA9            721       ; go to state_8_sound
0CA9 020CAC     722           ljmp state_8_sound
0CAC            723   
0CAC            724   state_8_sound:
0CAC            725   ; go to state_0_sound
0CAC 020586     726       ljmp Sound_ret
0CAF            727   
0CAF            728   ;****SPANISH SOUND FSM--------------------------------------------------------
0CAF            729   SOUND_FSM_S:
0CAF            730   state_0_sound_S:
0CAF            731   ;check if 5 seconds has passed, if yes go to state 1, if no exit function 
0CAF 300104     732       jnb five_seconds_flag, Sound_ret_S
0CB2 C201       733       clr five_seconds_flag
0CB4 8001       734       sjmp state_1_sound_S
0CB6            735   Sound_ret_S:
0CB6 22         736       ret
0CB7            737   
0CB7            738   state_1_sound_S:
0CB7            739   ; check if temp is greater than or equal to 100, if yes go to state 2
0CB7            740   ; check if temp is less than 100, if yes go to state 4
0CB7 E53B       741       mov a, Temp_oven
0CB9 9464       742       subb a, #100
0CBB 5002       743       jnc state_2_sound_hop_S
0CBD 4002       744       jc state_4_sound_hop_S
0CBF            745   
0CBF            746       state_2_sound_hop_S:
0CBF 8003       747           sjmp state_2_sound_S
0CC1            748   
0CC1            749       state_4_sound_hop_S:
0CC1 020DBD     750           ljmp state_4_sound_S
0CC4            751   
0CC4            752   state_2_sound_S:
0CC4            753   ;divide temp by 100, if it is 1 play sound: "100", if it is 2 play sound: "200"
0CC4            754   ; go to state_3_sound
0CC4 75F064     755       mov b, #100
0CC7 E53B       756       mov a, Temp_oven
0CC9 84         757       div ab
0CCA 9401       758       subb a, #1
0CCC 600A       759       jz play_sound_100_S
0CCE            760   
0CCE 75F064     761       mov b, #100
0CD1 E53B       762       mov a, Temp_oven
0CD3 84         763       div ab
0CD4 9402       764       subb a, #2
0CD6 6065       765       jz play_sound_200_S
0CD8            766      
0CD8            767       play_sound_100_S: 
0CD8            768       ; ***play audio***
0CD8            768       ;cjne sound_flag, #0, $
0CD8 12182D     768       lcall Wait_Half_Second
0CDB C28E       768       clr TR1 ; Stop Timer 1 ISR from playing previous request
0CDD D2A5       768       setb FLASH_CE
0CDF            768       ;setb sound_flag ; sound starts
0CDF C2A6       768       clr SPEAKER ; Turn off speaker
0CE1 C2A5       768       clr FLASH_CE ; Enable SPI Flash
0CE3 7403       768       mov a, #READ_BYTES
0CE5 12040D     768       lcall Send_SPI
0CE8            768       ; Set the initial position in memory where to start playing
0CE8            768       
0CE8 7401       768       mov a, #0x01 ; change initial position
0CEA 12040D     768       lcall Send_SPI
0CED 7493       768       mov a, #0x93 ; next memory position
0CEF 12040D     768       lcall Send_SPI
0CF2 7484       768       mov a, #0x84 ; next memory position
0CF4 12040D     768       lcall Send_SPI
0CF7 7401       768       mov a, #0x01 ; request first byte to send to DAC
0CF9 12040D     768       lcall Send_SPI
0CFC            768       
0CFC            768       ; How many bytes to play?
0CFC 754E00     768       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0CFF 754D36     768       mov w+1, #0x36 ; Load the middle byte of the number of bytes to play
0D02 754CB0     768       mov w+0, #0xb0 ; Load the low byte of the number of bytes to play
0D05            768       
0D05            768       
0D05 D2A6       768       setb SPEAKER ;Turn on speaker
0D07 D28E       768       setb TR1 ;Start playback by enabling Timer1
0D09            768       ;clr sound_flag ; sound ends ;one
0D09            769       ; ***play audio***
0D09            769       ;cjne sound_flag, #0, $
0D09 12182D     769       lcall Wait_Half_Second
0D0C C28E       769       clr TR1 ; Stop Timer 1 ISR from playing previous request
0D0E D2A5       769       setb FLASH_CE
0D10            769       ;setb sound_flag ; sound starts
0D10 C2A6       769       clr SPEAKER ; Turn off speaker
0D12 C2A5       769       clr FLASH_CE ; Enable SPI Flash
0D14 7403       769       mov a, #READ_BYTES
0D16 12040D     769       lcall Send_SPI
0D19            769       ; Set the initial position in memory where to start playing
0D19            769       
0D19 7405       769       mov a, #0x05 ; change initial position
0D1B 12040D     769       lcall Send_SPI
0D1E 7409       769       mov a, #0x09 ; next memory position
0D20 12040D     769       lcall Send_SPI
0D23 7410       769       mov a, #0x10 ; next memory position
0D25 12040D     769       lcall Send_SPI
0D28 7405       769       mov a, #0x05 ; request first byte to send to DAC
0D2A 12040D     769       lcall Send_SPI
0D2D            769       
0D2D            769       ; How many bytes to play?
0D2D 754E00     769       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0D30 754D27     769       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
0D33 754C10     769       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
0D36            769       
0D36            769       
0D36 D2A6       769       setb SPEAKER ;Turn on speaker
0D38 D28E       769       setb TR1 ;Start playback by enabling Timer1
0D3A            769       ;clr sound_flag ; sound ends ;hundred
0D3A 020DA2     770           ljmp state_3_sound_S
0D3D            771   
0D3D            772       play_sound_200_S:
0D3D            773       ; ***play audio***
0D3D            773       ;cjne sound_flag, #0, $
0D3D 12182D     773       lcall Wait_Half_Second
0D40 C28E       773       clr TR1 ; Stop Timer 1 ISR from playing previous request
0D42 D2A5       773       setb FLASH_CE
0D44            773       ;setb sound_flag ; sound starts
0D44 C2A6       773       clr SPEAKER ; Turn off speaker
0D46 C2A5       773       clr FLASH_CE ; Enable SPI Flash
0D48 7403       773       mov a, #READ_BYTES
0D4A 12040D     773       lcall Send_SPI
0D4D            773       ; Set the initial position in memory where to start playing
0D4D            773       
0D4D 7401       773       mov a, #0x01 ; change initial position
0D4F 12040D     773       lcall Send_SPI
0D52 74C7       773       mov a, #0xc7 ; next memory position
0D54 12040D     773       lcall Send_SPI
0D57 7414       773       mov a, #0x14 ; next memory position
0D59 12040D     773       lcall Send_SPI
0D5C 7401       773       mov a, #0x01 ; request first byte to send to DAC
0D5E 12040D     773       lcall Send_SPI
0D61            773       
0D61            773       ; How many bytes to play?
0D61 754E00     773       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0D64 754D13     773       mov w+1, #0x13 ; Load the middle byte of the number of bytes to play
0D67 754C88     773       mov w+0, #0x88 ; Load the low byte of the number of bytes to play
0D6A            773       
0D6A            773       
0D6A D2A6       773       setb SPEAKER ;Turn on speaker
0D6C D28E       773       setb TR1 ;Start playback by enabling Timer1
0D6E            773       ;clr sound_flag ; sound ends ;two
0D6E            774       ; ***play audio***
0D6E            774       ;cjne sound_flag, #0, $
0D6E 12182D     774       lcall Wait_Half_Second
0D71 C28E       774       clr TR1 ; Stop Timer 1 ISR from playing previous request
0D73 D2A5       774       setb FLASH_CE
0D75            774       ;setb sound_flag ; sound starts
0D75 C2A6       774       clr SPEAKER ; Turn off speaker
0D77 C2A5       774       clr FLASH_CE ; Enable SPI Flash
0D79 7403       774       mov a, #READ_BYTES
0D7B 12040D     774       lcall Send_SPI
0D7E            774       ; Set the initial position in memory where to start playing
0D7E            774       
0D7E 7405       774       mov a, #0x05 ; change initial position
0D80 12040D     774       lcall Send_SPI
0D83 7409       774       mov a, #0x09 ; next memory position
0D85 12040D     774       lcall Send_SPI
0D88 7410       774       mov a, #0x10 ; next memory position
0D8A 12040D     774       lcall Send_SPI
0D8D 7405       774       mov a, #0x05 ; request first byte to send to DAC
0D8F 12040D     774       lcall Send_SPI
0D92            774       
0D92            774       ; How many bytes to play?
0D92 754E00     774       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0D95 754D27     774       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
0D98 754C10     774       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
0D9B            774       
0D9B            774       
0D9B D2A6       774       setb SPEAKER ;Turn on speaker
0D9D D28E       774       setb TR1 ;Start playback by enabling Timer1
0D9F            774       ;clr sound_flag ; sound ends ;hundred
0D9F 020DA2     775           ljmp state_3_sound_S
0DA2            776   
0DA2            777   state_3_sound_S:
0DA2            778   ; check remainder of temp, if it is 0, exit
0DA2            779   ; if not 0, go to state_4_sound
0DA2            780   
0DA2            781   
0DA2 75F064     782       mov b, #100
0DA5 E53B       783       mov a, Temp_oven
0DA7 95F0       784       subb a, b
0DA9 E5F0       785       mov a, b
0DAB 600D       786       jz state_3_sound_hop_S
0DAD            787       
0DAD 75F0C8     788       mov b, #200
0DB0 E53B       789       mov a, Temp_oven
0DB2 95F0       790       subb a, b
0DB4 E5F0       791       mov a, b
0DB6 6002       792       jz state_3_sound_hop_S
0DB8            793   
0DB8 8003       794       sjmp state_4_sound_S
0DBA            795   
0DBA            796       state_3_sound_hop_S:
0DBA 020CB6     797           ljmp Sound_ret_S
0DBD            798   
0DBD            799   state_4_sound_S:
0DBD            800   ; if T % 100 greater or equal to 20, go to state_5_sound,
0DBD 75F064     801       mov b, #100
0DC0 E53B       802       mov a, Temp_oven
0DC2 84         803       div ab
0DC3            804       ;mov R0, b
0DC3 E5F0       805       mov a, b 
0DC5            806   
0DC5            807   
0DC5 9414       808       subb a, #20
0DC7 5027       809       jnc state_5_sound_S
0DC9 6025       810       jz state_5_sound_S
0DCB E4         811       clr a
0DCC            812   ; if T % 100 is less than 10, go to state_6_sound
0DCC 75F064     813       mov b, #100
0DCF E53B       814       mov a, Temp_oven
0DD1 84         815       div ab
0DD2 E5F0       816       mov a, b
0DD4 940A       817       subb a, #10
0DD6 4015       818       jc state_6_sound_hop0_S
0DD8            819       
0DD8            820       ;mov a, b
0DD8            821       
0DD8            822       ; ubb a, #0
0DD8            823       ;jc state_6_sound_hop0
0DD8            824       ;clr a
0DD8            825   ; if T % 100 is greater than or equal to 10 and less than 20, go to state_7_sound
0DD8            826   
0DD8 75F064     827       mov b, #100
0DDB E53B       828       mov a, Temp_oven
0DDD 84         829       div ab
0DDE E5F0       830       mov a, b
0DE0 940A       831       subb a, #10
0DE2 6000       832       jz and_branch_S
0DE4            833   
0DE4            834       and_branch_S:
0DE4 E5F0       835           mov a, b
0DE6 9414       836           subb a, #20
0DE8 4000       837           jc state_7_sound_hop0_S
0DEA            838       
0DEA            839       state_7_sound_hop0_S:
0DEA 0211B1     840           ljmp state_7_sound_S
0DED            841   
0DED            842       state_6_sound_hop0_S:
0DED 020FB1     843           ljmp state_6_sound_S
0DF0            844       
0DF0            845   
0DF0            846   state_5_sound_S:
0DF0            847   ; play number from 20 to 90 in decades (20, 30, 40, 50, 60, 70, 80, 90), based off remainder from temp divided by 100
0DF0            848   ; if (T % 100) % 10 is not equal to 0, go to state_6_sound
0DF0            849   ; if (T % 100) % 10 is equal to 0, go to state_8_sound
0DF0            850   
0DF0            851       play_sound_S:
0DF0            852           ;ljmp PLAYBACK_TEMP
0DF0 E53B       853           mov a, Temp_oven
0DF2 75F064     854           mov b, #100
0DF5 84         855           div ab
0DF6 E5F0       856           mov a, b
0DF8 75F00A     857           mov b, #10
0DFB 84         858           div ab
0DFC B40234     859           cjne a, #2, play_30_S
0DFF            860           ;mov    
0DFF            861   
0DFF            862           play_20_S:
0DFF            863       ; ***play audio***
0DFF            863       ;cjne sound_flag, #0, $
0DFF 12182D     863       lcall Wait_Half_Second
0E02 C28E       863       clr TR1 ; Stop Timer 1 ISR from playing previous request
0E04 D2A5       863       setb FLASH_CE
0E06            863       ;setb sound_flag ; sound starts
0E06 C2A6       863       clr SPEAKER ; Turn off speaker
0E08 C2A5       863       clr FLASH_CE ; Enable SPI Flash
0E0A 7403       863       mov a, #READ_BYTES
0E0C 12040D     863       lcall Send_SPI
0E0F            863       ; Set the initial position in memory where to start playing
0E0F            863       
0E0F 7403       863       mov a, #0x03 ; change initial position
0E11 12040D     863       lcall Send_SPI
0E14 74EF       863       mov a, #0xef ; next memory position
0E16 12040D     863       lcall Send_SPI
0E19 74D0       863       mov a, #0xd0 ; next memory position
0E1B 12040D     863       lcall Send_SPI
0E1E 7403       863       mov a, #0x03 ; request first byte to send to DAC
0E20 12040D     863       lcall Send_SPI
0E23            863       
0E23            863       ; How many bytes to play?
0E23 754E00     863       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0E26 754D27     863       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
0E29 754C10     863       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
0E2C            863       
0E2C            863       
0E2C D2A6       863       setb SPEAKER ;Turn on speaker
0E2E D28E       863       setb TR1 ;Start playback by enabling Timer1
0E30            863       ;clr sound_flag ; sound ends
0E30            864               ;lcall Wait_One_Second
0E30 020FAE     865               ljmp state_6_sound_hop1_S
0E33            866   
0E33            867           play_30_S:
0E33            868               
0E33 B40334     869               cjne a, #3, play_40_S   
0E36            870       ; ***play audio***
0E36            870       ;cjne sound_flag, #0, $
0E36 12182D     870       lcall Wait_Half_Second
0E39 C28E       870       clr TR1 ; Stop Timer 1 ISR from playing previous request
0E3B D2A5       870       setb FLASH_CE
0E3D            870       ;setb sound_flag ; sound starts
0E3D C2A6       870       clr SPEAKER ; Turn off speaker
0E3F C2A5       870       clr FLASH_CE ; Enable SPI Flash
0E41 7403       870       mov a, #READ_BYTES
0E43 12040D     870       lcall Send_SPI
0E46            870       ; Set the initial position in memory where to start playing
0E46            870       
0E46 7404       870       mov a, #0x04 ; change initial position
0E48 12040D     870       lcall Send_SPI
0E4B 7416       870       mov a, #0x16 ; next memory position
0E4D 12040D     870       lcall Send_SPI
0E50 74E0       870       mov a, #0xe0 ; next memory position
0E52 12040D     870       lcall Send_SPI
0E55 7404       870       mov a, #0x04 ; request first byte to send to DAC
0E57 12040D     870       lcall Send_SPI
0E5A            870       
0E5A            870       ; How many bytes to play?
0E5A 754E00     870       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0E5D 754D23     870       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
0E60 754C28     870       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
0E63            870       
0E63            870       
0E63 D2A6       870       setb SPEAKER ;Turn on speaker
0E65 D28E       870       setb TR1 ;Start playback by enabling Timer1
0E67            870       ;clr sound_flag ; sound ends
0E67 020FAE     871               ljmp state_6_sound_hop1_S
0E6A            872   
0E6A            873           play_40_S:
0E6A            874               
0E6A B40434     875               cjne a, #4, play_50_S 
0E6D            876       ; ***play audio***
0E6D            876       ;cjne sound_flag, #0, $
0E6D 12182D     876       lcall Wait_Half_Second
0E70 C28E       876       clr TR1 ; Stop Timer 1 ISR from playing previous request
0E72 D2A5       876       setb FLASH_CE
0E74            876       ;setb sound_flag ; sound starts
0E74 C2A6       876       clr SPEAKER ; Turn off speaker
0E76 C2A5       876       clr FLASH_CE ; Enable SPI Flash
0E78 7403       876       mov a, #READ_BYTES
0E7A 12040D     876       lcall Send_SPI
0E7D            876       ; Set the initial position in memory where to start playing
0E7D            876       
0E7D 7404       876       mov a, #0x04 ; change initial position
0E7F 12040D     876       lcall Send_SPI
0E82 743D       876       mov a, #0x3d ; next memory position
0E84 12040D     876       lcall Send_SPI
0E87 74F0       876       mov a, #0xf0 ; next memory position
0E89 12040D     876       lcall Send_SPI
0E8C 7404       876       mov a, #0x04 ; request first byte to send to DAC
0E8E 12040D     876       lcall Send_SPI
0E91            876       
0E91            876       ; How many bytes to play?
0E91 754E00     876       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0E94 754D1F     876       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
0E97 754C40     876       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
0E9A            876       
0E9A            876       
0E9A D2A6       876       setb SPEAKER ;Turn on speaker
0E9C D28E       876       setb TR1 ;Start playback by enabling Timer1
0E9E            876       ;clr sound_flag ; sound ends
0E9E 020FAE     877               ljmp state_6_sound_hop1_S
0EA1            878   
0EA1            879           play_50_S:
0EA1            880              
0EA1 B40534     881               cjne a, #5, play_60_S  
0EA4            882       ; ***play audio***
0EA4            882       ;cjne sound_flag, #0, $
0EA4 12182D     882       lcall Wait_Half_Second
0EA7 C28E       882       clr TR1 ; Stop Timer 1 ISR from playing previous request
0EA9 D2A5       882       setb FLASH_CE
0EAB            882       ;setb sound_flag ; sound starts
0EAB C2A6       882       clr SPEAKER ; Turn off speaker
0EAD C2A5       882       clr FLASH_CE ; Enable SPI Flash
0EAF 7403       882       mov a, #READ_BYTES
0EB1 12040D     882       lcall Send_SPI
0EB4            882       ; Set the initial position in memory where to start playing
0EB4            882       
0EB4 7404       882       mov a, #0x04 ; change initial position
0EB6 12040D     882       lcall Send_SPI
0EB9 7451       882       mov a, #0x51 ; next memory position
0EBB 12040D     882       lcall Send_SPI
0EBE 7478       882       mov a, #0x78 ; next memory position
0EC0 12040D     882       lcall Send_SPI
0EC3 7404       882       mov a, #0x04 ; request first byte to send to DAC
0EC5 12040D     882       lcall Send_SPI
0EC8            882       
0EC8            882       ; How many bytes to play?
0EC8 754E00     882       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0ECB 754D23     882       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
0ECE 754C28     882       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
0ED1            882       
0ED1            882       
0ED1 D2A6       882       setb SPEAKER ;Turn on speaker
0ED3 D28E       882       setb TR1 ;Start playback by enabling Timer1
0ED5            882       ;clr sound_flag ; sound ends
0ED5 020FAE     883               ljmp state_6_sound_hop1_S
0ED8            884   
0ED8            885           play_60_S:
0ED8            886               
0ED8 B40634     887               cjne a, #6, play_70_S  
0EDB            888       ; ***play audio***
0EDB            888       ;cjne sound_flag, #0, $
0EDB 12182D     888       lcall Wait_Half_Second
0EDE C28E       888       clr TR1 ; Stop Timer 1 ISR from playing previous request
0EE0 D2A5       888       setb FLASH_CE
0EE2            888       ;setb sound_flag ; sound starts
0EE2 C2A6       888       clr SPEAKER ; Turn off speaker
0EE4 C2A5       888       clr FLASH_CE ; Enable SPI Flash
0EE6 7403       888       mov a, #READ_BYTES
0EE8 12040D     888       lcall Send_SPI
0EEB            888       ; Set the initial position in memory where to start playing
0EEB            888       
0EEB 7404       888       mov a, #0x04 ; change initial position
0EED 12040D     888       lcall Send_SPI
0EF0 7474       888       mov a, #0x74 ; next memory position
0EF2 12040D     888       lcall Send_SPI
0EF5 74A0       888       mov a, #0xa0 ; next memory position
0EF7 12040D     888       lcall Send_SPI
0EFA 7404       888       mov a, #0x04 ; request first byte to send to DAC
0EFC 12040D     888       lcall Send_SPI
0EFF            888       
0EFF            888       ; How many bytes to play?
0EFF 754E00     888       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0F02 754D27     888       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
0F05 754C10     888       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
0F08            888       
0F08            888       
0F08 D2A6       888       setb SPEAKER ;Turn on speaker
0F0A D28E       888       setb TR1 ;Start playback by enabling Timer1
0F0C            888       ;clr sound_flag ; sound ends
0F0C 020FAE     889               ljmp state_6_sound_hop1_S
0F0F            890   
0F0F            891           play_70_S:
0F0F            892              
0F0F B40734     893               cjne a, #7, play_80_S  
0F12            894       ; ***play audio***
0F12            894       ;cjne sound_flag, #0, $
0F12 12182D     894       lcall Wait_Half_Second
0F15 C28E       894       clr TR1 ; Stop Timer 1 ISR from playing previous request
0F17 D2A5       894       setb FLASH_CE
0F19            894       ;setb sound_flag ; sound starts
0F19 C2A6       894       clr SPEAKER ; Turn off speaker
0F1B C2A5       894       clr FLASH_CE ; Enable SPI Flash
0F1D 7403       894       mov a, #READ_BYTES
0F1F 12040D     894       lcall Send_SPI
0F22            894       ; Set the initial position in memory where to start playing
0F22            894       
0F22 7404       894       mov a, #0x04 ; change initial position
0F24 12040D     894       lcall Send_SPI
0F27 749B       894       mov a, #0x9b ; next memory position
0F29 12040D     894       lcall Send_SPI
0F2C 74B0       894       mov a, #0xb0 ; next memory position
0F2E 12040D     894       lcall Send_SPI
0F31 7404       894       mov a, #0x04 ; request first byte to send to DAC
0F33 12040D     894       lcall Send_SPI
0F36            894       
0F36            894       ; How many bytes to play?
0F36 754E00     894       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0F39 754D32     894       mov w+1, #0x32 ; Load the middle byte of the number of bytes to play
0F3C 754CC8     894       mov w+0, #0xc8 ; Load the low byte of the number of bytes to play
0F3F            894       
0F3F            894       
0F3F D2A6       894       setb SPEAKER ;Turn on speaker
0F41 D28E       894       setb TR1 ;Start playback by enabling Timer1
0F43            894       ;clr sound_flag ; sound ends
0F43 020FAE     895               ljmp state_6_sound_hop1_S
0F46            896   
0F46            897           play_80_S:
0F46            898               
0F46 B40834     899               cjne a, #8, play_90_S  
0F49            900       ; ***play audio***
0F49            900       ;cjne sound_flag, #0, $
0F49 12182D     900       lcall Wait_Half_Second
0F4C C28E       900       clr TR1 ; Stop Timer 1 ISR from playing previous request
0F4E D2A5       900       setb FLASH_CE
0F50            900       ;setb sound_flag ; sound starts
0F50 C2A6       900       clr SPEAKER ; Turn off speaker
0F52 C2A5       900       clr FLASH_CE ; Enable SPI Flash
0F54 7403       900       mov a, #READ_BYTES
0F56 12040D     900       lcall Send_SPI
0F59            900       ; Set the initial position in memory where to start playing
0F59            900       
0F59 7404       900       mov a, #0x04 ; change initial position
0F5B 12040D     900       lcall Send_SPI
0F5E 74C6       900       mov a, #0xc6 ; next memory position
0F60 12040D     900       lcall Send_SPI
0F63 74A8       900       mov a, #0xa8 ; next memory position
0F65 12040D     900       lcall Send_SPI
0F68 7404       900       mov a, #0x04 ; request first byte to send to DAC
0F6A 12040D     900       lcall Send_SPI
0F6D            900       
0F6D            900       ; How many bytes to play?
0F6D 754E00     900       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0F70 754D23     900       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
0F73 754C28     900       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
0F76            900       
0F76            900       
0F76 D2A6       900       setb SPEAKER ;Turn on speaker
0F78 D28E       900       setb TR1 ;Start playback by enabling Timer1
0F7A            900       ;clr sound_flag ; sound ends
0F7A 020FAE     901               ljmp state_6_sound_hop1_S
0F7D            902   
0F7D            903           play_90_S:
0F7D            904       ; ***play audio***
0F7D            904       ;cjne sound_flag, #0, $
0F7D 12182D     904       lcall Wait_Half_Second
0F80 C28E       904       clr TR1 ; Stop Timer 1 ISR from playing previous request
0F82 D2A5       904       setb FLASH_CE
0F84            904       ;setb sound_flag ; sound starts
0F84 C2A6       904       clr SPEAKER ; Turn off speaker
0F86 C2A5       904       clr FLASH_CE ; Enable SPI Flash
0F88 7403       904       mov a, #READ_BYTES
0F8A 12040D     904       lcall Send_SPI
0F8D            904       ; Set the initial position in memory where to start playing
0F8D            904       
0F8D 7404       904       mov a, #0x04 ; change initial position
0F8F 12040D     904       lcall Send_SPI
0F92 74ED       904       mov a, #0xed ; next memory position
0F94 12040D     904       lcall Send_SPI
0F97 74B8       904       mov a, #0xb8 ; next memory position
0F99 12040D     904       lcall Send_SPI
0F9C 7404       904       mov a, #0x04 ; request first byte to send to DAC
0F9E 12040D     904       lcall Send_SPI
0FA1            904       
0FA1            904       ; How many bytes to play?
0FA1 754E00     904       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0FA4 754D1F     904       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
0FA7 754C40     904       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
0FAA            904       
0FAA            904       
0FAA D2A6       904       setb SPEAKER ;Turn on speaker
0FAC D28E       904       setb TR1 ;Start playback by enabling Timer1
0FAE            904       ;clr sound_flag ; sound ends
0FAE            905   
0FAE            906   
0FAE            907   
0FAE            908   
0FAE            909       state_6_sound_hop1_S:
0FAE 020FB1     910           ljmp state_6_sound_S
0FB1            911           
0FB1            912       ;state_8_hop0:
0FB1            913           ;ljmp state_6_sound ;state_8_sound
0FB1            914   
0FB1            915   
0FB1            916   state_6_sound_S:
0FB1            917   ; play 1 - 9
0FB1            918       ;ljmp PLAYBACK_TEMP
0FB1 75F064     919       mov b, #100
0FB4 E53B       920       mov a, Temp_oven
0FB6 84         921       div ab
0FB7 E5F0       922       mov a, b
0FB9 75F00A     923       mov b, #10
0FBC 84         924       div ab
0FBD E5F0       925       mov a, b
0FBF            926       
0FBF B40003     927       cjne a, #0x00, play_1_S
0FC2 0211AE     928       ljmp state_8_hop1_S
0FC5            929   
0FC5            930       play_1_S:
0FC5 B40134     931           cjne a, #0x01, play_2_S
0FC8            932       ; ***play audio***
0FC8            932       ;cjne sound_flag, #0, $
0FC8 12182D     932       lcall Wait_Half_Second
0FCB C28E       932       clr TR1 ; Stop Timer 1 ISR from playing previous request
0FCD D2A5       932       setb FLASH_CE
0FCF            932       ;setb sound_flag ; sound starts
0FCF C2A6       932       clr SPEAKER ; Turn off speaker
0FD1 C2A5       932       clr FLASH_CE ; Enable SPI Flash
0FD3 7403       932       mov a, #READ_BYTES
0FD5 12040D     932       lcall Send_SPI
0FD8            932       ; Set the initial position in memory where to start playing
0FD8            932       
0FD8 7401       932       mov a, #0x01 ; change initial position
0FDA 12040D     932       lcall Send_SPI
0FDD 7493       932       mov a, #0x93 ; next memory position
0FDF 12040D     932       lcall Send_SPI
0FE2 7484       932       mov a, #0x84 ; next memory position
0FE4 12040D     932       lcall Send_SPI
0FE7 7401       932       mov a, #0x01 ; request first byte to send to DAC
0FE9 12040D     932       lcall Send_SPI
0FEC            932       
0FEC            932       ; How many bytes to play?
0FEC 754E00     932       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0FEF 754D36     932       mov w+1, #0x36 ; Load the middle byte of the number of bytes to play
0FF2 754CB0     932       mov w+0, #0xb0 ; Load the low byte of the number of bytes to play
0FF5            932       
0FF5            932       
0FF5 D2A6       932       setb SPEAKER ;Turn on speaker
0FF7 D28E       932       setb TR1 ;Start playback by enabling Timer1
0FF9            932       ;clr sound_flag ; sound ends 
0FF9 0211AE     933           ljmp state_8_hop1_S
0FFC            934   
0FFC            935       play_2_S:
0FFC B40234     936           cjne a, #0x02, play_3_S
0FFF            937       ; ***play audio***
0FFF            937       ;cjne sound_flag, #0, $
0FFF 12182D     937       lcall Wait_Half_Second
1002 C28E       937       clr TR1 ; Stop Timer 1 ISR from playing previous request
1004 D2A5       937       setb FLASH_CE
1006            937       ;setb sound_flag ; sound starts
1006 C2A6       937       clr SPEAKER ; Turn off speaker
1008 C2A5       937       clr FLASH_CE ; Enable SPI Flash
100A 7403       937       mov a, #READ_BYTES
100C 12040D     937       lcall Send_SPI
100F            937       ; Set the initial position in memory where to start playing
100F            937       
100F 7401       937       mov a, #0x01 ; change initial position
1011 12040D     937       lcall Send_SPI
1014 74C7       937       mov a, #0xc7 ; next memory position
1016 12040D     937       lcall Send_SPI
1019 7414       937       mov a, #0x14 ; next memory position
101B 12040D     937       lcall Send_SPI
101E 7401       937       mov a, #0x01 ; request first byte to send to DAC
1020 12040D     937       lcall Send_SPI
1023            937       
1023            937       ; How many bytes to play?
1023 754E00     937       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1026 754D13     937       mov w+1, #0x13 ; Load the middle byte of the number of bytes to play
1029 754C88     937       mov w+0, #0x88 ; Load the low byte of the number of bytes to play
102C            937       
102C            937       
102C D2A6       937       setb SPEAKER ;Turn on speaker
102E D28E       937       setb TR1 ;Start playback by enabling Timer1
1030            937       ;clr sound_flag ; sound ends
1030 0211AE     938           ljmp state_8_hop1_S
1033            939   
1033            940       play_3_S:
1033 B40334     941           cjne a, #0x03, play_4_S
1036            942       ; ***play audio***
1036            942       ;cjne sound_flag, #0, $
1036 12182D     942       lcall Wait_Half_Second
1039 C28E       942       clr TR1 ; Stop Timer 1 ISR from playing previous request
103B D2A5       942       setb FLASH_CE
103D            942       ;setb sound_flag ; sound starts
103D C2A6       942       clr SPEAKER ; Turn off speaker
103F C2A5       942       clr FLASH_CE ; Enable SPI Flash
1041 7403       942       mov a, #READ_BYTES
1043 12040D     942       lcall Send_SPI
1046            942       ; Set the initial position in memory where to start playing
1046            942       
1046 7401       942       mov a, #0x01 ; change initial position
1048 12040D     942       lcall Send_SPI
104B 74D6       942       mov a, #0xd6 ; next memory position
104D 12040D     942       lcall Send_SPI
1050 7468       942       mov a, #0x68 ; next memory position
1052 12040D     942       lcall Send_SPI
1055 7401       942       mov a, #0x01 ; request first byte to send to DAC
1057 12040D     942       lcall Send_SPI
105A            942       
105A            942       ; How many bytes to play?
105A 754E00     942       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
105D 754D23     942       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
1060 754C28     942       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
1063            942       
1063            942       
1063 D2A6       942       setb SPEAKER ;Turn on speaker
1065 D28E       942       setb TR1 ;Start playback by enabling Timer1
1067            942       ;clr sound_flag ; sound ends
1067 0211AE     943           ljmp state_8_hop1_S
106A            944   
106A            945       play_4_S:
106A B40434     946           cjne a, #0x04, play_5_S
106D            947       ; ***play audio***
106D            947       ;cjne sound_flag, #0, $
106D 12182D     947       lcall Wait_Half_Second
1070 C28E       947       clr TR1 ; Stop Timer 1 ISR from playing previous request
1072 D2A5       947       setb FLASH_CE
1074            947       ;setb sound_flag ; sound starts
1074 C2A6       947       clr SPEAKER ; Turn off speaker
1076 C2A5       947       clr FLASH_CE ; Enable SPI Flash
1078 7403       947       mov a, #READ_BYTES
107A 12040D     947       lcall Send_SPI
107D            947       ; Set the initial position in memory where to start playing
107D            947       
107D 7401       947       mov a, #0x01 ; change initial position
107F 12040D     947       lcall Send_SPI
1082 74F4       947       mov a, #0xf4 ; next memory position
1084 12040D     947       lcall Send_SPI
1087 7400       947       mov a, #0x00 ; next memory position
1089 12040D     947       lcall Send_SPI
108C 7401       947       mov a, #0x01 ; request first byte to send to DAC
108E 12040D     947       lcall Send_SPI
1091            947       
1091            947       ; How many bytes to play?
1091 754E00     947       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1094 754D1B     947       mov w+1, #0x1b ; Load the middle byte of the number of bytes to play
1097 754C58     947       mov w+0, #0x58 ; Load the low byte of the number of bytes to play
109A            947       
109A            947       
109A D2A6       947       setb SPEAKER ;Turn on speaker
109C D28E       947       setb TR1 ;Start playback by enabling Timer1
109E            947       ;clr sound_flag ; sound ends
109E 0211AE     948           ljmp state_8_hop1_S
10A1            949   
10A1            950       play_5_S:
10A1 B40534     951           cjne a, #0x05, play_6_S
10A4            952       ; ***play audio***
10A4            952       ;cjne sound_flag, #0, $
10A4 12182D     952       lcall Wait_Half_Second
10A7 C28E       952       clr TR1 ; Stop Timer 1 ISR from playing previous request
10A9 D2A5       952       setb FLASH_CE
10AB            952       ;setb sound_flag ; sound starts
10AB C2A6       952       clr SPEAKER ; Turn off speaker
10AD C2A5       952       clr FLASH_CE ; Enable SPI Flash
10AF 7403       952       mov a, #READ_BYTES
10B1 12040D     952       lcall Send_SPI
10B4            952       ; Set the initial position in memory where to start playing
10B4            952       
10B4 7402       952       mov a, #0x02 ; change initial position
10B6 12040D     952       lcall Send_SPI
10B9 7407       952       mov a, #0x07 ; next memory position
10BB 12040D     952       lcall Send_SPI
10BE 7488       952       mov a, #0x88 ; next memory position
10C0 12040D     952       lcall Send_SPI
10C3 7402       952       mov a, #0x02 ; request first byte to send to DAC
10C5 12040D     952       lcall Send_SPI
10C8            952       
10C8            952       ; How many bytes to play?
10C8 754E00     952       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
10CB 754D1B     952       mov w+1, #0x1b ; Load the middle byte of the number of bytes to play
10CE 754C58     952       mov w+0, #0x58 ; Load the low byte of the number of bytes to play
10D1            952       
10D1            952       
10D1 D2A6       952       setb SPEAKER ;Turn on speaker
10D3 D28E       952       setb TR1 ;Start playback by enabling Timer1
10D5            952       ;clr sound_flag ; sound ends
10D5 0211AE     953           ljmp state_8_hop1_S
10D8            954   
10D8            955       play_6_S:
10D8 B40634     956           cjne a, #0x06, play_7_S
10DB            957       ; ***play audio***
10DB            957       ;cjne sound_flag, #0, $
10DB 12182D     957       lcall Wait_Half_Second
10DE C28E       957       clr TR1 ; Stop Timer 1 ISR from playing previous request
10E0 D2A5       957       setb FLASH_CE
10E2            957       ;setb sound_flag ; sound starts
10E2 C2A6       957       clr SPEAKER ; Turn off speaker
10E4 C2A5       957       clr FLASH_CE ; Enable SPI Flash
10E6 7403       957       mov a, #READ_BYTES
10E8 12040D     957       lcall Send_SPI
10EB            957       ; Set the initial position in memory where to start playing
10EB            957       
10EB 7402       957       mov a, #0x02 ; change initial position
10ED 12040D     957       lcall Send_SPI
10F0 7426       957       mov a, #0x26 ; next memory position
10F2 12040D     957       lcall Send_SPI
10F5 74C8       957       mov a, #0xc8 ; next memory position
10F7 12040D     957       lcall Send_SPI
10FA 7402       957       mov a, #0x02 ; request first byte to send to DAC
10FC 12040D     957       lcall Send_SPI
10FF            957       
10FF            957       ; How many bytes to play?
10FF 754E00     957       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1102 754D1F     957       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
1105 754C40     957       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
1108            957       
1108            957       
1108 D2A6       957       setb SPEAKER ;Turn on speaker
110A D28E       957       setb TR1 ;Start playback by enabling Timer1
110C            957       ;clr sound_flag ; sound ends
110C 0211AE     958           ljmp state_8_hop1_S
110F            959   
110F            960       play_7_S:
110F B40734     961           cjne a, #0x07, play_8_S
1112            962       ; ***play audio***
1112            962       ;cjne sound_flag, #0, $
1112 12182D     962       lcall Wait_Half_Second
1115 C28E       962       clr TR1 ; Stop Timer 1 ISR from playing previous request
1117 D2A5       962       setb FLASH_CE
1119            962       ;setb sound_flag ; sound starts
1119 C2A6       962       clr SPEAKER ; Turn off speaker
111B C2A5       962       clr FLASH_CE ; Enable SPI Flash
111D 7403       962       mov a, #READ_BYTES
111F 12040D     962       lcall Send_SPI
1122            962       ; Set the initial position in memory where to start playing
1122            962       
1122 7402       962       mov a, #0x02 ; change initial position
1124 12040D     962       lcall Send_SPI
1127 7436       962       mov a, #0x36 ; next memory position
1129 12040D     962       lcall Send_SPI
112C 7468       962       mov a, #0x68 ; next memory position
112E 12040D     962       lcall Send_SPI
1131 7402       962       mov a, #0x02 ; request first byte to send to DAC
1133 12040D     962       lcall Send_SPI
1136            962       
1136            962       ; How many bytes to play?
1136 754E00     962       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1139 754D23     962       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
113C 754C28     962       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
113F            962       
113F            962       
113F D2A6       962       setb SPEAKER ;Turn on speaker
1141 D28E       962       setb TR1 ;Start playback by enabling Timer1
1143            962       ;clr sound_flag ; sound ends
1143 0211AE     963           ljmp state_8_hop1_S
1146            964   
1146            965       play_8_S:
1146 B40834     966           cjne a, #0x08, play_9_S
1149            967       ; ***play audio***
1149            967       ;cjne sound_flag, #0, $
1149 12182D     967       lcall Wait_Half_Second
114C C28E       967       clr TR1 ; Stop Timer 1 ISR from playing previous request
114E D2A5       967       setb FLASH_CE
1150            967       ;setb sound_flag ; sound starts
1150 C2A6       967       clr SPEAKER ; Turn off speaker
1152 C2A5       967       clr FLASH_CE ; Enable SPI Flash
1154 7403       967       mov a, #READ_BYTES
1156 12040D     967       lcall Send_SPI
1159            967       ; Set the initial position in memory where to start playing
1159            967       
1159 7402       967       mov a, #0x02 ; change initial position
115B 12040D     967       lcall Send_SPI
115E 7457       967       mov a, #0x57 ; next memory position
1160 12040D     967       lcall Send_SPI
1163 749C       967       mov a, #0x9c ; next memory position
1165 12040D     967       lcall Send_SPI
1168 7402       967       mov a, #0x02 ; request first byte to send to DAC
116A 12040D     967       lcall Send_SPI
116D            967       
116D            967       ; How many bytes to play?
116D 754E00     967       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1170 754D1B     967       mov w+1, #0x1b ; Load the middle byte of the number of bytes to play
1173 754C58     967       mov w+0, #0x58 ; Load the low byte of the number of bytes to play
1176            967       
1176            967       
1176 D2A6       967       setb SPEAKER ;Turn on speaker
1178 D28E       967       setb TR1 ;Start playback by enabling Timer1
117A            967       ;clr sound_flag ; sound ends
117A 0211AE     968           ljmp state_8_hop1_S
117D            969   
117D            970       play_9_S:
117D            971       ; ***play audio***
117D            971       ;cjne sound_flag, #0, $
117D 12182D     971       lcall Wait_Half_Second
1180 C28E       971       clr TR1 ; Stop Timer 1 ISR from playing previous request
1182 D2A5       971       setb FLASH_CE
1184            971       ;setb sound_flag ; sound starts
1184 C2A6       971       clr SPEAKER ; Turn off speaker
1186 C2A5       971       clr FLASH_CE ; Enable SPI Flash
1188 7403       971       mov a, #READ_BYTES
118A 12040D     971       lcall Send_SPI
118D            971       ; Set the initial position in memory where to start playing
118D            971       
118D 7402       971       mov a, #0x02 ; change initial position
118F 12040D     971       lcall Send_SPI
1192 7469       971       mov a, #0x69 ; next memory position
1194 12040D     971       lcall Send_SPI
1197 7430       971       mov a, #0x30 ; next memory position
1199 12040D     971       lcall Send_SPI
119C 7402       971       mov a, #0x02 ; request first byte to send to DAC
119E 12040D     971       lcall Send_SPI
11A1            971       
11A1            971       ; How many bytes to play?
11A1 754E00     971       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
11A4 754D1F     971       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
11A7 754C40     971       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
11AA            971       
11AA            971       
11AA D2A6       971       setb SPEAKER ;Turn on speaker
11AC D28E       971       setb TR1 ;Start playback by enabling Timer1
11AE            971       ;clr sound_flag ; sound ends
11AE            972   
11AE            973   state_8_hop1_S:
11AE            974   ; go to state_8_sound
11AE 0213DC     975       ljmp state_8_sound_S
11B1            976   
11B1            977   
11B1            978   state_7_sound_S:
11B1            979   ; play 10 - 19
11B1            980       ;ljmp PLAYBACK_TEMP
11B1 75F064     981       mov b, #100
11B4 E53B       982       mov a, Temp_oven
11B6 84         983       div ab
11B7 E5F0       984       mov a, b
11B9 B40A34     985       cjne a, #0x0a, play_11_S
11BC            986       
11BC            987       ; ***play audio***
11BC            987       ;cjne sound_flag, #0, $
11BC 12182D     987       lcall Wait_Half_Second
11BF C28E       987       clr TR1 ; Stop Timer 1 ISR from playing previous request
11C1 D2A5       987       setb FLASH_CE
11C3            987       ;setb sound_flag ; sound starts
11C3 C2A6       987       clr SPEAKER ; Turn off speaker
11C5 C2A5       987       clr FLASH_CE ; Enable SPI Flash
11C7 7403       987       mov a, #READ_BYTES
11C9 12040D     987       lcall Send_SPI
11CC            987       ; Set the initial position in memory where to start playing
11CC            987       
11CC 7402       987       mov a, #0x02 ; change initial position
11CE 12040D     987       lcall Send_SPI
11D1 7484       987       mov a, #0x84 ; next memory position
11D3 12040D     987       lcall Send_SPI
11D6 7488       987       mov a, #0x88 ; next memory position
11D8 12040D     987       lcall Send_SPI
11DB 7402       987       mov a, #0x02 ; request first byte to send to DAC
11DD 12040D     987       lcall Send_SPI
11E0            987       
11E0            987       ; How many bytes to play?
11E0 754E00     987       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
11E3 754D17     987       mov w+1, #0x17 ; Load the middle byte of the number of bytes to play
11E6 754C70     987       mov w+0, #0x70 ; Load the low byte of the number of bytes to play
11E9            987       
11E9            987       
11E9 D2A6       987       setb SPEAKER ;Turn on speaker
11EB D28E       987       setb TR1 ;Start playback by enabling Timer1
11ED            987       ;clr sound_flag ; sound ends
11ED 0213D9     988       ljmp state_8_hop2_S
11F0            989   
11F0            990       play_11_S:
11F0 B40B34     991           cjne a, #0x0b, play_12_S
11F3            992       ; ***play audio***
11F3            992       ;cjne sound_flag, #0, $
11F3 12182D     992       lcall Wait_Half_Second
11F6 C28E       992       clr TR1 ; Stop Timer 1 ISR from playing previous request
11F8 D2A5       992       setb FLASH_CE
11FA            992       ;setb sound_flag ; sound starts
11FA C2A6       992       clr SPEAKER ; Turn off speaker
11FC C2A5       992       clr FLASH_CE ; Enable SPI Flash
11FE 7403       992       mov a, #READ_BYTES
1200 12040D     992       lcall Send_SPI
1203            992       ; Set the initial position in memory where to start playing
1203            992       
1203 7402       992       mov a, #0x02 ; change initial position
1205 12040D     992       lcall Send_SPI
1208 749B       992       mov a, #0x9b ; next memory position
120A 12040D     992       lcall Send_SPI
120D 74F8       992       mov a, #0xf8 ; next memory position
120F 12040D     992       lcall Send_SPI
1212 7402       992       mov a, #0x02 ; request first byte to send to DAC
1214 12040D     992       lcall Send_SPI
1217            992       
1217            992       ; How many bytes to play?
1217 754E00     992       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
121A 754D1F     992       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
121D 754C40     992       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
1220            992       
1220            992       
1220 D2A6       992       setb SPEAKER ;Turn on speaker
1222 D28E       992       setb TR1 ;Start playback by enabling Timer1
1224            992       ;clr sound_flag ; sound ends
1224 0213D9     993           ljmp state_8_hop2_S
1227            994   
1227            995       play_12_S:
1227 B40C34     996           cjne a, #0x0c, play_13_S
122A            997       ; ***play audio***
122A            997       ;cjne sound_flag, #0, $
122A 12182D     997       lcall Wait_Half_Second
122D C28E       997       clr TR1 ; Stop Timer 1 ISR from playing previous request
122F D2A5       997       setb FLASH_CE
1231            997       ;setb sound_flag ; sound starts
1231 C2A6       997       clr SPEAKER ; Turn off speaker
1233 C2A5       997       clr FLASH_CE ; Enable SPI Flash
1235 7403       997       mov a, #READ_BYTES
1237 12040D     997       lcall Send_SPI
123A            997       ; Set the initial position in memory where to start playing
123A            997       
123A 7402       997       mov a, #0x02 ; change initial position
123C 12040D     997       lcall Send_SPI
123F 74B7       997       mov a, #0xb7 ; next memory position
1241 12040D     997       lcall Send_SPI
1244 7450       997       mov a, #0x50 ; next memory position
1246 12040D     997       lcall Send_SPI
1249 7402       997       mov a, #0x02 ; request first byte to send to DAC
124B 12040D     997       lcall Send_SPI
124E            997       
124E            997       ; How many bytes to play?
124E 754E00     997       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1251 754D1F     997       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
1254 754C40     997       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
1257            997       
1257            997       
1257 D2A6       997       setb SPEAKER ;Turn on speaker
1259 D28E       997       setb TR1 ;Start playback by enabling Timer1
125B            997       ;clr sound_flag ; sound ends
125B 0213D9     998           ljmp state_8_hop2_S
125E            999   
125E           1000       play_13_S:
125E B40D34    1001           cjne a, #0x0d, play_14_S
1261           1002       ; ***play audio***
1261           1002       ;cjne sound_flag, #0, $
1261 12182D    1002       lcall Wait_Half_Second
1264 C28E      1002       clr TR1 ; Stop Timer 1 ISR from playing previous request
1266 D2A5      1002       setb FLASH_CE
1268           1002       ;setb sound_flag ; sound starts
1268 C2A6      1002       clr SPEAKER ; Turn off speaker
126A C2A5      1002       clr FLASH_CE ; Enable SPI Flash
126C 7403      1002       mov a, #READ_BYTES
126E 12040D    1002       lcall Send_SPI
1271           1002       ; Set the initial position in memory where to start playing
1271           1002       
1271 7402      1002       mov a, #0x02 ; change initial position
1273 12040D    1002       lcall Send_SPI
1276 74CE      1002       mov a, #0xce ; next memory position
1278 12040D    1002       lcall Send_SPI
127B 74C0      1002       mov a, #0xc0 ; next memory position
127D 12040D    1002       lcall Send_SPI
1280 7402      1002       mov a, #0x02 ; request first byte to send to DAC
1282 12040D    1002       lcall Send_SPI
1285           1002       
1285           1002       ; How many bytes to play?
1285 754E00    1002       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1288 754D2E    1002       mov w+1, #0x2e ; Load the middle byte of the number of bytes to play
128B 754CE0    1002       mov w+0, #0xe0 ; Load the low byte of the number of bytes to play
128E           1002       
128E           1002       
128E D2A6      1002       setb SPEAKER ;Turn on speaker
1290 D28E      1002       setb TR1 ;Start playback by enabling Timer1
1292           1002       ;clr sound_flag ; sound ends
1292 0213D9    1003           ljmp state_8_hop2_S
1295           1004   
1295           1005       play_14_S:
1295 B40E34    1006           cjne a, #0x0e, play_15_S
1298           1007       ; ***play audio***
1298           1007       ;cjne sound_flag, #0, $
1298 12182D    1007       lcall Wait_Half_Second
129B C28E      1007       clr TR1 ; Stop Timer 1 ISR from playing previous request
129D D2A5      1007       setb FLASH_CE
129F           1007       ;setb sound_flag ; sound starts
129F C2A6      1007       clr SPEAKER ; Turn off speaker
12A1 C2A5      1007       clr FLASH_CE ; Enable SPI Flash
12A3 7403      1007       mov a, #READ_BYTES
12A5 12040D    1007       lcall Send_SPI
12A8           1007       ; Set the initial position in memory where to start playing
12A8           1007       
12A8 7402      1007       mov a, #0x02 ; change initial position
12AA 12040D    1007       lcall Send_SPI
12AD 74F5      1007       mov a, #0xf5 ; next memory position
12AF 12040D    1007       lcall Send_SPI
12B2 74D0      1007       mov a, #0xd0 ; next memory position
12B4 12040D    1007       lcall Send_SPI
12B7 7402      1007       mov a, #0x02 ; request first byte to send to DAC
12B9 12040D    1007       lcall Send_SPI
12BC           1007       
12BC           1007       ; How many bytes to play?
12BC 754E00    1007       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
12BF 754D36    1007       mov w+1, #0x36 ; Load the middle byte of the number of bytes to play
12C2 754CB0    1007       mov w+0, #0xb0 ; Load the low byte of the number of bytes to play
12C5           1007       
12C5           1007       
12C5 D2A6      1007       setb SPEAKER ;Turn on speaker
12C7 D28E      1007       setb TR1 ;Start playback by enabling Timer1
12C9           1007       ;clr sound_flag ; sound ends
12C9 0213D9    1008           ljmp state_8_hop2_S
12CC           1009   
12CC           1010       play_15_S:
12CC B40F34    1011           cjne a, #0x0f, play_16_S
12CF           1012       ; ***play audio***
12CF           1012       ;cjne sound_flag, #0, $
12CF 12182D    1012       lcall Wait_Half_Second
12D2 C28E      1012       clr TR1 ; Stop Timer 1 ISR from playing previous request
12D4 D2A5      1012       setb FLASH_CE
12D6           1012       ;setb sound_flag ; sound starts
12D6 C2A6      1012       clr SPEAKER ; Turn off speaker
12D8 C2A5      1012       clr FLASH_CE ; Enable SPI Flash
12DA 7403      1012       mov a, #READ_BYTES
12DC 12040D    1012       lcall Send_SPI
12DF           1012       ; Set the initial position in memory where to start playing
12DF           1012       
12DF 7403      1012       mov a, #0x03 ; change initial position
12E1 12040D    1012       lcall Send_SPI
12E4 7428      1012       mov a, #0x28 ; next memory position
12E6 12040D    1012       lcall Send_SPI
12E9 7498      1012       mov a, #0x98 ; next memory position
12EB 12040D    1012       lcall Send_SPI
12EE 7403      1012       mov a, #0x03 ; request first byte to send to DAC
12F0 12040D    1012       lcall Send_SPI
12F3           1012       
12F3           1012       ; How many bytes to play?
12F3 754E00    1012       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
12F6 754D23    1012       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
12F9 754C28    1012       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
12FC           1012       
12FC           1012       
12FC D2A6      1012       setb SPEAKER ;Turn on speaker
12FE D28E      1012       setb TR1 ;Start playback by enabling Timer1
1300           1012       ;clr sound_flag ; sound ends
1300 0213D9    1013           ljmp state_8_hop2_S
1303           1014   
1303           1015       play_16_S:
1303 B41034    1016           cjne a, #0x10, play_17_S
1306           1017       ; ***play audio***
1306           1017       ;cjne sound_flag, #0, $
1306 12182D    1017       lcall Wait_Half_Second
1309 C28E      1017       clr TR1 ; Stop Timer 1 ISR from playing previous request
130B D2A5      1017       setb FLASH_CE
130D           1017       ;setb sound_flag ; sound starts
130D C2A6      1017       clr SPEAKER ; Turn off speaker
130F C2A5      1017       clr FLASH_CE ; Enable SPI Flash
1311 7403      1017       mov a, #READ_BYTES
1313 12040D    1017       lcall Send_SPI
1316           1017       ; Set the initial position in memory where to start playing
1316           1017       
1316 7403      1017       mov a, #0x03 ; change initial position
1318 12040D    1017       lcall Send_SPI
131B 7447      1017       mov a, #0x47 ; next memory position
131D 12040D    1017       lcall Send_SPI
1320 74D8      1017       mov a, #0xd8 ; next memory position
1322 12040D    1017       lcall Send_SPI
1325 7403      1017       mov a, #0x03 ; request first byte to send to DAC
1327 12040D    1017       lcall Send_SPI
132A           1017       
132A           1017       ; How many bytes to play?
132A 754E00    1017       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
132D 754D32    1017       mov w+1, #0x32 ; Load the middle byte of the number of bytes to play
1330 754CC8    1017       mov w+0, #0xc8 ; Load the low byte of the number of bytes to play
1333           1017       
1333           1017       
1333 D2A6      1017       setb SPEAKER ;Turn on speaker
1335 D28E      1017       setb TR1 ;Start playback by enabling Timer1
1337           1017       ;clr sound_flag ; sound ends
1337 0213D9    1018           ljmp state_8_hop2_S
133A           1019   
133A           1020       play_17_S:
133A B41134    1021           cjne a, #0x11, play_18_S
133D           1022       ; ***play audio***
133D           1022       ;cjne sound_flag, #0, $
133D 12182D    1022       lcall Wait_Half_Second
1340 C28E      1022       clr TR1 ; Stop Timer 1 ISR from playing previous request
1342 D2A5      1022       setb FLASH_CE
1344           1022       ;setb sound_flag ; sound starts
1344 C2A6      1022       clr SPEAKER ; Turn off speaker
1346 C2A5      1022       clr FLASH_CE ; Enable SPI Flash
1348 7403      1022       mov a, #READ_BYTES
134A 12040D    1022       lcall Send_SPI
134D           1022       ; Set the initial position in memory where to start playing
134D           1022       
134D 7403      1022       mov a, #0x03 ; change initial position
134F 12040D    1022       lcall Send_SPI
1352 7476      1022       mov a, #0x76 ; next memory position
1354 12040D    1022       lcall Send_SPI
1357 74B8      1022       mov a, #0xb8 ; next memory position
1359 12040D    1022       lcall Send_SPI
135C 7403      1022       mov a, #0x03 ; request first byte to send to DAC
135E 12040D    1022       lcall Send_SPI
1361           1022       
1361           1022       ; How many bytes to play?
1361 754E00    1022       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1364 754D2E    1022       mov w+1, #0x2e ; Load the middle byte of the number of bytes to play
1367 754C20    1022       mov w+0, #0x20 ; Load the low byte of the number of bytes to play
136A           1022       
136A           1022       
136A D2A6      1022       setb SPEAKER ;Turn on speaker
136C D28E      1022       setb TR1 ;Start playback by enabling Timer1
136E           1022       ;clr sound_flag ; sound ends
136E 0213D9    1023           ljmp state_8_hop2_S
1371           1024   
1371           1025       play_18_S:
1371 B41234    1026           cjne a, #0x12, play_19_S
1374           1027       ; ***play audio***
1374           1027       ;cjne sound_flag, #0, $
1374 12182D    1027       lcall Wait_Half_Second
1377 C28E      1027       clr TR1 ; Stop Timer 1 ISR from playing previous request
1379 D2A5      1027       setb FLASH_CE
137B           1027       ;setb sound_flag ; sound starts
137B C2A6      1027       clr SPEAKER ; Turn off speaker
137D C2A5      1027       clr FLASH_CE ; Enable SPI Flash
137F 7403      1027       mov a, #READ_BYTES
1381 12040D    1027       lcall Send_SPI
1384           1027       ; Set the initial position in memory where to start playing
1384           1027       
1384 7403      1027       mov a, #0x03 ; change initial position
1386 12040D    1027       lcall Send_SPI
1389 74A1      1027       mov a, #0xa1 ; next memory position
138B 12040D    1027       lcall Send_SPI
138E 74B0      1027       mov a, #0xb0 ; next memory position
1390 12040D    1027       lcall Send_SPI
1393 7403      1027       mov a, #0x03 ; request first byte to send to DAC
1395 12040D    1027       lcall Send_SPI
1398           1027       
1398           1027       ; How many bytes to play?
1398 754E00    1027       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
139B 754D27    1027       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
139E 754C10    1027       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
13A1           1027       
13A1           1027       
13A1 D2A6      1027       setb SPEAKER ;Turn on speaker
13A3 D28E      1027       setb TR1 ;Start playback by enabling Timer1
13A5           1027       ;clr sound_flag ; sound ends
13A5 0213D9    1028           ljmp state_8_hop2_S
13A8           1029   
13A8           1030       play_19_S:
13A8           1031       ; ***play audio***
13A8           1031       ;cjne sound_flag, #0, $
13A8 12182D    1031       lcall Wait_Half_Second
13AB C28E      1031       clr TR1 ; Stop Timer 1 ISR from playing previous request
13AD D2A5      1031       setb FLASH_CE
13AF           1031       ;setb sound_flag ; sound starts
13AF C2A6      1031       clr SPEAKER ; Turn off speaker
13B1 C2A5      1031       clr FLASH_CE ; Enable SPI Flash
13B3 7403      1031       mov a, #READ_BYTES
13B5 12040D    1031       lcall Send_SPI
13B8           1031       ; Set the initial position in memory where to start playing
13B8           1031       
13B8 7403      1031       mov a, #0x03 ; change initial position
13BA 12040D    1031       lcall Send_SPI
13BD 74C8      1031       mov a, #0xc8 ; next memory position
13BF 12040D    1031       lcall Send_SPI
13C2 74C0      1031       mov a, #0xc0 ; next memory position
13C4 12040D    1031       lcall Send_SPI
13C7 7403      1031       mov a, #0x03 ; request first byte to send to DAC
13C9 12040D    1031       lcall Send_SPI
13CC           1031       
13CC           1031       ; How many bytes to play?
13CC 754E00    1031       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
13CF 754D27    1031       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
13D2 754C10    1031       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
13D5           1031       
13D5           1031       
13D5 D2A6      1031       setb SPEAKER ;Turn on speaker
13D7 D28E      1031       setb TR1 ;Start playback by enabling Timer1
13D9           1031       ;clr sound_flag ; sound ends
13D9           1032   
13D9           1033       state_8_hop2_S:
13D9           1034       ; go to state_8_sound
13D9 0213DC    1035           ljmp state_8_sound_S
13DC           1036   
13DC           1037   state_8_sound_S:
13DC           1038   ; go to state_0_sound
13DC 020CB6    1039       ljmp Sound_ret_S
13DF           1040   
13DF           1041   
13DF           1042   
13DF           1043   
13DF           1044   INI_PLAYBACK_TEMP:
13DF           1045       ; ****INITIALIZATION****
13DF           1046       ; Configure SPI pins and turn off speaker
13DF           1047            ;anl P2M0, #0b_1100_1110
13DF 43CE90    1048       orl P2M0, #0b_1001_0000
13E2           1049       ;orl P2M0, #0b_0011_0001
13E2           1050            ;orl P2M1, #0b_0011_0001
13E2 43CF90    1051       orl P2M1, #0b_1001_0000
13E5 D2A1      1052            setb MY_MISO_SOUND  ; Configured as input
13E7 D2A5      1053            setb FLASH_CE ; CS=1 for SPI flash memory
13E9 C2A0      1054            clr MY_SCLK_SOUND   ; Rest state of SCLK=0
13EB C2A6      1055            clr SPEAKER   ; Turn off speaker.
13ED           1056            
13ED           1057            ; Configure timer 1
13ED 53890F    1058            anl     TMOD, #0x0F ; Clear the bits of timer 1 in TMOD
13F0 438910    1059            orl     TMOD, #0x10 ; Set timer 1 in 16-bit timer mode.  Don't change the bits of timer 0
13F3 758DFC    1060            mov TH1, #high(TIMER1_RELOAD)
13F6 758B8C    1061            mov TL1, #low(TIMER1_RELOAD)
13F9           1062            ; Set autoreload value
13F9 75F5FC    1063            mov RH1, #high(TIMER1_RELOAD)
13FC 75F38C    1064            mov RL1, #low(TIMER1_RELOAD)
13FF           1065   
13FF           1066            ;Enable the timer and interrupts
13FF D2AB      1067       setb ET1  ; Enable timer 1 interrupt
1401 D28E      1068            setb TR1 ; Timer 1 is only enabled to play stored sound
1403           1069   
1403           1070            ; Configure the DAC.  The DAC output we are using is P2.3, but P2.2 is also reserved.
1403 75A5A0    1071            mov DADI, #0b_1010_0000 ; ACON=1
1406 75A43A    1072            mov DADC, #0b_0011_1010 ; Enabled, DAC mode, Left adjusted, CLK/4
1409 75AD80    1073            mov DADH, #0x80 ; Middle of scale
140C 75AC00    1074            mov DADL, #0
140F 43A440    1075            orl DADC, #0b_0100_0000 ; Start DAC by GO/BSY=1
1412           1076       check_DAC_init:
1412 E5A4      1077            mov a, DADC
1414 20E6FB    1078            jb acc.6, check_DAC_init ; Wait for DAC to finish
1417           1079            
1417 22        1080   ret
1418           1081   
1418           1082       
1418           1083   ;-------------------------------------------------------------------------------------------------------------------------------
1418           1084   ;***LCD FXNS
1418           1085   
               1086   Display_lower_BCD mac
               1087       push ar0
               1088       mov r0, %0
               1089       lcall ?Display_lower_BCD
               1090       pop ar0
               1091   endmac
1418           1092   
1418           1093   ?Display_lower_BCD:
1418 C0E0      1094       push acc
141A           1095       ; write least significant digit
141A E8        1096       mov a, r0
141B 540F      1097       anl a, #0fh
141D 4430      1098       orl a, #30h
141F 12007E    1099       lcall ?WriteData
1422 D0E0      1100       pop acc
1424 22        1101   ret
1425           1102   
1425           1103   
1425           1104   SendToLCD:
1425 75F064    1105       mov b, #100
1428 84        1106       div ab
1429 4430      1107       orl a, #0x30h ; Convert hundreds to ASCII
142B 12007E    1108       lcall ?WriteData ; Send to LCD
142E E5F0      1109       mov a, b    ; Remainder is in register b
1430 75F00A    1110       mov b, #10
1433 84        1111       div ab
1434 4430      1112       orl a, #0x30h ; Convert tens to ASCII
1436 12007E    1113       lcall ?WriteData; Send to LCD
1439 E5F0      1114       mov a, b
143B 4430      1115       orl a, #0x30h ; Convert units to ASCII
143D 12007E    1116       lcall ?WriteData; Send to LCD
1440 22        1117   ret
1441           1118   
1441           1119   Initialize_State_Display:
1441           1120   
1441           1121       ;***clear the screen and set new display***
1441 7401      1122            mov a, #0x01
1443 120083    1122            lcall ?WriteCommand
1446 C002      1123            push AR2
1448 7A02      1123            mov R2, #2
144A 120039    1123            lcall ?Wait_Milli_Seconds
144D D002      1123            pop AR2
144F           1124       
144F C0E0      1125            push acc
1451 7401      1125            mov a, #1
1453 14        1125            dec a
1454 1200BF    1125            lcall ?Set_Cursor_1 ; Select column and row
1457 D0E0      1125            pop acc
1459 C083      1126            push dph
145B C082      1126            push dpl
145D C0E0      1126            push acc
145F 90037D    1126            mov dptr, #time
1462 1200B2    1126            lcall ?Send_Constant_String
1465 D0E0      1126            pop acc
1467 D082      1126            pop dpl
1469 D083      1126            pop dph
146B           1127            
146B C0E0      1128            push acc
146D 7406      1128            mov a, #6
146F 14        1128            dec a
1470 1200BF    1128            lcall ?Set_Cursor_1 ; Select column and row
1473 D0E0      1128            pop acc
1475 C083      1129            push dph
1477 C082      1129            push dpl
1479 C0E0      1129            push acc
147B 900382    1129            mov dptr, #colon
147E 1200B2    1129            lcall ?Send_Constant_String
1481 D0E0      1129            pop acc
1483 D082      1129            pop dpl
1485 D083      1129            pop dph
1487           1130      
1487 C0E0      1131            push acc
1489 740A      1131            mov a, #10
148B 14        1131            dec a
148C 1200BF    1131            lcall ?Set_Cursor_1 ; Select column and row
148F D0E0      1131            pop acc
1491 C083      1132            push dph
1493 C082      1132            push dpl
1495 C0E0      1132            push acc
1497 900384    1132            mov dptr, #temp
149A 1200B2    1132            lcall ?Send_Constant_String
149D D0E0      1132            pop acc
149F D082      1132            pop dpl
14A1 D083      1132            pop dph
14A3           1133       
14A3 C0E0      1134            push acc
14A5 7401      1134            mov a, #1
14A7 14        1134            dec a
14A8 1200BD    1134            lcall ?Set_Cursor_2 ; Select column and row
14AB D0E0      1134            pop acc
14AD C083      1135            push dph
14AF C082      1135            push dpl
14B1 C0E0      1135            push acc
14B3 900376    1135            mov dptr, #state
14B6 1200B2    1135            lcall ?Send_Constant_String
14B9 D0E0      1135            pop acc
14BB D082      1135            pop dpl
14BD D083      1135            pop dph
14BF 22        1136   ret
14C0           1137   
14C0           1138   Update_Display:
14C0 C0E0      1139            push acc
14C2 7405      1139            mov a, #5
14C4 14        1139            dec a
14C5 1200BF    1139            lcall ?Set_Cursor_1 ; Select column and row
14C8 D0E0      1139            pop acc
14CA C000      1140       push ar0
14CC A839      1140       mov r0, Run_time_minutes
14CE 121418    1140       lcall ?Display_lower_BCD
14D1 D000      1140       pop ar0
14D3 C0E0      1141            push acc
14D5 7407      1141            mov a, #7
14D7 14        1141            dec a
14D8 1200BF    1141            lcall ?Set_Cursor_1 ; Select column and row
14DB D0E0      1141            pop acc
14DD C000      1142            push ar0
14DF A838      1142            mov r0, Run_time_seconds
14E1 1200C4    1142            lcall ?Display_BCD
14E4 D000      1142            pop ar0
14E6           1143       ;Set_Cursor(1,14)
14E6           1144       ;mov a, Temp_oven
14E6           1145       ;SendToLCD(Temp_oven)
14E6 22        1146   ret
14E7           1147   
14E7           1148   State0_display:
14E7 C0E0      1149            push acc
14E9 7401      1149            mov a, #1
14EB 14        1149            dec a
14EC 1200BF    1149            lcall ?Set_Cursor_1 ; Select column and row
14EF D0E0      1149            pop acc
14F1 C083      1150            push dph
14F3 C082      1150            push dpl
14F5 C0E0      1150            push acc
14F7 900360    1150            mov dptr, #STemp
14FA 1200B2    1150            lcall ?Send_Constant_String
14FD D0E0      1150            pop acc
14FF D082      1150            pop dpl
1501 D083      1150            pop dph
1503 C0E0      1151            push acc
1505 7406      1151            mov a, #6
1507 14        1151            dec a
1508 1200BF    1151            lcall ?Set_Cursor_1 ; Select column and row
150B D0E0      1151            pop acc
150D E534      1152       mov a, Temp_soak
150F 121425    1153       lcall SendToLCD
1512           1154       
1512 C0E0      1155            push acc
1514 740A      1155            mov a, #10
1516 14        1155            dec a
1517 1200BF    1155            lcall ?Set_Cursor_1 ; Select column and row
151A D0E0      1155            pop acc
151C C083      1156            push dph
151E C082      1156            push dpl
1520 C0E0      1156            push acc
1522 900366    1156            mov dptr, #STime
1525 1200B2    1156            lcall ?Send_Constant_String
1528 D0E0      1156            pop acc
152A D082      1156            pop dpl
152C D083      1156            pop dph
152E C0E0      1157            push acc
1530 740E      1157            mov a, #14
1532 14        1157            dec a
1533 1200BF    1157            lcall ?Set_Cursor_1 ; Select column and row
1536 D0E0      1157            pop acc
1538 E535      1158       mov a, Time_soak
153A 121425    1159            lcall SendToLCD
153D           1160       ;Display_BCD(Time_soak)
153D           1161   
153D           1162       ;Displays Reflow Temp and Time
153D C0E0      1163            push acc
153F 7401      1163            mov a, #1
1541 14        1163            dec a
1542 1200BD    1163            lcall ?Set_Cursor_2 ; Select column and row
1545 D0E0      1163            pop acc
1547 C083      1164            push dph
1549 C082      1164            push dpl
154B C0E0      1164            push acc
154D 90036B    1164            mov dptr, #RTemp
1550 1200B2    1164            lcall ?Send_Constant_String
1553 D0E0      1164            pop acc
1555 D082      1164            pop dpl
1557 D083      1164            pop dph
1559 C0E0      1165            push acc
155B 7406      1165            mov a, #6
155D 14        1165            dec a
155E 1200BD    1165            lcall ?Set_Cursor_2 ; Select column and row
1561 D0E0      1165            pop acc
1563 E536      1166       mov a, Temp_refl
1565 121425    1167       lcall SendToLCD
1568           1168       
1568 C0E0      1169            push acc
156A 740A      1169            mov a, #10
156C 14        1169            dec a
156D 1200BD    1169            lcall ?Set_Cursor_2 ; Select column and row
1570 D0E0      1169            pop acc
1572 C083      1170            push dph
1574 C082      1170            push dpl
1576 C0E0      1170            push acc
1578 900371    1170            mov dptr, #RTime
157B 1200B2    1170            lcall ?Send_Constant_String
157E D0E0      1170            pop acc
1580 D082      1170            pop dpl
1582 D083      1170            pop dph
1584 C0E0      1171            push acc
1586 740E      1171            mov a, #14
1588 14        1171            dec a
1589 1200BD    1171            lcall ?Set_Cursor_2 ; Select column and row
158C D0E0      1171            pop acc
158E E537      1172       mov a, Time_refl
1590 121425    1173            lcall SendToLCD
1593 22        1174   ret
1594           1175   
1594           1176   Display_3_digit_BCD:
1594 C0E0      1177            push acc
1596 740E      1177            mov a, #14
1598 14        1177            dec a
1599 1200BF    1177            lcall ?Set_Cursor_1 ; Select column and row
159C D0E0      1177            pop acc
159E C000      1178       push ar0
15A0 A846      1178       mov r0, bcd+1
15A2 121418    1178       lcall ?Display_lower_BCD
15A5 D000      1178       pop ar0
15A7 C000      1179            push ar0
15A9 A845      1179            mov r0, bcd+0
15AB 1200C4    1179            lcall ?Display_BCD
15AE D000      1179            pop ar0
15B0 22        1180   ret
15B1           1181   
15B1           1182   Animation:
15B1 740F      1183            mov a, #0x0f
15B3 120083    1183            lcall ?WriteCommand ;display cursor
15B6           1184   
15B6           1185       ;name ; Move cursor to line 1 column 1
15B6 7480      1186            mov a, #0x80
15B8 120083    1186            lcall ?WriteCommand
15BB 7457      1187            mov a, #'W'
15BD 12007E    1187            lcall ?WriteData
15C0 C002      1188            push AR2
15C2 7AFA      1188            mov R2, #250
15C4 120039    1188            lcall ?Wait_Milli_Seconds
15C7 D002      1188            pop AR2
15C9 7465      1189            mov a, #'e'
15CB 12007E    1189            lcall ?WriteData
15CE C002      1190            push AR2
15D0 7AFA      1190            mov R2, #250
15D2 120039    1190            lcall ?Wait_Milli_Seconds
15D5 D002      1190            pop AR2
15D7 746C      1191            mov a, #'l'
15D9 12007E    1191            lcall ?WriteData
15DC C002      1192            push AR2
15DE 7AFA      1192            mov R2, #250
15E0 120039    1192            lcall ?Wait_Milli_Seconds
15E3 D002      1192            pop AR2
15E5 7463      1193            mov a, #'c'
15E7 12007E    1193            lcall ?WriteData
15EA C002      1194            push AR2
15EC 7AFA      1194            mov R2, #250
15EE 120039    1194            lcall ?Wait_Milli_Seconds
15F1 D002      1194            pop AR2
15F3 746F      1195            mov a, #'o'
15F5 12007E    1195            lcall ?WriteData
15F8 C002      1196            push AR2
15FA 7AFA      1196            mov R2, #250
15FC 120039    1196            lcall ?Wait_Milli_Seconds
15FF D002      1196            pop AR2
1601 746D      1197            mov a, #'m'
1603 12007E    1197            lcall ?WriteData
1606 C002      1198            push AR2
1608 7AFA      1198            mov R2, #250
160A 120039    1198            lcall ?Wait_Milli_Seconds
160D D002      1198            pop AR2
160F 7465      1199            mov a, #'e'
1611 12007E    1199            lcall ?WriteData
1614 C002      1200            push AR2
1616 7AFA      1200            mov R2, #250
1618 120039    1200            lcall ?Wait_Milli_Seconds
161B D002      1200            pop AR2
161D 7421      1201            mov a, #'!'
161F 12007E    1201            lcall ?WriteData
1622 C002      1202            push AR2
1624 7AFA      1202            mov R2, #250
1626 120039    1202            lcall ?Wait_Milli_Seconds
1629 D002      1202            pop AR2
162B 7420      1203            mov a, #' '
162D 12007E    1203            lcall ?WriteData
1630 C002      1204            push AR2
1632 7AFA      1204            mov R2, #250
1634 120039    1204            lcall ?Wait_Milli_Seconds
1637 D002      1204            pop AR2
1639 7460      1205            mov a, #96
163B 12007E    1205            lcall ?WriteData
163E C002      1206            push AR2
1640 7AFA      1206            mov R2, #250
1642 120039    1206            lcall ?Wait_Milli_Seconds
1645 D002      1206            pop AR2
1647 74EF      1207            mov a, #239
1649 12007E    1207            lcall ?WriteData
164C C002      1208            push AR2
164E 7AFA      1208            mov R2, #250
1650 120039    1208            lcall ?Wait_Milli_Seconds
1653 D002      1208            pop AR2
1655 742F      1209            mov a, #47
1657 12007E    1209            lcall ?WriteData
165A 121808    1210       lcall Wait_One_Second
165D 121808    1211       lcall Wait_One_Second
1660 740C      1212            mov a, #0x0c
1662 120083    1212            lcall ?WriteCommand ;clear cursor
1665 22        1213   ret
1666           1214   
1666           1215   ;The following functions store and restore the values--------------------------------------------------------------------------
               1216   loadbyte mac
               1217       mov a, %0
               1218       movx @dptr, a
               1219       inc dptr
               1220   endmac
1666           1221   
1666           1222   Save_Configuration1:
1666 C0A8      1223       push IE ; Save the current state of bit EA in the stack
1668 C2AF      1224       clr EA ; Disable interrupts
166A 75D108    1225       mov FCON, #0x08 ; Page Buffer Mapping Enabled (FPS = 1)
166D 907F80    1226       mov dptr, #0x7f80 ; Last page of flash memory
1670           1227       ; Save variables
1670 E534      1228       mov a, temp_soak
1672 F0        1228       movx @dptr, a
1673 A3        1228       inc dptr ; @0x7f80
1674 E535      1229       mov a, time_soak
1676 F0        1229       movx @dptr, a
1677 A3        1229       inc dptr ; @0x7f81
1678 E536      1230       mov a, temp_refl
167A F0        1230       movx @dptr, a
167B A3        1230       inc dptr ; @0x7f82
167C E537      1231       mov a, time_refl
167E F0        1231       movx @dptr, a
167F A3        1231       inc dptr ; @0x7f83
1680 7455      1232       mov a, #0x55
1682 F0        1232       movx @dptr, a
1683 A3        1232       inc dptr ; First key value @0x7f84
1684 74AA      1233       mov a, #0xAA
1686 F0        1233       movx @dptr, a
1687 A3        1233       inc dptr ; Second key value @0x7f85
1688 75D100    1234       mov FCON, #0x00 ; Page Buffer Mapping Disabled (FPS = 0) 
168B 43D240    1235       orl EECON, #0b01000000 ; Enable auto-erase on next write sequence  
168E 75D150    1236       mov FCON, #0x50 ; Write trigger first byte
1691 75D1A0    1237       mov FCON, #0xA0 ; Write trigger second byte
1694           1238       ; CPU idles until writing of flash completes.
1694 75D100    1239       mov FCON, #0x00 ; Page Buffer Mapping Disabled (FPS = 0)
1697 53D2BF    1240       anl EECON, #0b10111111 ; Disable auto-erase
169A D0A8      1241       pop IE ; Restore the state of bit EA from the stack
169C 22        1242   ret
169D           1243   
169D           1244   Save_Configuration2:
169D C0A8      1245       push IE ; Save the current state of bit EA in the stack
169F C2AF      1246       clr EA ; Disable interrupts
16A1 75D108    1247       mov FCON, #0x08 ; Page Buffer Mapping Enabled (FPS = 1)
16A4 907F86    1248       mov dptr, #0x7f86
16A7           1249       ; Save variables
16A7 E534      1250       mov a, temp_soak
16A9 F0        1250       movx @dptr, a
16AA A3        1250       inc dptr ; @0x7f86
16AB E535      1251       mov a, time_soak
16AD F0        1251       movx @dptr, a
16AE A3        1251       inc dptr ; @0x7f87
16AF E536      1252       mov a, temp_refl
16B1 F0        1252       movx @dptr, a
16B2 A3        1252       inc dptr ; @0x7f88
16B3 E537      1253       mov a, time_refl
16B5 F0        1253       movx @dptr, a
16B6 A3        1253       inc dptr ; @0x7f89
16B7 7444      1254       mov a, #0x44
16B9 F0        1254       movx @dptr, a
16BA A3        1254       inc dptr ; First key value @0x7f8a
16BB 74BB      1255       mov a, #0xBB
16BD F0        1255       movx @dptr, a
16BE A3        1255       inc dptr ; Second key value @0x7f8b
16BF 75D100    1256       mov FCON, #0x00 ; Page Buffer Mapping Disabled (FPS = 0) 
16C2 43D240    1257       orl EECON, #0b01000000 ; Enable auto-erase on next write sequence  
16C5 75D150    1258       mov FCON, #0x50 ; Write trigger first byte
16C8 75D1A0    1259       mov FCON, #0xA0 ; Write trigger second byte
16CB           1260       ; CPU idles until writing of flash completes.
16CB 75D100    1261       mov FCON, #0x00 ; Page Buffer Mapping Disabled (FPS = 0)
16CE 53D2BF    1262       anl EECON, #0b10111111 ; Disable auto-erase
16D1 D0A8      1263       pop IE ; Restore the state of bit EA from the stack
16D3 22        1264   ret
16D4           1265   
               1266   getbyte mac
               1267       clr a
               1268       movc a, @a+dptr
               1269       mov %0, a
               1270       inc dptr
               1271   endmac
16D4           1272   
16D4           1273   Load_Configuration1:
16D4 907F84    1274       mov dptr, #0x7f84 ; First key value location.
16D7 E4        1275       clr a
16D8 93        1275       movc a, @a+dptr
16D9 F8        1275       mov R0, a
16DA A3        1275       inc dptr ; 0x7f84 should contain 0x55
16DB B85548    1276       cjne R0, #0x55, Load_Defaults1
16DE E4        1277       clr a
16DF 93        1277       movc a, @a+dptr
16E0 F8        1277       mov R0, a
16E1 A3        1277       inc dptr ; 0x7f85 should contain 0xAA
16E2 B8AA41    1278       cjne R0, #0xAA, Load_Defaults1
16E5           1279   ; Keys are good.  Get stored values.
16E5 907F80    1280       mov dptr, #0x7f80
16E8 E4        1281       clr a
16E9 93        1281       movc a, @a+dptr
16EA F534      1281       mov Temp_soak, a
16EC A3        1281       inc dptr ; 0x7f80
16ED E4        1282       clr a
16EE 93        1282       movc a, @a+dptr
16EF F535      1282       mov Time_soak, a
16F1 A3        1282       inc dptr ; 0x7f81
16F2 E4        1283       clr a
16F3 93        1283       movc a, @a+dptr
16F4 F536      1283       mov Temp_refl, a
16F6 A3        1283       inc dptr ; 0x7f82
16F7 E4        1284       clr a
16F8 93        1284       movc a, @a+dptr
16F9 F537      1284       mov Time_refl, a
16FB A3        1284       inc dptr ; 0x7f83
16FC 22        1285   ret
16FD           1286   
16FD           1287   Load_Configuration2:
16FD 907F8A    1288       mov dptr, #0x7f8a ; First key value location.
1700 E4        1289       clr a
1701 93        1289       movc a, @a+dptr
1702 F8        1289       mov R0, a
1703 A3        1289       inc dptr ; 0x7f8a should contain 0x44
1704 B8442C    1290       cjne R0, #0x44, Load_Defaults2
1707 E4        1291       clr a
1708 93        1291       movc a, @a+dptr
1709 F8        1291       mov R0, a
170A A3        1291       inc dptr ; 0x7f8b should contain 0xBB
170B B8BB25    1292       cjne R0, #0xBB, Load_Defaults2
170E           1293   ; Keys are good.  Get stored values.
170E 907F86    1294       mov dptr, #0x7f86
1711 E4        1295       clr a
1712 93        1295       movc a, @a+dptr
1713 F534      1295       mov Temp_soak, a
1715 A3        1295       inc dptr ; 0x7f86
1716 E4        1296       clr a
1717 93        1296       movc a, @a+dptr
1718 F535      1296       mov Time_soak, a
171A A3        1296       inc dptr ; 0x7f87
171B E4        1297       clr a
171C 93        1297       movc a, @a+dptr
171D F536      1297       mov Temp_refl, a
171F A3        1297       inc dptr ; 0x7f88
1720 E4        1298       clr a
1721 93        1298       movc a, @a+dptr
1722 F537      1298       mov Time_refl, a
1724 A3        1298       inc dptr ; 0x7f89
1725 22        1299   ret
1726           1300   
1726           1301   Load_Defaults1:
1726 753482    1302       mov Temp_soak, #130 ; Soak Tmp Range is 130-170
1729 75353C    1303       mov Time_soak, #0x3C ; Range 60-90 seconds
172C 7536DC    1304       mov Temp_refl, #220 ; Range 220-240
172F 75371E    1305       mov Time_refl, #0x1E ; Range 30-45 seconds
1732 22        1306       ret
1733           1307   
1733           1308   Load_Defaults2:
1733 753496    1309       mov Temp_soak, #150 ; Soak Tmp Range is 130-170
1736 75354B    1310       mov Time_soak, #75 ; Range 60-90 seconds
1739 7536E6    1311       mov Temp_refl, #230 ; Range 220-240
173C 753723    1312       mov Time_refl, #35 ; Range 30-45 seconds
173F 22        1313       ret 
1740           1314   ;-------------------------------------------------------------------------------------------------------------------------------
1740           1315   ;off state
1740           1316   
1740           1317   OFF_STATE:
1740           1318       ;**CLEAR SCREEN**
1740 7401      1319            mov a, #0x01
1742 120083    1319            lcall ?WriteCommand
1745           1320       ;OFF_STATE1:
1745           1321       
1745 20C5FD    1322       jb POWER_BUTTON, $ ; loop while the button is not pressed
1748 C002      1323            push AR2
174A 7A32      1323            mov R2, #50
174C 120039    1323            lcall ?Wait_Milli_Seconds
174F D002      1323            pop AR2 ; debounce time
1751 20C5EC    1324            jb POWER_BUTTON, OFF_STATE ; it was a bounce, try again
1754 30C5FD    1325            jnb POWER_BUTTON, $ ; loop while the button is pressed
1757 0218F1    1326       ljmp main
175A 22        1327   ret
175B           1328   ;-------------------------------------------------------------------------------------------------------------------------------
175B           1329   
175B           1330   ;***CHECK TEMPERATURE BY READING VOLTAGE AND CONVERTING
175B           1331   Check_Temp:
175B           1332       
175B           1333       ;jnb one_seconds_flag, Check_Temp_done
175B           1334       ;clr one_seconds_flag
175B           1335       
175B C297      1336       clr CE_ADC
175D 7801      1337            mov R0, #00000001B ; Start bit:1
175F 1203F4    1338            lcall DO_SPI_G
1762 7880      1339            mov R0, #10000000B ; Single ended, read channel 0
1764 1203F4    1340            lcall DO_SPI_G
1767 E9        1341            mov a, R1          ; R1 contains bits 8 and 9
1768 5403      1342            anl a, #00000011B  ; We need only the two least significant bits
176A F54B      1343            mov Result+1, a    ; Save result high.
176C 7855      1344            mov R0, #55H ; It doesn't matter what we transmit...
176E 1203F4    1345            lcall DO_SPI_G
1771 894A      1346            mov Result+0, R1     ; R1 contains bits 0 to 7.  Save result low.
1773 D297      1347            setb CE_ADC
1775           1348   
1775 C002      1349            push AR2
1777 7A0A      1349            mov R2, #10
1779 120039    1349            lcall ?Wait_Milli_Seconds
177C D002      1349            pop AR2
177E           1350       ; Copy the 10-bits of the ADC conversion into the 32-bits of 'x'
177E AE4A      1351            mov R6, Result+0
1780 AF4B      1352            mov R7, Result+1
1782 22        1353   ret
1783           1354   
1783           1355       
1783           1356       
1783           1357   ;***CALCULATES THE TEMPERATURE
1783           1358   Average_Temp:
1783 753D00    1359            mov x+0, #low (0 % 0x10000) 
1786 753E00    1359            mov x+1, #high(0 % 0x10000) 
1789 753F00    1359            mov x+2, #low (0 / 0x10000) 
178C 754000    1359            mov x+3, #high(0 / 0x10000) 
178F 7D64      1360       mov R5, #100
1791           1361   Ave_loop:
1791 12175B    1362       lcall Check_Temp
1794 754400    1363       mov y+3, #0
1797 754300    1364       mov y+2, #0
179A 8F42      1365       mov y+1, R7
179C 8E41      1366       mov y+0, R6
179E 1201B5    1367       lcall add32
17A1 121840    1368       lcall Wait10us
17A4 DDEB      1369       djnz R5, Ave_loop
17A6 754164    1370            mov y+0, #low (100 % 0x10000) 
17A9 754200    1370            mov y+1, #high(100 % 0x10000) 
17AC 754300    1370            mov y+2, #low (100 / 0x10000) 
17AF 754400    1370            mov y+3, #high(100 / 0x10000) 
17B2 1202F7    1371       lcall div32
17B5           1372   
17B5           1373       ;**INSERT MATH FUNCTIONS
17B5           1374   
17B5 75414E    1375            mov y+0, #low (2894 % 0x10000) 
17B8 75420B    1375            mov y+1, #high(2894 % 0x10000) 
17BB 754300    1375            mov y+2, #low (2894 / 0x10000) 
17BE 754400    1375            mov y+3, #high(2894 / 0x10000)  ;6078; 2026
17C1 12026A    1376            lcall mul32
17C4 754110    1377            mov y+0, #low (10000 % 0x10000) 
17C7 754227    1377            mov y+1, #high(10000 % 0x10000) 
17CA 754300    1377            mov y+2, #low (10000 / 0x10000) 
17CD 754400    1377            mov y+3, #high(10000 / 0x10000)  ;14000; 7000
17D0 1202F7    1378            lcall div32
17D3 754116    1379            mov y+0, #low (22 % 0x10000) 
17D6 754200    1379            mov y+1, #high(22 % 0x10000) 
17D9 754300    1379            mov y+2, #low (22 / 0x10000) 
17DC 754400    1379            mov y+3, #high(22 / 0x10000) 
17DF 1201B5    1380       lcall add32
17E2 853D3B    1381       mov Temp_oven, x+0
17E5           1382       ;add KTemp_oven, Temp_oven, #273
17E5           1383   
17E5           1384   Display_Temp_BCD_Or_Kelvin:
17E5 1200F0    1385            lcall hex2bcd ; converts binary in x to BCD in BCD
17E8           1386       ;mov a, K_or_C
17E8           1387       ;cjne a, #1, Display_3_digit_BCD
17E8           1388       ;mov a, KTemp_oven
17E8           1389       ;SendToLCD
17E8           1390       ;sjmp Send_Temp_Port
17E8           1391   
17E8           1392   Display_Temp_BCD:    
17E8 121594    1393       lcall Display_3_digit_BCD
17EB           1394   
17EB           1395   Send_Temp_Port:
17EB           1396       ;Send_BCD(bcd+4)
17EB           1397       ;Send_BCD(bcd+3)
17EB           1398       ;Send_BCD(bcd+2)
17EB C000      1399       push ar0
17ED A846      1399       mov r0, bcd+1
17EF 1200DA    1399       lcall ?Send_BCD
17F2 D000      1399       pop ar0
17F4           1399   
17F4 C000      1400       push ar0
17F6 A845      1400       mov r0, bcd+0
17F8 1200DA    1400       lcall ?Send_BCD
17FB D000      1400       pop ar0
17FD           1400   
17FD 740D      1401            mov a, #'\r'
17FF 12047E    1402            lcall putchar
1802 740A      1403            mov a, #'\n'
1804 12047E    1404            lcall putchar
1807           1405   Check_Temp_done:
1807 22        1406   ret    
1808           1407   
1808           1408   ;-------------------------------------------------------------------------------------------------------------------------------
1808           1409   
1808           1410   ;Time wait
1808           1411   
1808           1412   Wait_One_Second:
1808 C002      1413            push AR2
180A 7AFA      1413            mov R2, #250
180C 120039    1413            lcall ?Wait_Milli_Seconds
180F D002      1413            pop AR2
1811 C002      1414            push AR2
1813 7AFA      1414            mov R2, #250
1815 120039    1414            lcall ?Wait_Milli_Seconds
1818 D002      1414            pop AR2
181A C002      1415            push AR2
181C 7AFA      1415            mov R2, #250
181E 120039    1415            lcall ?Wait_Milli_Seconds
1821 D002      1415            pop AR2
1823 C002      1416            push AR2
1825 7AFA      1416            mov R2, #250
1827 120039    1416            lcall ?Wait_Milli_Seconds
182A D002      1416            pop AR2
182C 22        1417   ret
182D           1418   
182D           1419   Wait_Half_Second:
182D C002      1420            push AR2
182F 7AFA      1420            mov R2, #250
1831 120039    1420            lcall ?Wait_Milli_Seconds
1834 D002      1420            pop AR2
1836 C002      1421            push AR2
1838 7AFA      1421            mov R2, #250
183A 120039    1421            lcall ?Wait_Milli_Seconds
183D D002      1421            pop AR2
183F 22        1422   ret
1840           1423   
1840           1424   
1840           1425   
1840           1426   Wait10us:
1840 784A      1427       mov R0, #74
1842 D8FE      1428       djnz R0, $
1844 22        1429   ret
1845           1430   ; ==================================================================================================
1845           1431   
1845           1432   ;-------------------------------------;
1845           1433   ; ISR for Timer 1.  Used to playback  ;
1845           1434   ; the WAV file stored in the SPI      ;
1845           1435   ; flash memory.                       ;
1845           1436   ;-------------------------------------;
1845           1437   Timer1_ISR:
1845           1438            ; The registers used in the ISR must be saved in the stack
1845 C0E0      1439            push acc
1847 C0D0      1440            push psw
1849           1441            
1849           1442            ; Check if the play counter is zero.  If so, stop playing sound.
1849 E54C      1443            mov a, w+0
184B 454D      1444            orl a, w+1
184D 454E      1445            orl a, w+2
184F 601C      1446            jz stop_playing
1851           1447            
1851           1448            ; Decrement play counter 'w'.  In this implementation 'w' is a 24-bit counter.
1851 74FF      1449            mov a, #0xff
1853 154C      1450            dec w+0
1855 B54C07    1451            cjne a, w+0, keep_playing
1858 154D      1452            dec w+1
185A B54D02    1453            cjne a, w+1, keep_playing
185D 154E      1454            dec w+2
185F           1455            
185F           1456   keep_playing:
185F D2A6      1457            setb SPEAKER
1861 12040D    1458            lcall Send_SPI ; Read the next byte from the SPI Flash...
1864           1459            ;mov P0, a ; WARNING: Remove this if not using an external DAC to use the pins of P0 as GPIO
1864 2480      1460            add a, #0x80
1866 F5AD      1461            mov DADH, a ; Output to DAC. DAC output is pin P2.3
1868 43A440    1462            orl DADC, #0b_0100_0000 ; Start DAC by setting GO/BSY=1
186B 800C      1463            sjmp Timer1_ISR_Done
186D           1464   
186D           1465   stop_playing:
186D C28E      1466            clr TR1 ; Stop timer 1
186F D2A5      1467            setb FLASH_CE  ; Disable SPI Flash
1871 C2A6      1468            clr SPEAKER ; Turn off speaker.  Removes hissing noise when not playing sound.
1873 75AD80    1469            mov DADH, #0x80 ; middle of range
1876 43A440    1470            orl DADC, #0b_0100_0000 ; Start DAC by setting GO/BSY=1
1879           1471   
1879           1472   Timer1_ISR_Done:         
1879 D0D0      1473            pop psw
187B D0E0      1474            pop acc
187D 32        1475            reti
187E           1476   ; ==================================================================================================
187E           1477   
187E           1478   ;---------------------------------;
187E           1479   ; Routine to initialize the ISR   ;
187E           1480   ; for timer 2                     ;
187E           1481   ;---------------------------------;
187E           1482   Timer2_init:
187E 75C800    1483       mov T2CON, #0
1881 75CDA9    1484       mov TH2, #high(TIMER2_RELOAD)
1884 75CC9A    1485       mov TL2, #low(TIMER2_RELOAD)
1887           1486   
1887 75CBA9    1487       mov RCAP2H, #high(TIMER2_RELOAD)
188A 75CA9A    1488       mov RCAP2L, #low(TIMER2_RELOAD)
188D           1489   
188D E4        1490       clr a
188E F530      1491       mov Count1ms+0, a
1890 F531      1492       mov Count1ms+1, a
1892 F532      1493       mov Count5sec , a
1894 D2AD      1494       setb ET2
1896 D2CA      1495       setb TR2
1898 C202      1496       clr enable_clk
189A 22        1497       ret
189B           1498   
189B           1499   ;---------------------------------;
189B           1500   ; ISR for timer 2                 ;
189B           1501   ;---------------------------------;
189B           1502   Timer2_ISR:
189B C2CF      1503       clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
189D B290      1504       cpl P1.0 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
189F           1505            
189F           1506            ; The two registers used in the ISR must be saved in the stack
189F C0E0      1507       push acc
18A1 C0D0      1508       push psw
18A3           1509            
18A3           1510            ; Increment the 16-bit one mili second counter
18A3 0530      1511            inc Count1ms+0    ; Increment the low 8-bits first
18A5 E530      1512            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
18A7 7002      1513            jnz Inc_Done
18A9 0531      1514            inc Count1ms+1
18AB           1515   
18AB           1516   Inc_Done:
18AB           1517   
18AB           1518   ;**Oven Power Output-------------------
18AB           1519       ; Do the PWM thing
18AB           1520            ; Check if Count1ms > pwm_ratio (this is a 16-bit compare)
18AB C3        1521            clr c
18AC E54F      1522            mov a, pwm_ratio+0
18AE 9530      1523            subb a, Count1ms+0
18B0 E550      1524            mov a, pwm_ratio+1
18B2 9531      1525            subb a, Count1ms+1
18B4           1526            ; if Count1ms > pwm_ratio  the carry is set.  Just copy the carry to the pwm output pin:
18B4 9290      1527            mov PWM_OUTPUT, c
18B6           1528   ;**----------------------------------
18B6           1529            ; Check if one second has passed
18B6 E530      1530            mov a, Count1ms+0
18B8 B4E831    1531            cjne a, #low(1000), Timer2_ISR_done ; Warning: this instruction changes the carry flag!
18BB E531      1532            mov a, Count1ms+1
18BD B4032C    1533            cjne a, #high(1000), Timer2_ISR_done
18C0           1534            
18C0           1535            ; 1000 milliseconds have passed.  Set a flag so the main program knows
18C0 D200      1536            setb one_seconds_flag ; Let the main program know one second had passed
18C2           1537       
18C2 0532      1538       inc Count5sec
18C4 E532      1539       mov a, Count5sec
18C6 B40505    1540       cjne a, #5, Set_5sec_flag_done
18C9 D201      1541       setb five_seconds_flag
18CB E4        1542       clr a
18CC F532      1543       mov Count5sec, a
18CE           1544       
18CE           1545   Set_5sec_flag_done:
18CE E4        1546            clr a
18CF F530      1547            mov Count1ms+0, a
18D1 F531      1548            mov Count1ms+1, a
18D3           1549   
18D3 300216    1550       jnb enable_clk, Timer2_ISR_done ;if the clk is enabled, increment the second. Otherwise skip
18D6           1551   ; Increment the run time counter and state time counter
18D6 E538      1552            mov a, Run_time_seconds
18D8 2401      1553            add a, #0x01
18DA D4        1554            da a
18DB F538      1555       mov Run_time_seconds, a
18DD           1556       ;check sec overflow
18DD B4600A    1557       cjne a, #0x60, Check_sec_overflow_done
18E0 753800    1558       mov Run_time_seconds, #0x00
18E3 E539      1559       mov a, Run_time_minutes ;inc min
18E5 2401      1560       add a, #1
18E7 D4        1561       da a
18E8 F539      1562       mov Run_time_minutes, a
18EA           1563   Check_sec_overflow_done:
18EA 053A      1564       inc State_time
18EC           1565   Timer2_ISR_done:
18EC D0D0      1566            pop psw
18EE D0E0      1567            pop acc
18F0 32        1568            reti
18F1           1569   
18F1           1570   
18F1           1571   ; ==================================================================================================
18F1           1572   
18F1           1573   main:
18F1 75817F    1574       mov SP, #0x7F
18F4 12187E    1575       lcall Timer2_Init
18F7           1576       ;lcall INI_SPI
18F7 120088    1577       lcall LCD_4BIT
18FA 120466    1578       lcall InitSerialPort
18FD 1213DF    1579       lcall INI_PLAYBACK_TEMP
1900           1580       ; In case you decide to use the pins of P0, configure the port in bidirectional mode. Can be ignored
1900 75E600    1581       mov P0M0, #0
1903 75E700    1582       mov P0M1, #0
1906 D2AF      1583       setb EA   ;Enable global enterupt
1908 C204      1584       clr SPAN_ENG
190A           1585   
190A           1586       ;Set the default pwm output ratio to 0%.  That is 0ms of every second:
190A 754F00    1587            mov pwm_ratio+0, #low(0)
190D 755000    1588            mov pwm_ratio+1, #high(0)
1910 753300    1589       mov States, #0
1913 755300    1590       mov Profile, #0
1916 1216D4    1591       lcall Load_Configuration1
1919           1592       ;setb FAN
1919 1215B1    1593       lcall Animation 
191C           1594   
191C           1595   
191C           1596   state0: ; idle 
191C           1597   ;***initial parameters displayed***
191C 754F00    1598       mov pwm_ratio+0, #low(0)
191F 755000    1599            mov pwm_ratio+1, #high(0)
1922           1600       
1922           1601       ;Displays Soak Temp and Time
1922 1214E7    1602       lcall State0_display
1925           1603       ;check power on
1925 12052A    1604       lcall CHECK_POWER
1928           1605       ; check the parameters being pressed
1928 120486    1606       lcall CHECK_STIME
192B 1204AF    1607       lcall CHECK_STEMP
192E 1204D8    1608       lcall CHECK_RTIME
1931 120501    1609       lcall CHECK_RTEMP
1934 120546    1610       lcall CHECK_PROFILE
1937           1611       
1937 2085E2    1612       jb NEXT_STATE_BUTTON, state0
193A C002      1613            push AR2
193C 7A32      1613            mov R2, #50
193E 120039    1613            lcall ?Wait_Milli_Seconds
1941 D002      1613            pop AR2 ; debounce time
1943 2085D6    1614            jb NEXT_STATE_BUTTON, state0 ; if button not pressed, loop
1946 3085FD    1615            jnb NEXT_STATE_BUTTON, $
1949           1616   state0_done:
1949 753301    1617       mov States, #1
194C 753A00    1618       mov State_time, #0
194F D202      1619       setb enable_clk
1951           1620       ; ***play audio***
1951           1620       ;cjne sound_flag, #0, $
1951           1620       
1951 C28E      1620       clr TR1 ; Stop Timer 1 ISR from playing previous request
1953 D2A5      1620       setb FLASH_CE
1955           1620       ;setb sound_flag ; sound starts
1955 C2A6      1620       clr SPEAKER ; Turn off speaker
1957 C2A5      1620       clr FLASH_CE ; Enable SPI Flash
1959 7403      1620       mov a, #READ_BYTES
195B 12040D    1620       lcall Send_SPI
195E           1620       ; Set the initial position in memory where to start playing
195E           1620       
195E 7418      1620       mov a, #0x18 ; change initial position
1960 12040D    1620       lcall Send_SPI
1963 74CB      1620       mov a, #0xcb ; next memory position
1965 12040D    1620       lcall Send_SPI
1968 74A8      1620       mov a, #0xa8 ; next memory position
196A 12040D    1620       lcall Send_SPI
196D 7418      1620       mov a, #0x18 ; request first byte to send to DAC
196F 12040D    1620       lcall Send_SPI
1972           1620       
1972           1620       ; How many bytes to play?
1972 754E02    1620       mov w+2, #0x02 ; Load the high byte of the number of bytes to play
1975 754D0F    1620       mov w+1, #0x0f ; Load the middle byte of the number of bytes to play
1978 754C58    1620       mov w+0, #0x58 ; Load the low byte of the number of bytes to play
197B           1620       
197B           1620       
197B D2A6      1620       setb SPEAKER ;Turn on speaker
197D D28E      1620       setb TR1 ;Start playback by enabling Timer1
197F           1620       ;clr sound_flag ; sound ends
197F 121808    1621       lcall Wait_One_Second
1982           1622        
1982           1623   
1982           1624   state1_beginning:
1982           1625   
1982           1626       ;Start Run Time
1982 753800    1627       mov Run_time_seconds, #0 ; time starts at 0:00
1985 753900    1628       mov Run_time_minutes, #0
1988 753A00    1629       mov State_time, #0
198B           1630   
198B           1631       ;***clear the screen and set new display***
198B 121441    1632       lcall Initialize_State_Display
198E C0E0      1633            push acc
1990 7407      1633            mov a, #7
1992 14        1633            dec a
1993 1200BD    1633            lcall ?Set_Cursor_2 ; Select column and row
1996 D0E0      1633            pop acc
1998 C083      1634            push dph
199A C082      1634            push dpl
199C C0E0      1634            push acc
199E 9003C7    1634            mov dptr, #Ramp2Soak
19A1 1200B2    1634            lcall ?Send_Constant_String
19A4 D0E0      1634            pop acc
19A6 D082      1634            pop dpl
19A8 D083      1634            pop dph; displays current state
19AA           1635   
19AA           1636       ;Set the default pwm output ratio to 100%.  That is 1000ms of every second:
19AA 754FE8    1637            mov pwm_ratio+0, #low(1000)
19AD 755003    1638            mov pwm_ratio+1, #high(1000)
19B0 300433    1639       jnb SPAN_ENG, SPANISH1
19B3           1640       ; ***play audio***
19B3           1640       ;cjne sound_flag, #0, $
19B3 12182D    1640       lcall Wait_Half_Second
19B6 C28E      1640       clr TR1 ; Stop Timer 1 ISR from playing previous request
19B8 D2A5      1640       setb FLASH_CE
19BA           1640       ;setb sound_flag ; sound starts
19BA C2A6      1640       clr SPEAKER ; Turn off speaker
19BC C2A5      1640       clr FLASH_CE ; Enable SPI Flash
19BE 7403      1640       mov a, #READ_BYTES
19C0 12040D    1640       lcall Send_SPI
19C3           1640       ; Set the initial position in memory where to start playing
19C3           1640       
19C3 7400      1640       mov a, #0x00 ; change initial position
19C5 12040D    1640       lcall Send_SPI
19C8 7400      1640       mov a, #0x00 ; next memory position
19CA 12040D    1640       lcall Send_SPI
19CD 742D      1640       mov a, #0x2d ; next memory position
19CF 12040D    1640       lcall Send_SPI
19D2 7400      1640       mov a, #0x00 ; request first byte to send to DAC
19D4 12040D    1640       lcall Send_SPI
19D7           1640       
19D7           1640       ; How many bytes to play?
19D7 754E00    1640       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
19DA 754D4E    1640       mov w+1, #0x4e ; Load the middle byte of the number of bytes to play
19DD 754C20    1640       mov w+0, #0x20 ; Load the low byte of the number of bytes to play
19E0           1640       
19E0           1640       
19E0 D2A6      1640       setb SPEAKER ;Turn on speaker
19E2 D28E      1640       setb TR1 ;Start playback by enabling Timer1
19E4           1640       ;clr sound_flag ; sound ends
19E4           1641       ;lcall Wait_One_Second
19E4 8036      1642       sjmp state1
19E6           1643   SPANISH1:
19E6           1644       ; ***play audio***
19E6           1644       ;cjne sound_flag, #0, $
19E6 12182D    1644       lcall Wait_Half_Second
19E9 C28E      1644       clr TR1 ; Stop Timer 1 ISR from playing previous request
19EB D2A5      1644       setb FLASH_CE
19ED           1644       ;setb sound_flag ; sound starts
19ED C2A6      1644       clr SPEAKER ; Turn off speaker
19EF C2A5      1644       clr FLASH_CE ; Enable SPI Flash
19F1 7403      1644       mov a, #READ_BYTES
19F3 12040D    1644       lcall Send_SPI
19F6           1644       ; Set the initial position in memory where to start playing
19F6           1644       
19F6 7405      1644       mov a, #0x05 ; change initial position
19F8 12040D    1644       lcall Send_SPI
19FB 7457      1644       mov a, #0x57 ; next memory position
19FD 12040D    1644       lcall Send_SPI
1A00 7430      1644       mov a, #0x30 ; next memory position
1A02 12040D    1644       lcall Send_SPI
1A05 7405      1644       mov a, #0x05 ; request first byte to send to DAC
1A07 12040D    1644       lcall Send_SPI
1A0A           1644       
1A0A           1644       ; How many bytes to play?
1A0A 754E00    1644       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1A0D 754DEA    1644       mov w+1, #0xea ; Load the middle byte of the number of bytes to play
1A10 754C60    1644       mov w+0, #0x60 ; Load the low byte of the number of bytes to play
1A13           1644       
1A13           1644       
1A13 D2A6      1644       setb SPEAKER ;Turn on speaker
1A15 D28E      1644       setb TR1 ;Start playback by enabling Timer1
1A17           1644       ;clr sound_flag ; sound ends
1A17           1645       ;mov FAN, #1
1A17 8003      1646       sjmp state1
1A19           1647       
1A19           1648   main_1:
1A19 0218F1    1649            ljmp main
1A1C           1650   
1A1C           1651   state1: ; ramp to soak
1A1C           1652       ;check power on
1A1C 12052A    1653       lcall CHECK_POWER
1A1F           1654       ;Update Time and Temp
1A1F 1214C0    1655       lcall Update_Display
1A22 121783    1656       lcall Average_Temp
1A25           1657       ;lcall CHECK_SPAN_OR_ENGL
1A25           1658       
1A25           1659       ;Decides if going to Spanish or English
1A25           1660       ;jb SPAN_ENG, SPANISH1
1A25 12057F    1661       lcall SOUND_FSM
1A28           1662   ;SPANISH1:
1A28           1663       ;lcall SOUND_FSM_S
1A28           1664   
1A28           1665   Check_Temp_done1:
1A28           1666   
1A28           1667       ;check if temp is below 150 
1A28 E53B      1668       mov a, Temp_oven           
1A2A 9534      1669       subb a, Temp_soak
1A2C 5014      1670       jnc state1_done        ; if greater, jump to state 2
1A2E 6012      1671       jz state1_done         ; if equal to, jump to state 2
1A30 4000      1672       jc Check_state1_safety ; if less than, check state time
1A32           1673   Check_state1_safety:       ; safety
1A32 E53B      1674       mov a, Temp_oven           
1A34 9432      1675       subb a, #50
1A36 50E4      1676       jnc state1             ; if greater, go back to state1
1A38 E53A      1677       mov a, State_time      ; if less than 50C, check if state time is too long
1A3A 943C      1678       subb a, #60
1A3C 50DB      1679       jnc main_1             ; if greater, restart
1A3E 60D9      1680       jz main_1              ; if equal to, restart
1A40 40DA      1681       jc state1              ; if less than, go back to state1
1A42           1682   ;*Checking moving to states with buttons---- 
1A42           1683   ;*Will remove after proper temperature reading----
1A42           1684   
1A42           1685       ;jb NEXT_STATE_BUTTON, state1
1A42           1686       ;Wait_Milli_Seconds(#50) ; debounce time
1A42           1687            ;jb NEXT_STATE_BUTTON, state1 ; if button not pressed, loop
1A42           1688            ;jnb NEXT_STATE_BUTTON, $ 
1A42           1689   
1A42           1690   state1_done:
1A42           1691       ;mov FAN, #0
1A42 753302    1692       mov States, #2
1A45           1693   
1A45           1694   ; preheat/soak
1A45           1695   state2_beginning: 
1A45 753A00    1696       mov State_time, #0;x00 ;clear the state time
1A48           1697       ;***clear the screen and set new display***
1A48 121441    1698       lcall Initialize_State_Display
1A4B C0E0      1699            push acc
1A4D 7407      1699            mov a, #7
1A4F 14        1699            dec a
1A50 1200BD    1699            lcall ?Set_Cursor_2 ; Select column and row
1A53 D0E0      1699            pop acc
1A55 C083      1700            push dph
1A57 C082      1700            push dpl
1A59 C0E0      1700            push acc
1A5B 9003D1    1700            mov dptr, #Soak
1A5E 1200B2    1700            lcall ?Send_Constant_String
1A61 D0E0      1700            pop acc
1A63 D082      1700            pop dpl
1A65 D083      1700            pop dph ;displays current state
1A67           1701   
1A67           1702       ;Set the default pwm output ratio to 20%.  That is 200ms of every second:
1A67 754FC8    1703            mov pwm_ratio+0, #low(200)
1A6A 755000    1704            mov pwm_ratio+1, #high(000)
1A6D           1705       ; Produces SOAK on speaker
1A6D 300433    1706       jnb SPAN_ENG, SPANISH2
1A70           1707       ; ***play audio***
1A70           1707       ;cjne sound_flag, #0, $
1A70 12182D    1707       lcall Wait_Half_Second
1A73 C28E      1707       clr TR1 ; Stop Timer 1 ISR from playing previous request
1A75 D2A5      1707       setb FLASH_CE
1A77           1707       ;setb sound_flag ; sound starts
1A77 C2A6      1707       clr SPEAKER ; Turn off speaker
1A79 C2A5      1707       clr FLASH_CE ; Enable SPI Flash
1A7B 7403      1707       mov a, #READ_BYTES
1A7D 12040D    1707       lcall Send_SPI
1A80           1707       ; Set the initial position in memory where to start playing
1A80           1707       
1A80 7400      1707       mov a, #0x00 ; change initial position
1A82 12040D    1707       lcall Send_SPI
1A85 7444      1707       mov a, #0x44 ; next memory position
1A87 12040D    1707       lcall Send_SPI
1A8A 74DD      1707       mov a, #0xdd ; next memory position
1A8C 12040D    1707       lcall Send_SPI
1A8F 7400      1707       mov a, #0x00 ; request first byte to send to DAC
1A91 12040D    1707       lcall Send_SPI
1A94           1707       
1A94           1707       ; How many bytes to play?
1A94 754E00    1707       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1A97 754D4E    1707       mov w+1, #0x4e ; Load the middle byte of the number of bytes to play
1A9A 754C20    1707       mov w+0, #0x20 ; Load the low byte of the number of bytes to play
1A9D           1707       
1A9D           1707       
1A9D D2A6      1707       setb SPEAKER ;Turn on speaker
1A9F D28E      1707       setb TR1 ;Start playback by enabling Timer1
1AA1           1707       ;clr sound_flag ; sound ends
1AA1 8031      1708       sjmp state2
1AA3           1709   SPANISH2:
1AA3           1710       ; ***play audio***
1AA3           1710       ;cjne sound_flag, #0, $
1AA3 12182D    1710       lcall Wait_Half_Second
1AA6 C28E      1710       clr TR1 ; Stop Timer 1 ISR from playing previous request
1AA8 D2A5      1710       setb FLASH_CE
1AAA           1710       ;setb sound_flag ; sound starts
1AAA C2A6      1710       clr SPEAKER ; Turn off speaker
1AAC C2A5      1710       clr FLASH_CE ; Enable SPI Flash
1AAE 7403      1710       mov a, #READ_BYTES
1AB0 12040D    1710       lcall Send_SPI
1AB3           1710       ; Set the initial position in memory where to start playing
1AB3           1710       
1AB3 7406      1710       mov a, #0x06 ; change initial position
1AB5 12040D    1710       lcall Send_SPI
1AB8 741A      1710       mov a, #0x1a ; next memory position
1ABA 12040D    1710       lcall Send_SPI
1ABD 7480      1710       mov a, #0x80 ; next memory position
1ABF 12040D    1710       lcall Send_SPI
1AC2 7406      1710       mov a, #0x06 ; request first byte to send to DAC
1AC4 12040D    1710       lcall Send_SPI
1AC7           1710       
1AC7           1710       ; How many bytes to play?
1AC7 754E00    1710       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1ACA 754D9C    1710       mov w+1, #0x9c ; Load the middle byte of the number of bytes to play
1ACD 754C40    1710       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
1AD0           1710       
1AD0           1710       
1AD0 D2A6      1710       setb SPEAKER ;Turn on speaker
1AD2 D28E      1710       setb TR1 ;Start playback by enabling Timer1
1AD4           1710       ;clr sound_flag ; sound ends
1AD4           1711   
1AD4           1712   state2:
1AD4           1713       ;check power on
1AD4 12052A    1714       lcall CHECK_POWER 
1AD7           1715       ;Update Time and Temp
1AD7 1214C0    1716       lcall Update_Display
1ADA 121783    1717       lcall Average_Temp
1ADD           1718   
1ADD           1719       ;jb SPAN_ENG, SPANISH2
1ADD 12057F    1720       lcall SOUND_FSM
1AE0 8000      1721       sjmp Check_Temp_done2
1AE2           1722   ;SPANISH2:
1AE2           1723       ;lcall SOUND_FSM_S
1AE2           1724       
1AE2           1725       ; loop back to state2 if run time is less than soak time. If greater than jump to state3 cuz of overflow of time
1AE2           1726   Check_Temp_done2:     
1AE2 E53A      1727       mov a, State_time
1AE4 9535      1728       subb a, Time_soak
1AE6 5002      1729       jnc state2_done
1AE8 40EA      1730       jc state2
1AEA           1731   
1AEA           1732   state2_done:
1AEA 753A03    1733       mov State_time, #3
1AED           1734   
1AED           1735   ; ramp to peak
1AED           1736   state3_beginning:
1AED           1737       ;setb OVEN_POWER ;turn power on 100%
1AED           1738   
1AED           1739       ;***clear the screen and set new display***
1AED 121441    1740       lcall Initialize_State_Display
1AF0 C0E0      1741            push acc
1AF2 7407      1741            mov a, #7
1AF4 14        1741            dec a
1AF5 1200BD    1741            lcall ?Set_Cursor_2 ; Select column and row
1AF8 D0E0      1741            pop acc
1AFA C083      1742            push dph
1AFC C082      1742            push dpl
1AFE C0E0      1742            push acc
1B00 9003D6    1742            mov dptr, #Ramp2Peak
1B03 1200B2    1742            lcall ?Send_Constant_String
1B06 D0E0      1742            pop acc
1B08 D082      1742            pop dpl
1B0A D083      1742            pop dph
1B0C           1743   
1B0C           1744       ;Set the default pwm output ratio to 100%.  That is 1000ms of every second:
1B0C 754FE8    1745            mov pwm_ratio+0, #low(1000)
1B0F 755003    1746            mov pwm_ratio+1, #high(1000)
1B12           1747   
1B12           1748       ; Produces RAMP TO PEAK on speaker
1B12 300433    1749       jnb SPAN_ENG, SPANISH3
1B15           1750       ; ***play audio***
1B15           1750       ;cjne sound_flag, #0, $
1B15 12182D    1750       lcall Wait_Half_Second
1B18 C28E      1750       clr TR1 ; Stop Timer 1 ISR from playing previous request
1B1A D2A5      1750       setb FLASH_CE
1B1C           1750       ;setb sound_flag ; sound starts
1B1C C2A6      1750       clr SPEAKER ; Turn off speaker
1B1E C2A5      1750       clr FLASH_CE ; Enable SPI Flash
1B20 7403      1750       mov a, #READ_BYTES
1B22 12040D    1750       lcall Send_SPI
1B25           1750       ; Set the initial position in memory where to start playing
1B25           1750       
1B25 7400      1750       mov a, #0x00 ; change initial position
1B27 12040D    1750       lcall Send_SPI
1B2A 748B      1750       mov a, #0x8b ; next memory position
1B2C 12040D    1750       lcall Send_SPI
1B2F 74CA      1750       mov a, #0xca ; next memory position
1B31 12040D    1750       lcall Send_SPI
1B34 7400      1750       mov a, #0x00 ; request first byte to send to DAC
1B36 12040D    1750       lcall Send_SPI
1B39           1750       
1B39           1750       ; How many bytes to play?
1B39 754E00    1750       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1B3C 754D75    1750       mov w+1, #0x75 ; Load the middle byte of the number of bytes to play
1B3F 754C30    1750       mov w+0, #0x30 ; Load the low byte of the number of bytes to play
1B42           1750       
1B42           1750       
1B42 D2A6      1750       setb SPEAKER ;Turn on speaker
1B44 D28E      1750       setb TR1 ;Start playback by enabling Timer1
1B46           1750       ;clr sound_flag ; sound ends
1B46 8031      1751       sjmp state3
1B48           1752   SPANISH3:
1B48           1753       ; ***play audio***
1B48           1753       ;cjne sound_flag, #0, $
1B48 12182D    1753       lcall Wait_Half_Second
1B4B C28E      1753       clr TR1 ; Stop Timer 1 ISR from playing previous request
1B4D D2A5      1753       setb FLASH_CE
1B4F           1753       ;setb sound_flag ; sound starts
1B4F C2A6      1753       clr SPEAKER ; Turn off speaker
1B51 C2A5      1753       clr FLASH_CE ; Enable SPI Flash
1B53 7403      1753       mov a, #READ_BYTES
1B55 12040D    1753       lcall Send_SPI
1B58           1753       ; Set the initial position in memory where to start playing
1B58           1753       
1B58 7406      1753       mov a, #0x06 ; change initial position
1B5A 12040D    1753       lcall Send_SPI
1B5D 74B6      1753       mov a, #0xb6 ; next memory position
1B5F 12040D    1753       lcall Send_SPI
1B62 74C0      1753       mov a, #0xc0 ; next memory position
1B64 12040D    1753       lcall Send_SPI
1B67 7406      1753       mov a, #0x06 ; request first byte to send to DAC
1B69 12040D    1753       lcall Send_SPI
1B6C           1753       
1B6C           1753       ; How many bytes to play?
1B6C 754E00    1753       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1B6F 754D75    1753       mov w+1, #0x75 ; Load the middle byte of the number of bytes to play
1B72 754C30    1753       mov w+0, #0x30 ; Load the low byte of the number of bytes to play
1B75           1753       
1B75           1753       
1B75 D2A6      1753       setb SPEAKER ;Turn on speaker
1B77 D28E      1753       setb TR1 ;Start playback by enabling Timer1
1B79           1753       ;clr sound_flag ; sound ends
1B79           1754   
1B79           1755   state3: 
1B79           1756       ;check power on
1B79 12052A    1757       lcall CHECK_POWER
1B7C 121783    1758       lcall Average_Temp
1B7F           1759       
1B7F           1760       
1B7F           1761       ;Update Time and Temp
1B7F 1214C0    1762       lcall Update_Display
1B82           1763       ;jb SPAN_ENG, SPANISH3
1B82 12057F    1764       lcall SOUND_FSM
1B85 8000      1765       sjmp Check_Temp_done3
1B87           1766   ;SPANISH3:
1B87           1767       ;lcall SOUND_FSM_S
1B87           1768       
1B87           1769   Check_Temp_done3:  
1B87           1770    
1B87 E53B      1771       mov a, Temp_oven           
1B89 9536      1772       subb a, Temp_refl
1B8B 5004      1773       jnc state3_done    ; if greater, jump to state 4
1B8D 6002      1774       jz state3_done ; if equal to, jump to state 4
1B8F 40E8      1775       jc state3 ; if less than, go back to state3
1B91           1776    
1B91           1777   state3_done:
1B91 753A04    1778       mov State_time, #4
1B94           1779   
1B94           1780   ; reflow 
1B94           1781   state4_beginning:
1B94           1782       
1B94 753A00    1783       mov State_time, #0;x00 clear the state time
1B97           1784       ;***clear the screen and set new display***
1B97 121441    1785       lcall Initialize_State_Display
1B9A C0E0      1786            push acc
1B9C 7407      1786            mov a, #7
1B9E 14        1786            dec a
1B9F 1200BD    1786            lcall ?Set_Cursor_2 ; Select column and row
1BA2 D0E0      1786            pop acc
1BA4 C083      1787            push dph
1BA6 C082      1787            push dpl
1BA8 C0E0      1787            push acc
1BAA 9003E0    1787            mov dptr, #Reflow
1BAD 1200B2    1787            lcall ?Send_Constant_String
1BB0 D0E0      1787            pop acc
1BB2 D082      1787            pop dpl
1BB4 D083      1787            pop dph
1BB6           1788   
1BB6           1789       ;Set the default pwm output ratio to 20%.  That is 200ms of every second:
1BB6 754FC8    1790            mov pwm_ratio+0, #low(200)
1BB9 755000    1791            mov pwm_ratio+1, #high(000)
1BBC           1792   
1BBC           1793       ; Produces REFLOW on speaker
1BBC 300433    1794       jnb SPAN_ENG, SPANISH4
1BBF           1795       ; ***play audio***
1BBF           1795       ;cjne sound_flag, #0, $
1BBF 12182D    1795       lcall Wait_Half_Second
1BC2 C28E      1795       clr TR1 ; Stop Timer 1 ISR from playing previous request
1BC4 D2A5      1795       setb FLASH_CE
1BC6           1795       ;setb sound_flag ; sound starts
1BC6 C2A6      1795       clr SPEAKER ; Turn off speaker
1BC8 C2A5      1795       clr FLASH_CE ; Enable SPI Flash
1BCA 7403      1795       mov a, #READ_BYTES
1BCC 12040D    1795       lcall Send_SPI
1BCF           1795       ; Set the initial position in memory where to start playing
1BCF           1795       
1BCF 7400      1795       mov a, #0x00 ; change initial position
1BD1 12040D    1795       lcall Send_SPI
1BD4 74F0      1795       mov a, #0xf0 ; next memory position
1BD6 12040D    1795       lcall Send_SPI
1BD9 7463      1795       mov a, #0x63 ; next memory position
1BDB 12040D    1795       lcall Send_SPI
1BDE 7400      1795       mov a, #0x00 ; request first byte to send to DAC
1BE0 12040D    1795       lcall Send_SPI
1BE3           1795       
1BE3           1795       ; How many bytes to play?
1BE3 754E00    1795       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1BE6 754D59    1795       mov w+1, #0x59 ; Load the middle byte of the number of bytes to play
1BE9 754CD8    1795       mov w+0, #0xd8 ; Load the low byte of the number of bytes to play
1BEC           1795       
1BEC           1795       
1BEC D2A6      1795       setb SPEAKER ;Turn on speaker
1BEE D28E      1795       setb TR1 ;Start playback by enabling Timer1
1BF0           1795       ;clr sound_flag ; sound ends
1BF0 8031      1796       sjmp state4
1BF2           1797   SPANISH4:
1BF2           1798       ; ***play audio***
1BF2           1798       ;cjne sound_flag, #0, $
1BF2 12182D    1798       lcall Wait_Half_Second
1BF5 C28E      1798       clr TR1 ; Stop Timer 1 ISR from playing previous request
1BF7 D2A5      1798       setb FLASH_CE
1BF9           1798       ;setb sound_flag ; sound starts
1BF9 C2A6      1798       clr SPEAKER ; Turn off speaker
1BFB C2A5      1798       clr FLASH_CE ; Enable SPI Flash
1BFD 7403      1798       mov a, #READ_BYTES
1BFF 12040D    1798       lcall Send_SPI
1C02           1798       ; Set the initial position in memory where to start playing
1C02           1798       
1C02 7419      1798       mov a, #0x19 ; change initial position
1C04 12040D    1798       lcall Send_SPI
1C07 748E      1798       mov a, #0x8e ; next memory position
1C09 12040D    1798       lcall Send_SPI
1C0C 74F8      1798       mov a, #0xf8 ; next memory position
1C0E 12040D    1798       lcall Send_SPI
1C11 7419      1798       mov a, #0x19 ; request first byte to send to DAC
1C13 12040D    1798       lcall Send_SPI
1C16           1798       
1C16           1798       ; How many bytes to play?
1C16 754E00    1798       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1C19 754D75    1798       mov w+1, #0x75 ; Load the middle byte of the number of bytes to play
1C1C 754C30    1798       mov w+0, #0x30 ; Load the low byte of the number of bytes to play
1C1F           1798       
1C1F           1798       
1C1F D2A6      1798       setb SPEAKER ;Turn on speaker
1C21 D28E      1798       setb TR1 ;Start playback by enabling Timer1
1C23           1798       ;clr sound_flag ; sound ends
1C23           1799   
1C23           1800   state4:
1C23           1801       ;check power on
1C23 12052A    1802       lcall CHECK_POWER
1C26           1803       ;Update Time and Temp
1C26 1214C0    1804       lcall Update_Display
1C29 121783    1805       lcall Average_Temp
1C2C           1806      ;jb SPAN_ENG, SPANISH4
1C2C 12057F    1807       lcall SOUND_FSM
1C2F 8000      1808       sjmp Check_Temp_done4
1C31           1809   ;SPANISH4:
1C31           1810       ;lcall SOUND_FSM_S
1C31           1811       
1C31           1812   Check_Temp_done4:  
1C31           1813      
1C31           1814       ; loop back to state2 if run time is less than soak time
1C31 E53A      1815       mov a, State_time
1C33 9537      1816       subb a, Time_refl
1C35 5002      1817       jnc state4_done
1C37 40EA      1818       jc state4
1C39           1819   
1C39           1820   state4_done: 
1C39 753A00    1821       mov State_time, #0
1C3C 021C3F    1822       ljmp state5_beginning 
1C3F           1823   
1C3F           1824   
1C3F           1825   ; cooling
1C3F           1826   state5_beginning: ; turn oven off
1C3F C287      1827       clr OVEN_POWER
1C41           1828   
1C41           1829   ;***clear the screen and set new display***
1C41 121441    1830       lcall Initialize_State_Display
1C44 C083      1831            push dph
1C46 C082      1831            push dpl
1C48 C0E0      1831            push acc
1C4A 9003E7    1831            mov dptr, #Cooling
1C4D 1200B2    1831            lcall ?Send_Constant_String
1C50 D0E0      1831            pop acc
1C52 D082      1831            pop dpl
1C54 D083      1831            pop dph
1C56           1832   
1C56           1833       ;Set the default pwm output ratio to 0%.  That is 0ms of every second:
1C56 754F00    1834            mov pwm_ratio+0, #low(0)
1C59 755000    1835            mov pwm_ratio+1, #high(0)
1C5C           1836   
1C5C           1837       ; Produces COOLING on speaker
1C5C 300433    1838       jnb SPAN_ENG, SPANISH5
1C5F           1839       ; ***play audio***
1C5F           1839       ;cjne sound_flag, #0, $
1C5F 12182D    1839       lcall Wait_Half_Second
1C62 C28E      1839       clr TR1 ; Stop Timer 1 ISR from playing previous request
1C64 D2A5      1839       setb FLASH_CE
1C66           1839       ;setb sound_flag ; sound starts
1C66 C2A6      1839       clr SPEAKER ; Turn off speaker
1C68 C2A5      1839       clr FLASH_CE ; Enable SPI Flash
1C6A 7403      1839       mov a, #READ_BYTES
1C6C 12040D    1839       lcall Send_SPI
1C6F           1839       ; Set the initial position in memory where to start playing
1C6F           1839       
1C6F 7401      1839       mov a, #0x01 ; change initial position
1C71 12040D    1839       lcall Send_SPI
1C74 7448      1839       mov a, #0x48 ; next memory position
1C76 12040D    1839       lcall Send_SPI
1C79 749A      1839       mov a, #0x9a ; next memory position
1C7B 12040D    1839       lcall Send_SPI
1C7E 7401      1839       mov a, #0x01 ; request first byte to send to DAC
1C80 12040D    1839       lcall Send_SPI
1C83           1839       
1C83           1839       ; How many bytes to play?
1C83 754E00    1839       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1C86 754D6B    1839       mov w+1, #0x6b ; Load the middle byte of the number of bytes to play
1C89 754C6C    1839       mov w+0, #0x6c ; Load the low byte of the number of bytes to play
1C8C           1839       
1C8C           1839       
1C8C D2A6      1839       setb SPEAKER ;Turn on speaker
1C8E D28E      1839       setb TR1 ;Start playback by enabling Timer1
1C90           1839       ;clr sound_flag ; sound ends
1C90 8033      1840       sjmp state5
1C92           1841   SPANISH5:
1C92           1842       ; ***play audio***
1C92           1842       ;cjne sound_flag, #0, $
1C92 12182D    1842       lcall Wait_Half_Second
1C95 C28E      1842       clr TR1 ; Stop Timer 1 ISR from playing previous request
1C97 D2A5      1842       setb FLASH_CE
1C99           1842       ;setb sound_flag ; sound starts
1C99 C2A6      1842       clr SPEAKER ; Turn off speaker
1C9B C2A5      1842       clr FLASH_CE ; Enable SPI Flash
1C9D 7403      1842       mov a, #READ_BYTES
1C9F 12040D    1842       lcall Send_SPI
1CA2           1842       ; Set the initial position in memory where to start playing
1CA2           1842       
1CA2 7419      1842       mov a, #0x19 ; change initial position
1CA4 12040D    1842       lcall Send_SPI
1CA7 74F0      1842       mov a, #0xf0 ; next memory position
1CA9 12040D    1842       lcall Send_SPI
1CAC 74A0      1842       mov a, #0xa0 ; next memory position
1CAE 12040D    1842       lcall Send_SPI
1CB1 7419      1842       mov a, #0x19 ; request first byte to send to DAC
1CB3 12040D    1842       lcall Send_SPI
1CB6           1842       
1CB6           1842       ; How many bytes to play?
1CB6 754E00    1842       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1CB9 754DEA    1842       mov w+1, #0xea ; Load the middle byte of the number of bytes to play
1CBC 754C60    1842       mov w+0, #0x60 ; Load the low byte of the number of bytes to play
1CBF           1842       
1CBF           1842       
1CBF D2A6      1842       setb SPEAKER ;Turn on speaker
1CC1 D28E      1842       setb TR1 ;Start playback by enabling Timer1
1CC3           1842       ;clr sound_flag ; sound ends
1CC3 B291      1843       cpl FAN
1CC5           1844   
1CC5           1845   state5:
1CC5           1846       ;check power on
1CC5 12052A    1847       lcall CHECK_POWER
1CC8           1848       
1CC8           1849       ; update display
1CC8 1214C0    1850       lcall Update_Display
1CCB 121783    1851       lcall Average_Temp
1CCE           1852   
1CCE           1853       ;jb SPAN_ENG, SPANISH5
1CCE 12057F    1854       lcall SOUND_FSM
1CD1 8000      1855       sjmp Check_Temp_done5
1CD3           1856   ;SPANISH5:
1CD3           1857       ;lcall SOUND_FSM_S
1CD3           1858       
1CD3           1859   Check_Temp_done5:  
1CD3           1860   
1CD3 E53B      1861       mov a, Temp_oven
1CD5 943C      1862       subb a, #60
1CD7 50EC      1863       JNC state5    ; if greater, jump back to state 5
1CD9 60EA      1864       JZ state5 ; if equal to, go back to state5
1CDB 4000      1865       JC state5_done ; if less than, go back to state 0
1CDD           1866   
1CDD           1867       ;*Checking moving to states with buttons---- 
1CDD           1868   ;*Will remove after proper temperature reading----
1CDD           1869   
1CDD           1870       ;jb NEXT_STATE_BUTTON, state5
1CDD           1871       ;Wait_Milli_Seconds(#50) ; debounce time
1CDD           1872            ;jb NEXT_STATE_BUTTON, state5 ; if button not pressed, loop
1CDD           1873            ;jnb NEXT_STATE_BUTTON, $ 
1CDD           1874   
1CDD           1875   state5_done:
1CDD           1876       ; ***play audio***
1CDD           1876       ;cjne sound_flag, #0, $
1CDD           1876       
1CDD C28E      1876       clr TR1 ; Stop Timer 1 ISR from playing previous request
1CDF D2A5      1876       setb FLASH_CE
1CE1           1876       ;setb sound_flag ; sound starts
1CE1 C2A6      1876       clr SPEAKER ; Turn off speaker
1CE3 C2A5      1876       clr FLASH_CE ; Enable SPI Flash
1CE5 7403      1876       mov a, #READ_BYTES
1CE7 12040D    1876       lcall Send_SPI
1CEA           1876       ; Set the initial position in memory where to start playing
1CEA           1876       
1CEA 7416      1876       mov a, #0x16 ; change initial position
1CEC 12040D    1876       lcall Send_SPI
1CEF 74BC      1876       mov a, #0xbc ; next memory position
1CF1 12040D    1876       lcall Send_SPI
1CF4 7450      1876       mov a, #0x50 ; next memory position
1CF6 12040D    1876       lcall Send_SPI
1CF9 7416      1876       mov a, #0x16 ; request first byte to send to DAC
1CFB 12040D    1876       lcall Send_SPI
1CFE           1876       
1CFE           1876       ; How many bytes to play?
1CFE 754E02    1876       mov w+2, #0x02 ; Load the high byte of the number of bytes to play
1D01 754D0F    1876       mov w+1, #0x0f ; Load the middle byte of the number of bytes to play
1D04 754C58    1876       mov w+0, #0x58 ; Load the low byte of the number of bytes to play
1D07           1876       
1D07           1876       
1D07 D2A6      1876       setb SPEAKER ;Turn on speaker
1D09 D28E      1876       setb TR1 ;Start playback by enabling Timer1
1D0B           1876       ;clr sound_flag ; sound ends
1D0B 121808    1877       lcall Wait_One_Second
1D0E 753A00    1878       mov State_time, #0
1D11 753300    1879       mov States, #0
1D14 D291      1880       setb FAN
1D16 0218F1    1881       ljmp main
1D19           1882   
1D19           1883   EN
