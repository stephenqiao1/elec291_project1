                  2   $LIST
0000              4   
0000              5   
0000              6   ;-------------------------------------------------------------------------------------------------------------------------------
0000              7   ;These EQU must match the wiring between the microcontroller and ADC
0000              8   CLK  EQU 22118400
0000              9   TIMER1_RATE    EQU 25000 ;22050     ; 22050Hz is the sampling rate of the wav file we are playing
0000             10   TIMER1_RELOAD  EQU 0x10000-(CLK/TIMER1_RATE)
0000             11   BAUD equ 115200
0000             12   BRG_VAL equ (0x100-(CLK/(16*BAUD)))
0000             13   
0000             14   TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
0000             15   TIMER2_RELOAD EQU (65536-(CLK/TIMER2_RATE))
0000             16   
0000             17   ;shjfjdfs
0000             18   ;-------------------------------------------------------------------------------------------------------------------------------
0000             19   ;Button Pin Mapping
0000             20   NEXT_STATE_BUTTON  equ P0.5
0000             21   STIME_BUTTON    equ P0.2
0000             22   STEMP_BUTTON    equ P0.3
0000             23   RTIME_BUTTON    equ P0.4
0000             24   RTEMP_BUTTON    equ P0.6 ;0.6
0000             25   PROFILE_BUTTON  equ P0.0
0000             26   
0000             27   POWER_BUTTON    equ P4.5
0000             28   SHIFT_BUTTON    equ P0.1
0000             29   
0000             30   ;Output Pins
0000             31   SPEAKER         equ P2.6
0000             32   
0000             33   PWM_OUTPUT      equ P1.0 ; Attach an LED (with 1k resistor in series) to P1.0
0000             34   SPAN_ENG_BUTTON equ P0.7;0.7
0000             35   
0000             36   
0000             37   ;FLASH pins
0000             38   MY_MOSI_SOUND EQU P2.4
0000             39   MY_MISO_SOUND EQU P2.1
0000             40   MY_SCLK_SOUND EQU P2.0
0000             41   FLASH_CE      EQU P2.5
0000             42   
0000             43   ;Thermowire Pins
0000             44   CE_ADC    EQU  P1.7
0000             45   MY_MOSI   EQU  P1.6
0000             46   MY_MISO   EQU  P1.5
0000             47   MY_SCLK   EQU  P1.4 
0000             48   
0000             49   ; Commands supported by the SPI flash memory according to the datasheet
0000             50   WRITE_ENABLE     EQU 0x06  ; Address:0 Dummy:0 Num:0
0000             51   WRITE_DISABLE    EQU 0x04  ; Address:0 Dummy:0 Num:0
0000             52   READ_STATUS      EQU 0x05  ; Address:0 Dummy:0 Num:1 to infinite
0000             53   READ_BYTES       EQU 0x03  ; Address:3 Dummy:0 Num:1 to infinite
0000             54   READ_SILICON_ID  EQU 0xab  ; Address:0 Dummy:3 Num:1 to infinite
0000             55   FAST_READ        EQU 0x0b  ; Address:3 Dummy:1 Num:1 to infinite
0000             56   WRITE_STATUS     EQU 0x01  ; Address:0 Dummy:0 Num:1
0000             57   WRITE_BYTES      EQU 0x02  ; Address:3 Dummy:0 Num:1 to 256
0000             58   ERASE_ALL        EQU 0xc7  ; Address:0 Dummy:0 Num:0
0000             59   ERASE_BLOCK      EQU 0xd8  ; Address:3 Dummy:0 Num:0
0000             60   READ_DEVICE_ID   EQU 0x9f  ; Address:0 Dummy:2 Num:1 to infinite
0000             61   
0000             62   ; These 'equ' must match the hardware wiring
0000             63   LCD_RS equ P3.2
0000             64   ;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
0000             65   LCD_E  equ P3.3
0000             66   LCD_D4 equ P3.4
0000             67   LCD_D5 equ P3.5
0000             68   LCD_D6 equ P3.6
0000             69   LCD_D7 equ P3.7
0000             70   
0000             71   ;-------------------------------------------------------------------------------------------------------------------------------
0000             72   
0000             73   org 0x0000
0000 0211F4      74       ljmp main
0003             75   
0003             76   ; External interrupt 0 vector (not used in this code)
0003             77   org 0x0003
0003 32          78            reti
0004             79   
0004             80   ; Timer/Counter 0 overflow interrupt vector
000B             81   org 0x000B
000B 32          82            reti
000C             83   
000C             84   ; External interrupt 1 vector (not used in this code)
0013             85   org 0x0013
0013 32          86            reti
0014             87   
0014             88   ; Timer/Counter 1 overflow interrupt vector
001B             89   org 0x001B
001B 021148      90            ljmp Timer1_ISR
001E             91   
001E             92   ; Serial port receive/transmit interrupt vector (not used in this code)
0023             93   org 0x0023 
0023 32          94            reti
0024             95            
0024             96   ; Timer/Counter 2 overflow interrupt vector
002B             97   org 0x002B
002B 02119E      98       ljmp Timer2_ISR
002E             99   ;-------------------------------------------------------------------------------------------------------------------------------
002E            100   ; Place our variables here
0030            101   DSEG at 0x30 ; Before the state machine!
0030            102   Count1ms:         ds 2 ; Used to determine when one second has passed
0032            103   Count5sec:        ds 1
0033            104   States:           ds 1
0034            105   Temp_soak:        ds 1
0035            106   Time_soak:        ds 1
0036            107   Temp_refl:        ds 1
0037            108   Time_refl:        ds 1
0038            109   Run_time_seconds: ds 1
0039            110   Run_time_minutes: ds 1
003A            111   State_time:       ds 1
003B            112   Temp_oven:        ds 1
003C            113   KTemp_oven:       ds 1
003D            114   x:                ds 4
0041            115   y:                ds 4
0045            116   bcd:              ds 5
004A            117   Result:           ds 2
004C            118   w:                ds 3
004F            119   pwm_ratio:        ds 2
0051            120   average_count:    ds 1
0052            121   K_or_C:           ds 1
0053            122   Profile:          ds 1 ; Select profile1 if equ 0, 2 if equ 1
0054            123   
                125   $LIST
00F0            127   
                546   $LIST
                129   $LIST
0360            131   
0360            132   ;$NOLIST
0360            133   ;$INCLUDE(sound_for_project1_index.asm)
0360            134   ;$LIST
0360            135   
0000            136   bseg
0000            137   one_seconds_flag:  dbit 1
0001            138   five_seconds_flag: dbit 1
0002            139   enable_clk:        dbit 1
0003            140   mf:                dbit 1
0004            141   SPAN_ENG:          dbit 1
0005            142   ;sound_flag: dbit 1
0005            143   
0360            144   cseg
0360            145   
0360            146   ;-------------------------------------------------------------------------------------------------------------------------------
0360            147   ;***Messages To Display*** 
0360            148   
0360            149   ;shortened labels
0360 53546D70   150   STemp:  db 'STmp:', 0
     3A00
0366 53546D3A   151   STime:  db 'STm:', 0
     00
036B 52546D70   152   RTemp:  db 'RTmp:', 0
     3A00
0371 52546D3A   153   RTime:  db 'RTm:', 0
     00
0376            154   
0376            155   ;lables for runnning oven
0376 53746174   156   state:     db 'State>' , 0
     653E00
037D 546D653E   157   time:      db 'Tme>' , 0
     00
0382 3A00       158   colon:     db ':', 0
0384 546D703E   159   temp:      db 'Tmp>', 0
     00
0389            160   
0389            161   ;labels for changin parameters
0389 5265666C   162   ReflowTemp:  db 'Reflow Temperature:', 0
     6F772054
     656D7065
     72617475
     72653A00
039D 5265666C   163   ReflowTime:  db 'Reflow Time:', 0
     6F772054
     696D653A
     00
03AA 536F616B   164   SoakTime:    db 'Soak Time:', 0
     2054696D
     653A00
03B5 536F616B   165   SoakTemp:    db 'Soak Temperature:', 0
     2054656D
     70657261
     74757265
     3A00
03C7            166   
03C7            167   
03C7            168   ;Current State in Oven
03C7 52616D70   169   Ramp2Soak: db 'Ramp-Soak' , 0
     2D536F61
     6B00
03D1 536F616B   170   Soak:      db 'Soak' , 0
     00
03D6 52616D70   171   Ramp2Peak: db 'Ramp-Peak' , 0
     2D506561
     6B00
03E0 5265666C   172   Reflow:    db 'Reflow' , 0
     6F7700
03E7 436F6F6C   173   Cooling:   db 'Cooling' , 0
     696E6700
03EF            174   
03EF            175   ;-------------------------------------------------------------------------------------------------------------------------------
03EF            176   ;FXNS FOR THERMOWIRE
03EF            177   
03EF            178   ;initialize SPI 
03EF            179   INI_SPI:
03EF D295       180            setb MY_MISO          ; Make MISO an input pin
03F1 C294       181            clr MY_SCLK           ; Mode 0,0 default
03F3 22         182            ret
03F4            183   DO_SPI_G:
03F4 C0E0       184            push acc
03F6 7900       185            mov R1, #0            ; Received byte stored in R1
03F8 7A08       186            mov R2, #8            ; Loop counter (8-bits)
03FA            187   DO_SPI_G_LOOP:
03FA E8         188            mov a, R0             ; Byte to write is in R0
03FB 33         189            rlc a                 ; Carry flag has bit to write
03FC F8         190            mov R0, a
03FD 9296       191            mov MY_MOSI, c
03FF D294       192            setb MY_SCLK          ; Transmit
0401 A295       193            mov c, MY_MISO        ; Read received bit
0403 E9         194            mov a, R1             ; Save received bit in R1
0404 33         195            rlc a
0405 F9         196            mov R1, a
0406 C294       197            clr MY_SCLK
0408 DAF0       198            djnz R2, DO_SPI_G_LOOP
040A D0E0       199            pop acc
040C 22         200   ret
040D            201   
040D            202   Send_SPI:
                203   	SPIBIT MAC
                204   	    ; Send/Receive bit %0
                205   		rlc a
                206   		mov MY_MOSI_SOUND, c
                207   		setb MY_SCLK_SOUND
                208   		mov c, MY_MISO_SOUND
                209   		clr MY_SCLK_SOUND
                210   		mov acc.0, c
                211   	ENDMAC
040D            212            
040D            213                ; Send/Receive bit 7
040D 33         213                    rlc a
040E 92A4       213                    mov MY_MOSI_SOUND, c
0410 D2A0       213                    setb MY_SCLK_SOUND
0412 A2A1       213                    mov c, MY_MISO_SOUND
0414 C2A0       213                    clr MY_SCLK_SOUND
0416 92E0       213                    mov acc.0, c
0418            214                ; Send/Receive bit 6
0418 33         214                    rlc a
0419 92A4       214                    mov MY_MOSI_SOUND, c
041B D2A0       214                    setb MY_SCLK_SOUND
041D A2A1       214                    mov c, MY_MISO_SOUND
041F C2A0       214                    clr MY_SCLK_SOUND
0421 92E0       214                    mov acc.0, c
0423            215                ; Send/Receive bit 5
0423 33         215                    rlc a
0424 92A4       215                    mov MY_MOSI_SOUND, c
0426 D2A0       215                    setb MY_SCLK_SOUND
0428 A2A1       215                    mov c, MY_MISO_SOUND
042A C2A0       215                    clr MY_SCLK_SOUND
042C 92E0       215                    mov acc.0, c
042E            216                ; Send/Receive bit 4
042E 33         216                    rlc a
042F 92A4       216                    mov MY_MOSI_SOUND, c
0431 D2A0       216                    setb MY_SCLK_SOUND
0433 A2A1       216                    mov c, MY_MISO_SOUND
0435 C2A0       216                    clr MY_SCLK_SOUND
0437 92E0       216                    mov acc.0, c
0439            217                ; Send/Receive bit 3
0439 33         217                    rlc a
043A 92A4       217                    mov MY_MOSI_SOUND, c
043C D2A0       217                    setb MY_SCLK_SOUND
043E A2A1       217                    mov c, MY_MISO_SOUND
0440 C2A0       217                    clr MY_SCLK_SOUND
0442 92E0       217                    mov acc.0, c
0444            218                ; Send/Receive bit 2
0444 33         218                    rlc a
0445 92A4       218                    mov MY_MOSI_SOUND, c
0447 D2A0       218                    setb MY_SCLK_SOUND
0449 A2A1       218                    mov c, MY_MISO_SOUND
044B C2A0       218                    clr MY_SCLK_SOUND
044D 92E0       218                    mov acc.0, c
044F            219                ; Send/Receive bit 1
044F 33         219                    rlc a
0450 92A4       219                    mov MY_MOSI_SOUND, c
0452 D2A0       219                    setb MY_SCLK_SOUND
0454 A2A1       219                    mov c, MY_MISO_SOUND
0456 C2A0       219                    clr MY_SCLK_SOUND
0458 92E0       219                    mov acc.0, c
045A            220                ; Send/Receive bit 0
045A 33         220                    rlc a
045B 92A4       220                    mov MY_MOSI_SOUND, c
045D D2A0       220                    setb MY_SCLK_SOUND
045F A2A1       220                    mov c, MY_MISO_SOUND
0461 C2A0       220                    clr MY_SCLK_SOUND
0463 92E0       220                    mov acc.0, c
0465            221   
0465 22         222   ret
0466            223   
                224   Change_8bit_Variable MAC
                225       jb %0, %2
                226       Wait_Milli_Seconds(#50) ; de-bounce
                227       jb %0, %2
                228       jnb %0, $
                229       jb SHIFT_BUTTON, skip%Mb
                230       dec %1
                231       sjmp skip%Ma
                232       skip%Mb:
                233       inc %1
                234       skip%Ma:
                235       mov a, Profile
                236       cjne a, #0, skip%Mc
                237       lcall Save_Configuration1
                238       sjmp skip%Md
                239       skip%Mc:
                240       lcall Save_Configuration2
                241       skip%Md:
                242   ENDMAC
0466            243   
0466            244   
0466            245   
0466            246   ;Change_8bit_Variable(MY_VARIABLE_BUTTON, my_variable, loop_c)
0466            247   ;    Set_Cursor(2, 14)
0466            248   ;    mov a, my_variable
0466            249   ;    lcall SendToLCD
0466            250   ;lcall Save_Configuration
0466            251   
0466            252   ;-------------------------------------------------------------------------------------------------------------------------------
0466            253   ;***FXNS For Serial Port
0466            254   
0466            255   ; Configure the serial port and baud rate
0466            256   InitSerialPort:
0466            257       ; Since the reset button bounces, we need to wait a bit before
0466            258       ; sending messages, otherwise we risk displaying gibberish!
0466 79DE       259       mov R1, #222
0468 78A6       260       mov R0, #166
046A D8FE       261       djnz R0, $   ; 3 cycles->3*45.21123ns*166=22.51519us
046C D9FA       262       djnz R1, $-4 ; 22.51519us*222=4.998ms
046E            263       ; Now we can proceed with the configuration
046E 438780     264            orl     PCON,#0x80
0471 759852     265            mov     SCON,#0x52
0474 759B00     266            mov     BDRCON,#0x00
0477 759AF4     267            mov     BRL,#BRG_VAL
047A 759B1E     268            mov     BDRCON,#0x1E ; BDRCON=BRR|TBCK|RBCK|SPD;
047D 22         269   ret
047E            270   
047E            271   
047E            272   putchar:
047E 3099FD     273       jnb TI, putchar
0481 C299       274       clr TI
0483 F599       275       mov SBUF, a
0485 22         276   ret
0486            277   
0486            278   ;-------------------------------------------------------------------------------------------------------------------------------
0486            279   ;***FXNS to CHECK BUTTONS
0486            280   
0486            281   CHECK_STIME:
0486            282   
0486 208225     283       jb STIME_BUTTON, CHECK_STIME_END
0489 C002       283            push AR2
048B 7A32       283            mov R2, #50
048D 120039     283            lcall ?Wait_Milli_Seconds
0490 D002       283            pop AR2 ; de-bounce
0492 208219     283       jb STIME_BUTTON, CHECK_STIME_END
0495 3082FD     283       jnb STIME_BUTTON, $
0498 208104     283       jb SHIFT_BUTTON, skip16b
049B 1535       283       dec Time_soak
049D 8002       283       sjmp skip16a
049F            283       skip16b:
049F 0535       283       inc Time_soak
04A1            283       skip16a:
04A1 E553       283       mov a, Profile
04A3 B40005     283       cjne a, #0, skip16c
04A6 120F69     283       lcall Save_Configuration1
04A9 8003       283       sjmp skip16d
04AB            283       skip16c:
04AB 120FA0     283       lcall Save_Configuration2
04AE            283       skip16d:
04AE            284            
04AE            285   CHECK_STIME_END:
04AE 22         286   ret
04AF            287   
04AF            288   CHECK_STEMP:
04AF 208325     289       jb STEMP_BUTTON, CHECK_STEMP_END
04B2 C002       289            push AR2
04B4 7A32       289            mov R2, #50
04B6 120039     289            lcall ?Wait_Milli_Seconds
04B9 D002       289            pop AR2 ; de-bounce
04BB 208319     289       jb STEMP_BUTTON, CHECK_STEMP_END
04BE 3083FD     289       jnb STEMP_BUTTON, $
04C1 208104     289       jb SHIFT_BUTTON, skip18b
04C4 1534       289       dec Temp_soak
04C6 8002       289       sjmp skip18a
04C8            289       skip18b:
04C8 0534       289       inc Temp_soak
04CA            289       skip18a:
04CA E553       289       mov a, Profile
04CC B40005     289       cjne a, #0, skip18c
04CF 120F69     289       lcall Save_Configuration1
04D2 8003       289       sjmp skip18d
04D4            289       skip18c:
04D4 120FA0     289       lcall Save_Configuration2
04D7            289       skip18d:
04D7            290       ;lcall Save_Configuration
04D7            291            
04D7            292   CHECK_STEMP_END:
04D7 22         293   ret
04D8            294   
04D8            295   CHECK_RTIME:
04D8 208425     296       jb RTIME_BUTTON, CHECK_RTIME_END
04DB C002       296            push AR2
04DD 7A32       296            mov R2, #50
04DF 120039     296            lcall ?Wait_Milli_Seconds
04E2 D002       296            pop AR2 ; de-bounce
04E4 208419     296       jb RTIME_BUTTON, CHECK_RTIME_END
04E7 3084FD     296       jnb RTIME_BUTTON, $
04EA 208104     296       jb SHIFT_BUTTON, skip20b
04ED 1537       296       dec Time_refl
04EF 8002       296       sjmp skip20a
04F1            296       skip20b:
04F1 0537       296       inc Time_refl
04F3            296       skip20a:
04F3 E553       296       mov a, Profile
04F5 B40005     296       cjne a, #0, skip20c
04F8 120F69     296       lcall Save_Configuration1
04FB 8003       296       sjmp skip20d
04FD            296       skip20c:
04FD 120FA0     296       lcall Save_Configuration2
0500            296       skip20d:
0500            297   CHECK_RTIME_END:
0500 22         298   ret
0501            299   
0501            300   CHECK_RTEMP:
0501 208625     301       jb RTEMP_BUTTON, CHECK_RTEMP_END
0504 C002       301            push AR2
0506 7A32       301            mov R2, #50
0508 120039     301            lcall ?Wait_Milli_Seconds
050B D002       301            pop AR2 ; de-bounce
050D 208619     301       jb RTEMP_BUTTON, CHECK_RTEMP_END
0510 3086FD     301       jnb RTEMP_BUTTON, $
0513 208104     301       jb SHIFT_BUTTON, skip22b
0516 1536       301       dec Temp_refl
0518 8002       301       sjmp skip22a
051A            301       skip22b:
051A 0536       301       inc Temp_refl
051C            301       skip22a:
051C E553       301       mov a, Profile
051E B40005     301       cjne a, #0, skip22c
0521 120F69     301       lcall Save_Configuration1
0524 8003       301       sjmp skip22d
0526            301       skip22c:
0526 120FA0     301       lcall Save_Configuration2
0529            301       skip22d:
0529            302   CHECK_RTEMP_END:
0529 22         303   ret
052A            304   
052A            305   CHECK_POWER:
052A 20C518     306       jb POWER_BUTTON, CHECK_POWER_END ; if button not pressed, stop checking
052D C002       307            push AR2
052F 7A32       307            mov R2, #50
0531 120039     307            lcall ?Wait_Milli_Seconds
0534 D002       307            pop AR2 ; debounce time
0536 20C50C     308            jb POWER_BUTTON, CHECK_POWER_END ; if button not pressed, stop checking
0539 30C5FD     309            jnb POWER_BUTTON, $ ; loop while the button is pressed
053C 754F00     310       mov pwm_ratio+0, #low(0)
053F 755000     311            mov pwm_ratio+1, #high(0)
0542 121043     312       lcall OFF_STATE
0545            313   CHECK_POWER_END:
0545 22         314   ret
0546            315   
0546            316   CHECK_PROFILE:
0546 208022     317       jb PROFILE_BUTTON, CHECK_PROFILE_END
0549 C002       318            push AR2
054B 7A32       318            mov R2, #50
054D 120039     318            lcall ?Wait_Milli_Seconds
0550 D002       318            pop AR2 ; de-bounce
0552 208016     319       jb PROFILE_BUTTON, CHECK_PROFILE_END
0555 3080FD     320       jnb PROFILE_BUTTON, $
0558 E553       321       mov a, Profile
055A B40008     322       cjne a, #0, To_Profile1
055D 121000     323       lcall Load_Configuration2
0560 755301     324       mov Profile, #1
0563 8006       325       sjmp CHECK_PROFILE_END
0565            326   To_Profile1:
0565 120FD7     327       lcall Load_Configuration1
0568 755300     328       mov Profile, #0
056B            329   CHECK_PROFILE_END:
056B 22         330   ret
056C            331   
056C            332   
056C            333   ; Playback MACRO for sound --------------------------------------------------
056C            334   
                335   PLAYBACK_TEMP MAC
                336       ; ***play audio***
                337       ;cjne sound_flag, #0, $
                338       lcall Wait_Half_Second
                339       clr TR1 ; Stop Timer 1 ISR from playing previous request
                340       setb FLASH_CE
                341       ;setb sound_flag ; sound starts
                342       clr SPEAKER ; Turn off speaker
                343       clr FLASH_CE ; Enable SPI Flash
                344       mov a, #READ_BYTES
                345       lcall Send_SPI
                346       ; Set the initial position in memory where to start playing
                347       
                348       mov a, %0 ; change initial position
                349       lcall Send_SPI
                350       mov a, %1 ; next memory position
                351       lcall Send_SPI
                352       mov a, %2 ; next memory position
                353       lcall Send_SPI
                354       mov a, %0 ; request first byte to send to DAC
                355       lcall Send_SPI
                356       
                357       ; How many bytes to play?
                358       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
                359       mov w+1, %3 ; Load the middle byte of the number of bytes to play
                360       mov w+0, %4 ; Load the low byte of the number of bytes to play
                361       
                362       
                363       setb SPEAKER ;Turn on speaker
                364       setb TR1 ;Start playback by enabling Timer1
                365       ;clr sound_flag ; sound ends
                366   ENDMAC
056C            367   
056C            368   
                369   PLAYBACK_MUSIC MAC
                370       ; ***play audio***
                371       ;cjne sound_flag, #0, $
                372       
                373       clr TR1 ; Stop Timer 1 ISR from playing previous request
                374       setb FLASH_CE
                375       ;setb sound_flag ; sound starts
                376       clr SPEAKER ; Turn off speaker
                377       clr FLASH_CE ; Enable SPI Flash
                378       mov a, #READ_BYTES
                379       lcall Send_SPI
                380       ; Set the initial position in memory where to start playing
                381       
                382       mov a, %0 ; change initial position
                383       lcall Send_SPI
                384       mov a, %1 ; next memory position
                385       lcall Send_SPI
                386       mov a, %2 ; next memory position
                387       lcall Send_SPI
                388       mov a, %0 ; request first byte to send to DAC
                389       lcall Send_SPI
                390       
                391       ; How many bytes to play?
                392       mov w+2, #0x02 ; Load the high byte of the number of bytes to play
                393       mov w+1, %3 ; Load the middle byte of the number of bytes to play
                394       mov w+0, %4 ; Load the low byte of the number of bytes to play
                395       
                396       
                397       setb SPEAKER ;Turn on speaker
                398       setb TR1 ;Start playback by enabling Timer1
                399       ;clr sound_flag ; sound ends
                400   ENDMAC
056C            401   
056C            402   CHECK_SPAN_OR_ENGL:
056C            403   
056C 208742     404       jb SPAN_ENG_BUTTON, CHECK_SPAN_OR_ENGL_END ; if button not pressed, stop checking
056F C002       405            push AR2
0571 7A32       405            mov R2, #50
0573 120039     405            lcall ?Wait_Milli_Seconds
0576 D002       405            pop AR2 ; debounce time
0578 208736     406            jb SPAN_ENG_BUTTON, CHECK_SPAN_OR_ENGL_END ; if button not pressed, stop checking
057B 3087FD     407            jnb SPAN_ENG_BUTTON, $ ; loop while the button is pressed
057E            408       
057E            409       ; ***play audio***
057E            409       ;cjne sound_flag, #0, $
057E 121130     409       lcall Wait_Half_Second
0581 C28E       409       clr TR1 ; Stop Timer 1 ISR from playing previous request
0583 D2A5       409       setb FLASH_CE
0585            409       ;setb sound_flag ; sound starts
0585 C2A6       409       clr SPEAKER ; Turn off speaker
0587 C2A5       409       clr FLASH_CE ; Enable SPI Flash
0589 7403       409       mov a, #READ_BYTES
058B 12040D     409       lcall Send_SPI
058E            409       ; Set the initial position in memory where to start playing
058E            409       
058E 7401       409       mov a, #0x01 ; change initial position
0590 12040D     409       lcall Send_SPI
0593 7493       409       mov a, #0x93 ; next memory position
0595 12040D     409       lcall Send_SPI
0598 7484       409       mov a, #0x84 ; next memory position
059A 12040D     409       lcall Send_SPI
059D 7401       409       mov a, #0x01 ; request first byte to send to DAC
059F 12040D     409       lcall Send_SPI
05A2            409       
05A2            409       ; How many bytes to play?
05A2 754E00     409       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
05A5 754D17     409       mov w+1, #0x17 ; Load the middle byte of the number of bytes to play
05A8 754C70     409       mov w+0, #0x70 ; Load the low byte of the number of bytes to play
05AB            409       
05AB            409       
05AB D2A6       409       setb SPEAKER ;Turn on speaker
05AD D28E       409       setb TR1 ;Start playback by enabling Timer1
05AF            409       ;clr sound_flag ; sound ends ;one
05AF B204       410       cpl SPAN_ENG
05B1            411       ;mov a, K_or_C
05B1            412       ;anl a,
05B1            413       ;anl a, #00000001B  ; We need only the two least significant bits
05B1            414   
05B1            415   
05B1            416   CHECK_SPAN_OR_ENGL_END:
05B1 22         417   ret
05B2            418   ;****ENGLISH SOUND FSM--------------------------------------------------------
05B2            419   
05B2            420   SOUND_FSM:
05B2            421   state_0_sound:
05B2            422   ;check if 5 seconds has passed, if yes go to state 1, if no exit function 
05B2 300104     423       jnb five_seconds_flag, Sound_ret
05B5 C201       424       clr five_seconds_flag
05B7 8001       425       sjmp state_1_sound
05B9            426   Sound_ret:
05B9 22         427       ret
05BA            428   
05BA            429   state_1_sound:
05BA            430   ; check if temp is greater than or equal to 100, if yes go to state 2
05BA            431   ; check if temp is less than 100, if yes go to state 4
05BA E53B       432       mov a, Temp_oven
05BC 9464       433       subb a, #100
05BE 5002       434       jnc state_2_sound_hop
05C0 4002       435       jc state_4_sound_hop
05C2            436   
05C2            437       state_2_sound_hop:
05C2 8003       438           sjmp state_2_sound
05C4            439   
05C4            440       state_4_sound_hop:
05C4 0206C0     441           ljmp state_4_sound
05C7            442   
05C7            443   state_2_sound:
05C7            444   ;divide temp by 100, if it is 1 play sound: "100", if it is 2 play sound: "200"
05C7            445   ; go to state_3_sound
05C7 75F064     446       mov b, #100
05CA E53B       447       mov a, Temp_oven
05CC 84         448       div ab
05CD 9401       449       subb a, #1
05CF 600A       450       jz play_sound_100
05D1            451   
05D1 75F064     452       mov b, #100
05D4 E53B       453       mov a, Temp_oven
05D6 84         454       div ab
05D7 9402       455       subb a, #2
05D9 6065       456       jz play_sound_200
05DB            457      
05DB            458       play_sound_100: 
05DB            459       ; ***play audio***
05DB            459       ;cjne sound_flag, #0, $
05DB 121130     459       lcall Wait_Half_Second
05DE C28E       459       clr TR1 ; Stop Timer 1 ISR from playing previous request
05E0 D2A5       459       setb FLASH_CE
05E2            459       ;setb sound_flag ; sound starts
05E2 C2A6       459       clr SPEAKER ; Turn off speaker
05E4 C2A5       459       clr FLASH_CE ; Enable SPI Flash
05E6 7403       459       mov a, #READ_BYTES
05E8 12040D     459       lcall Send_SPI
05EB            459       ; Set the initial position in memory where to start playing
05EB            459       
05EB 7401       459       mov a, #0x01 ; change initial position
05ED 12040D     459       lcall Send_SPI
05F0 7493       459       mov a, #0x93 ; next memory position
05F2 12040D     459       lcall Send_SPI
05F5 7484       459       mov a, #0x84 ; next memory position
05F7 12040D     459       lcall Send_SPI
05FA 7401       459       mov a, #0x01 ; request first byte to send to DAC
05FC 12040D     459       lcall Send_SPI
05FF            459       
05FF            459       ; How many bytes to play?
05FF 754E00     459       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0602 754D36     459       mov w+1, #0x36 ; Load the middle byte of the number of bytes to play
0605 754CB0     459       mov w+0, #0xb0 ; Load the low byte of the number of bytes to play
0608            459       
0608            459       
0608 D2A6       459       setb SPEAKER ;Turn on speaker
060A D28E       459       setb TR1 ;Start playback by enabling Timer1
060C            459       ;clr sound_flag ; sound ends ;one
060C            460       ; ***play audio***
060C            460       ;cjne sound_flag, #0, $
060C 121130     460       lcall Wait_Half_Second
060F C28E       460       clr TR1 ; Stop Timer 1 ISR from playing previous request
0611 D2A5       460       setb FLASH_CE
0613            460       ;setb sound_flag ; sound starts
0613 C2A6       460       clr SPEAKER ; Turn off speaker
0615 C2A5       460       clr FLASH_CE ; Enable SPI Flash
0617 7403       460       mov a, #READ_BYTES
0619 12040D     460       lcall Send_SPI
061C            460       ; Set the initial position in memory where to start playing
061C            460       
061C 7405       460       mov a, #0x05 ; change initial position
061E 12040D     460       lcall Send_SPI
0621 7409       460       mov a, #0x09 ; next memory position
0623 12040D     460       lcall Send_SPI
0626 7410       460       mov a, #0x10 ; next memory position
0628 12040D     460       lcall Send_SPI
062B 7405       460       mov a, #0x05 ; request first byte to send to DAC
062D 12040D     460       lcall Send_SPI
0630            460       
0630            460       ; How many bytes to play?
0630 754E00     460       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0633 754D27     460       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
0636 754C10     460       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
0639            460       
0639            460       
0639 D2A6       460       setb SPEAKER ;Turn on speaker
063B D28E       460       setb TR1 ;Start playback by enabling Timer1
063D            460       ;clr sound_flag ; sound ends ;hundred
063D 0206A5     461           ljmp state_3_sound
0640            462   
0640            463       play_sound_200:
0640            464       ; ***play audio***
0640            464       ;cjne sound_flag, #0, $
0640 121130     464       lcall Wait_Half_Second
0643 C28E       464       clr TR1 ; Stop Timer 1 ISR from playing previous request
0645 D2A5       464       setb FLASH_CE
0647            464       ;setb sound_flag ; sound starts
0647 C2A6       464       clr SPEAKER ; Turn off speaker
0649 C2A5       464       clr FLASH_CE ; Enable SPI Flash
064B 7403       464       mov a, #READ_BYTES
064D 12040D     464       lcall Send_SPI
0650            464       ; Set the initial position in memory where to start playing
0650            464       
0650 7401       464       mov a, #0x01 ; change initial position
0652 12040D     464       lcall Send_SPI
0655 74C7       464       mov a, #0xc7 ; next memory position
0657 12040D     464       lcall Send_SPI
065A 7414       464       mov a, #0x14 ; next memory position
065C 12040D     464       lcall Send_SPI
065F 7401       464       mov a, #0x01 ; request first byte to send to DAC
0661 12040D     464       lcall Send_SPI
0664            464       
0664            464       ; How many bytes to play?
0664 754E00     464       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0667 754D13     464       mov w+1, #0x13 ; Load the middle byte of the number of bytes to play
066A 754C88     464       mov w+0, #0x88 ; Load the low byte of the number of bytes to play
066D            464       
066D            464       
066D D2A6       464       setb SPEAKER ;Turn on speaker
066F D28E       464       setb TR1 ;Start playback by enabling Timer1
0671            464       ;clr sound_flag ; sound ends ;two
0671            465       ; ***play audio***
0671            465       ;cjne sound_flag, #0, $
0671 121130     465       lcall Wait_Half_Second
0674 C28E       465       clr TR1 ; Stop Timer 1 ISR from playing previous request
0676 D2A5       465       setb FLASH_CE
0678            465       ;setb sound_flag ; sound starts
0678 C2A6       465       clr SPEAKER ; Turn off speaker
067A C2A5       465       clr FLASH_CE ; Enable SPI Flash
067C 7403       465       mov a, #READ_BYTES
067E 12040D     465       lcall Send_SPI
0681            465       ; Set the initial position in memory where to start playing
0681            465       
0681 7405       465       mov a, #0x05 ; change initial position
0683 12040D     465       lcall Send_SPI
0686 7409       465       mov a, #0x09 ; next memory position
0688 12040D     465       lcall Send_SPI
068B 7410       465       mov a, #0x10 ; next memory position
068D 12040D     465       lcall Send_SPI
0690 7405       465       mov a, #0x05 ; request first byte to send to DAC
0692 12040D     465       lcall Send_SPI
0695            465       
0695            465       ; How many bytes to play?
0695 754E00     465       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0698 754D27     465       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
069B 754C10     465       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
069E            465       
069E            465       
069E D2A6       465       setb SPEAKER ;Turn on speaker
06A0 D28E       465       setb TR1 ;Start playback by enabling Timer1
06A2            465       ;clr sound_flag ; sound ends ;hundred
06A2 0206A5     466           ljmp state_3_sound
06A5            467   
06A5            468   state_3_sound:
06A5            469   ; check remainder of temp, if it is 0, exit
06A5            470   ; if not 0, go to state_4_sound
06A5            471   
06A5            472   
06A5 75F064     473       mov b, #100
06A8 E53B       474       mov a, Temp_oven
06AA 95F0       475       subb a, b
06AC E5F0       476       mov a, b
06AE 600D       477       jz state_3_sound_hop
06B0            478       
06B0 75F0C8     479       mov b, #200
06B3 E53B       480       mov a, Temp_oven
06B5 95F0       481       subb a, b
06B7 E5F0       482       mov a, b
06B9 6002       483       jz state_3_sound_hop
06BB            484   
06BB 8003       485       sjmp state_4_sound
06BD            486   
06BD            487       state_3_sound_hop:
06BD 0205B9     488           ljmp Sound_ret
06C0            489   
06C0            490   state_4_sound:
06C0            491   ; if T % 100 greater or equal to 20, go to state_5_sound,
06C0 75F064     492       mov b, #100
06C3 E53B       493       mov a, Temp_oven
06C5 84         494       div ab
06C6            495       ;mov R0, b
06C6 E5F0       496       mov a, b 
06C8            497   
06C8            498   
06C8 9414       499       subb a, #20
06CA 5027       500       jnc state_5_sound
06CC 6025       501       jz state_5_sound
06CE E4         502       clr a
06CF            503   ; if T % 100 is less than 10, go to state_6_sound
06CF 75F064     504       mov b, #100
06D2 E53B       505       mov a, Temp_oven
06D4 84         506       div ab
06D5 E5F0       507       mov a, b
06D7 940A       508       subb a, #10
06D9 4015       509       jc state_6_sound_hop0
06DB            510       
06DB            511       ;mov a, b
06DB            512       
06DB            513       ; ubb a, #0
06DB            514       ;jc state_6_sound_hop0
06DB            515       ;clr a
06DB            516   ; if T % 100 is greater than or equal to 10 and less than 20, go to state_7_sound
06DB            517   
06DB 75F064     518       mov b, #100
06DE E53B       519       mov a, Temp_oven
06E0 84         520       div ab
06E1 E5F0       521       mov a, b
06E3 940A       522       subb a, #10
06E5 6000       523       jz and_branch
06E7            524   
06E7            525       and_branch:
06E7 E5F0       526           mov a, b
06E9 9414       527           subb a, #20
06EB 4000       528           jc state_7_sound_hop0
06ED            529       
06ED            530       state_7_sound_hop0:
06ED 020AB4     531           ljmp state_7_sound
06F0            532   
06F0            533       state_6_sound_hop0:
06F0 0208B4     534           ljmp state_6_sound
06F3            535       
06F3            536   
06F3            537   state_5_sound:
06F3            538   ; play number from 20 to 90 in decades (20, 30, 40, 50, 60, 70, 80, 90), based off remainder from temp divided by 100
06F3            539   ; if (T % 100) % 10 is not equal to 0, go to state_6_sound
06F3            540   ; if (T % 100) % 10 is equal to 0, go to state_8_sound
06F3            541   
06F3            542       play_sound:
06F3            543           ;ljmp PLAYBACK_TEMP
06F3 E53B       544           mov a, Temp_oven
06F5 75F064     545           mov b, #100
06F8 84         546           div ab
06F9 E5F0       547           mov a, b
06FB 75F00A     548           mov b, #10
06FE 84         549           div ab
06FF B40234     550           cjne a, #2, play_30
0702            551           ;mov    
0702            552   
0702            553           play_20:
0702            554       ; ***play audio***
0702            554       ;cjne sound_flag, #0, $
0702 121130     554       lcall Wait_Half_Second
0705 C28E       554       clr TR1 ; Stop Timer 1 ISR from playing previous request
0707 D2A5       554       setb FLASH_CE
0709            554       ;setb sound_flag ; sound starts
0709 C2A6       554       clr SPEAKER ; Turn off speaker
070B C2A5       554       clr FLASH_CE ; Enable SPI Flash
070D 7403       554       mov a, #READ_BYTES
070F 12040D     554       lcall Send_SPI
0712            554       ; Set the initial position in memory where to start playing
0712            554       
0712 7403       554       mov a, #0x03 ; change initial position
0714 12040D     554       lcall Send_SPI
0717 74EF       554       mov a, #0xef ; next memory position
0719 12040D     554       lcall Send_SPI
071C 74D0       554       mov a, #0xd0 ; next memory position
071E 12040D     554       lcall Send_SPI
0721 7403       554       mov a, #0x03 ; request first byte to send to DAC
0723 12040D     554       lcall Send_SPI
0726            554       
0726            554       ; How many bytes to play?
0726 754E00     554       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0729 754D27     554       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
072C 754C10     554       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
072F            554       
072F            554       
072F D2A6       554       setb SPEAKER ;Turn on speaker
0731 D28E       554       setb TR1 ;Start playback by enabling Timer1
0733            554       ;clr sound_flag ; sound ends
0733            555               ;lcall Wait_One_Second
0733 0208B1     556               ljmp state_6_sound_hop1
0736            557   
0736            558           play_30:
0736            559               
0736 B40334     560               cjne a, #3, play_40   
0739            561       ; ***play audio***
0739            561       ;cjne sound_flag, #0, $
0739 121130     561       lcall Wait_Half_Second
073C C28E       561       clr TR1 ; Stop Timer 1 ISR from playing previous request
073E D2A5       561       setb FLASH_CE
0740            561       ;setb sound_flag ; sound starts
0740 C2A6       561       clr SPEAKER ; Turn off speaker
0742 C2A5       561       clr FLASH_CE ; Enable SPI Flash
0744 7403       561       mov a, #READ_BYTES
0746 12040D     561       lcall Send_SPI
0749            561       ; Set the initial position in memory where to start playing
0749            561       
0749 7404       561       mov a, #0x04 ; change initial position
074B 12040D     561       lcall Send_SPI
074E 7416       561       mov a, #0x16 ; next memory position
0750 12040D     561       lcall Send_SPI
0753 74E0       561       mov a, #0xe0 ; next memory position
0755 12040D     561       lcall Send_SPI
0758 7404       561       mov a, #0x04 ; request first byte to send to DAC
075A 12040D     561       lcall Send_SPI
075D            561       
075D            561       ; How many bytes to play?
075D 754E00     561       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0760 754D23     561       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
0763 754C28     561       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
0766            561       
0766            561       
0766 D2A6       561       setb SPEAKER ;Turn on speaker
0768 D28E       561       setb TR1 ;Start playback by enabling Timer1
076A            561       ;clr sound_flag ; sound ends
076A 0208B1     562               ljmp state_6_sound_hop1
076D            563   
076D            564           play_40:
076D            565               
076D B40434     566               cjne a, #4, play_50  
0770            567       ; ***play audio***
0770            567       ;cjne sound_flag, #0, $
0770 121130     567       lcall Wait_Half_Second
0773 C28E       567       clr TR1 ; Stop Timer 1 ISR from playing previous request
0775 D2A5       567       setb FLASH_CE
0777            567       ;setb sound_flag ; sound starts
0777 C2A6       567       clr SPEAKER ; Turn off speaker
0779 C2A5       567       clr FLASH_CE ; Enable SPI Flash
077B 7403       567       mov a, #READ_BYTES
077D 12040D     567       lcall Send_SPI
0780            567       ; Set the initial position in memory where to start playing
0780            567       
0780 7404       567       mov a, #0x04 ; change initial position
0782 12040D     567       lcall Send_SPI
0785 743D       567       mov a, #0x3d ; next memory position
0787 12040D     567       lcall Send_SPI
078A 74F0       567       mov a, #0xf0 ; next memory position
078C 12040D     567       lcall Send_SPI
078F 7404       567       mov a, #0x04 ; request first byte to send to DAC
0791 12040D     567       lcall Send_SPI
0794            567       
0794            567       ; How many bytes to play?
0794 754E00     567       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0797 754D1F     567       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
079A 754C40     567       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
079D            567       
079D            567       
079D D2A6       567       setb SPEAKER ;Turn on speaker
079F D28E       567       setb TR1 ;Start playback by enabling Timer1
07A1            567       ;clr sound_flag ; sound ends
07A1 0208B1     568               ljmp state_6_sound_hop1
07A4            569   
07A4            570           play_50:
07A4            571              
07A4 B40534     572               cjne a, #5, play_60  
07A7            573       ; ***play audio***
07A7            573       ;cjne sound_flag, #0, $
07A7 121130     573       lcall Wait_Half_Second
07AA C28E       573       clr TR1 ; Stop Timer 1 ISR from playing previous request
07AC D2A5       573       setb FLASH_CE
07AE            573       ;setb sound_flag ; sound starts
07AE C2A6       573       clr SPEAKER ; Turn off speaker
07B0 C2A5       573       clr FLASH_CE ; Enable SPI Flash
07B2 7403       573       mov a, #READ_BYTES
07B4 12040D     573       lcall Send_SPI
07B7            573       ; Set the initial position in memory where to start playing
07B7            573       
07B7 7404       573       mov a, #0x04 ; change initial position
07B9 12040D     573       lcall Send_SPI
07BC 7451       573       mov a, #0x51 ; next memory position
07BE 12040D     573       lcall Send_SPI
07C1 7478       573       mov a, #0x78 ; next memory position
07C3 12040D     573       lcall Send_SPI
07C6 7404       573       mov a, #0x04 ; request first byte to send to DAC
07C8 12040D     573       lcall Send_SPI
07CB            573       
07CB            573       ; How many bytes to play?
07CB 754E00     573       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
07CE 754D23     573       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
07D1 754C28     573       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
07D4            573       
07D4            573       
07D4 D2A6       573       setb SPEAKER ;Turn on speaker
07D6 D28E       573       setb TR1 ;Start playback by enabling Timer1
07D8            573       ;clr sound_flag ; sound ends
07D8 0208B1     574               ljmp state_6_sound_hop1
07DB            575   
07DB            576           play_60:
07DB            577               
07DB B40634     578               cjne a, #6, play_70  
07DE            579       ; ***play audio***
07DE            579       ;cjne sound_flag, #0, $
07DE 121130     579       lcall Wait_Half_Second
07E1 C28E       579       clr TR1 ; Stop Timer 1 ISR from playing previous request
07E3 D2A5       579       setb FLASH_CE
07E5            579       ;setb sound_flag ; sound starts
07E5 C2A6       579       clr SPEAKER ; Turn off speaker
07E7 C2A5       579       clr FLASH_CE ; Enable SPI Flash
07E9 7403       579       mov a, #READ_BYTES
07EB 12040D     579       lcall Send_SPI
07EE            579       ; Set the initial position in memory where to start playing
07EE            579       
07EE 7404       579       mov a, #0x04 ; change initial position
07F0 12040D     579       lcall Send_SPI
07F3 7474       579       mov a, #0x74 ; next memory position
07F5 12040D     579       lcall Send_SPI
07F8 74A0       579       mov a, #0xa0 ; next memory position
07FA 12040D     579       lcall Send_SPI
07FD 7404       579       mov a, #0x04 ; request first byte to send to DAC
07FF 12040D     579       lcall Send_SPI
0802            579       
0802            579       ; How many bytes to play?
0802 754E00     579       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0805 754D27     579       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
0808 754C10     579       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
080B            579       
080B            579       
080B D2A6       579       setb SPEAKER ;Turn on speaker
080D D28E       579       setb TR1 ;Start playback by enabling Timer1
080F            579       ;clr sound_flag ; sound ends
080F 0208B1     580               ljmp state_6_sound_hop1
0812            581   
0812            582           play_70:
0812            583              
0812 B40734     584               cjne a, #7, play_80  
0815            585       ; ***play audio***
0815            585       ;cjne sound_flag, #0, $
0815 121130     585       lcall Wait_Half_Second
0818 C28E       585       clr TR1 ; Stop Timer 1 ISR from playing previous request
081A D2A5       585       setb FLASH_CE
081C            585       ;setb sound_flag ; sound starts
081C C2A6       585       clr SPEAKER ; Turn off speaker
081E C2A5       585       clr FLASH_CE ; Enable SPI Flash
0820 7403       585       mov a, #READ_BYTES
0822 12040D     585       lcall Send_SPI
0825            585       ; Set the initial position in memory where to start playing
0825            585       
0825 7404       585       mov a, #0x04 ; change initial position
0827 12040D     585       lcall Send_SPI
082A 749B       585       mov a, #0x9b ; next memory position
082C 12040D     585       lcall Send_SPI
082F 74B0       585       mov a, #0xb0 ; next memory position
0831 12040D     585       lcall Send_SPI
0834 7404       585       mov a, #0x04 ; request first byte to send to DAC
0836 12040D     585       lcall Send_SPI
0839            585       
0839            585       ; How many bytes to play?
0839 754E00     585       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
083C 754D32     585       mov w+1, #0x32 ; Load the middle byte of the number of bytes to play
083F 754CC8     585       mov w+0, #0xc8 ; Load the low byte of the number of bytes to play
0842            585       
0842            585       
0842 D2A6       585       setb SPEAKER ;Turn on speaker
0844 D28E       585       setb TR1 ;Start playback by enabling Timer1
0846            585       ;clr sound_flag ; sound ends
0846 0208B1     586               ljmp state_6_sound_hop1
0849            587   
0849            588           play_80:
0849            589               
0849 B40834     590               cjne a, #8, play_90  
084C            591       ; ***play audio***
084C            591       ;cjne sound_flag, #0, $
084C 121130     591       lcall Wait_Half_Second
084F C28E       591       clr TR1 ; Stop Timer 1 ISR from playing previous request
0851 D2A5       591       setb FLASH_CE
0853            591       ;setb sound_flag ; sound starts
0853 C2A6       591       clr SPEAKER ; Turn off speaker
0855 C2A5       591       clr FLASH_CE ; Enable SPI Flash
0857 7403       591       mov a, #READ_BYTES
0859 12040D     591       lcall Send_SPI
085C            591       ; Set the initial position in memory where to start playing
085C            591       
085C 7404       591       mov a, #0x04 ; change initial position
085E 12040D     591       lcall Send_SPI
0861 74C6       591       mov a, #0xc6 ; next memory position
0863 12040D     591       lcall Send_SPI
0866 74A8       591       mov a, #0xa8 ; next memory position
0868 12040D     591       lcall Send_SPI
086B 7404       591       mov a, #0x04 ; request first byte to send to DAC
086D 12040D     591       lcall Send_SPI
0870            591       
0870            591       ; How many bytes to play?
0870 754E00     591       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0873 754D23     591       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
0876 754C28     591       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
0879            591       
0879            591       
0879 D2A6       591       setb SPEAKER ;Turn on speaker
087B D28E       591       setb TR1 ;Start playback by enabling Timer1
087D            591       ;clr sound_flag ; sound ends
087D 0208B1     592               ljmp state_6_sound_hop1
0880            593   
0880            594           play_90:
0880            595       ; ***play audio***
0880            595       ;cjne sound_flag, #0, $
0880 121130     595       lcall Wait_Half_Second
0883 C28E       595       clr TR1 ; Stop Timer 1 ISR from playing previous request
0885 D2A5       595       setb FLASH_CE
0887            595       ;setb sound_flag ; sound starts
0887 C2A6       595       clr SPEAKER ; Turn off speaker
0889 C2A5       595       clr FLASH_CE ; Enable SPI Flash
088B 7403       595       mov a, #READ_BYTES
088D 12040D     595       lcall Send_SPI
0890            595       ; Set the initial position in memory where to start playing
0890            595       
0890 7404       595       mov a, #0x04 ; change initial position
0892 12040D     595       lcall Send_SPI
0895 74ED       595       mov a, #0xed ; next memory position
0897 12040D     595       lcall Send_SPI
089A 74B8       595       mov a, #0xb8 ; next memory position
089C 12040D     595       lcall Send_SPI
089F 7404       595       mov a, #0x04 ; request first byte to send to DAC
08A1 12040D     595       lcall Send_SPI
08A4            595       
08A4            595       ; How many bytes to play?
08A4 754E00     595       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
08A7 754D1F     595       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
08AA 754C40     595       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
08AD            595       
08AD            595       
08AD D2A6       595       setb SPEAKER ;Turn on speaker
08AF D28E       595       setb TR1 ;Start playback by enabling Timer1
08B1            595       ;clr sound_flag ; sound ends
08B1            596   
08B1            597       state_6_sound_hop1:
08B1 0208B4     598           ljmp state_6_sound
08B4            599           
08B4            600       ;state_8_hop0:
08B4            601           ;ljmp state_6_sound ;state_8_sound
08B4            602   
08B4            603   
08B4            604   state_6_sound:
08B4            605   ; play 1 - 9
08B4            606       ;ljmp PLAYBACK_TEMP
08B4 75F064     607       mov b, #100
08B7 E53B       608       mov a, Temp_oven
08B9 84         609       div ab
08BA E5F0       610       mov a, b
08BC 75F00A     611       mov b, #10
08BF 84         612       div ab
08C0 E5F0       613       mov a, b
08C2            614       
08C2 B40003     615       cjne a, #0x00, play_1
08C5 020AB1     616       ljmp state_8_hop1
08C8            617   
08C8            618       play_1:
08C8 B40134     619           cjne a, #0x01, play_2
08CB            620       ; ***play audio***
08CB            620       ;cjne sound_flag, #0, $
08CB 121130     620       lcall Wait_Half_Second
08CE C28E       620       clr TR1 ; Stop Timer 1 ISR from playing previous request
08D0 D2A5       620       setb FLASH_CE
08D2            620       ;setb sound_flag ; sound starts
08D2 C2A6       620       clr SPEAKER ; Turn off speaker
08D4 C2A5       620       clr FLASH_CE ; Enable SPI Flash
08D6 7403       620       mov a, #READ_BYTES
08D8 12040D     620       lcall Send_SPI
08DB            620       ; Set the initial position in memory where to start playing
08DB            620       
08DB 7401       620       mov a, #0x01 ; change initial position
08DD 12040D     620       lcall Send_SPI
08E0 7493       620       mov a, #0x93 ; next memory position
08E2 12040D     620       lcall Send_SPI
08E5 7484       620       mov a, #0x84 ; next memory position
08E7 12040D     620       lcall Send_SPI
08EA 7401       620       mov a, #0x01 ; request first byte to send to DAC
08EC 12040D     620       lcall Send_SPI
08EF            620       
08EF            620       ; How many bytes to play?
08EF 754E00     620       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
08F2 754D36     620       mov w+1, #0x36 ; Load the middle byte of the number of bytes to play
08F5 754CB0     620       mov w+0, #0xb0 ; Load the low byte of the number of bytes to play
08F8            620       
08F8            620       
08F8 D2A6       620       setb SPEAKER ;Turn on speaker
08FA D28E       620       setb TR1 ;Start playback by enabling Timer1
08FC            620       ;clr sound_flag ; sound ends 
08FC 020AB1     621           ljmp state_8_hop1
08FF            622   
08FF            623       play_2:
08FF B40234     624           cjne a, #0x02, play_3
0902            625       ; ***play audio***
0902            625       ;cjne sound_flag, #0, $
0902 121130     625       lcall Wait_Half_Second
0905 C28E       625       clr TR1 ; Stop Timer 1 ISR from playing previous request
0907 D2A5       625       setb FLASH_CE
0909            625       ;setb sound_flag ; sound starts
0909 C2A6       625       clr SPEAKER ; Turn off speaker
090B C2A5       625       clr FLASH_CE ; Enable SPI Flash
090D 7403       625       mov a, #READ_BYTES
090F 12040D     625       lcall Send_SPI
0912            625       ; Set the initial position in memory where to start playing
0912            625       
0912 7401       625       mov a, #0x01 ; change initial position
0914 12040D     625       lcall Send_SPI
0917 74C7       625       mov a, #0xc7 ; next memory position
0919 12040D     625       lcall Send_SPI
091C 7414       625       mov a, #0x14 ; next memory position
091E 12040D     625       lcall Send_SPI
0921 7401       625       mov a, #0x01 ; request first byte to send to DAC
0923 12040D     625       lcall Send_SPI
0926            625       
0926            625       ; How many bytes to play?
0926 754E00     625       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0929 754D13     625       mov w+1, #0x13 ; Load the middle byte of the number of bytes to play
092C 754C88     625       mov w+0, #0x88 ; Load the low byte of the number of bytes to play
092F            625       
092F            625       
092F D2A6       625       setb SPEAKER ;Turn on speaker
0931 D28E       625       setb TR1 ;Start playback by enabling Timer1
0933            625       ;clr sound_flag ; sound ends
0933 020AB1     626           ljmp state_8_hop1
0936            627   
0936            628       play_3:
0936 B40334     629           cjne a, #0x03, play_4
0939            630       ; ***play audio***
0939            630       ;cjne sound_flag, #0, $
0939 121130     630       lcall Wait_Half_Second
093C C28E       630       clr TR1 ; Stop Timer 1 ISR from playing previous request
093E D2A5       630       setb FLASH_CE
0940            630       ;setb sound_flag ; sound starts
0940 C2A6       630       clr SPEAKER ; Turn off speaker
0942 C2A5       630       clr FLASH_CE ; Enable SPI Flash
0944 7403       630       mov a, #READ_BYTES
0946 12040D     630       lcall Send_SPI
0949            630       ; Set the initial position in memory where to start playing
0949            630       
0949 7401       630       mov a, #0x01 ; change initial position
094B 12040D     630       lcall Send_SPI
094E 74D6       630       mov a, #0xd6 ; next memory position
0950 12040D     630       lcall Send_SPI
0953 7468       630       mov a, #0x68 ; next memory position
0955 12040D     630       lcall Send_SPI
0958 7401       630       mov a, #0x01 ; request first byte to send to DAC
095A 12040D     630       lcall Send_SPI
095D            630       
095D            630       ; How many bytes to play?
095D 754E00     630       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0960 754D23     630       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
0963 754C28     630       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
0966            630       
0966            630       
0966 D2A6       630       setb SPEAKER ;Turn on speaker
0968 D28E       630       setb TR1 ;Start playback by enabling Timer1
096A            630       ;clr sound_flag ; sound ends
096A 020AB1     631           ljmp state_8_hop1
096D            632   
096D            633       play_4:
096D B40434     634           cjne a, #0x04, play_5
0970            635       ; ***play audio***
0970            635       ;cjne sound_flag, #0, $
0970 121130     635       lcall Wait_Half_Second
0973 C28E       635       clr TR1 ; Stop Timer 1 ISR from playing previous request
0975 D2A5       635       setb FLASH_CE
0977            635       ;setb sound_flag ; sound starts
0977 C2A6       635       clr SPEAKER ; Turn off speaker
0979 C2A5       635       clr FLASH_CE ; Enable SPI Flash
097B 7403       635       mov a, #READ_BYTES
097D 12040D     635       lcall Send_SPI
0980            635       ; Set the initial position in memory where to start playing
0980            635       
0980 7401       635       mov a, #0x01 ; change initial position
0982 12040D     635       lcall Send_SPI
0985 74F4       635       mov a, #0xf4 ; next memory position
0987 12040D     635       lcall Send_SPI
098A 7400       635       mov a, #0x00 ; next memory position
098C 12040D     635       lcall Send_SPI
098F 7401       635       mov a, #0x01 ; request first byte to send to DAC
0991 12040D     635       lcall Send_SPI
0994            635       
0994            635       ; How many bytes to play?
0994 754E00     635       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0997 754D1B     635       mov w+1, #0x1b ; Load the middle byte of the number of bytes to play
099A 754C58     635       mov w+0, #0x58 ; Load the low byte of the number of bytes to play
099D            635       
099D            635       
099D D2A6       635       setb SPEAKER ;Turn on speaker
099F D28E       635       setb TR1 ;Start playback by enabling Timer1
09A1            635       ;clr sound_flag ; sound ends
09A1 020AB1     636           ljmp state_8_hop1
09A4            637   
09A4            638       play_5:
09A4 B40534     639           cjne a, #0x05, play_6
09A7            640       ; ***play audio***
09A7            640       ;cjne sound_flag, #0, $
09A7 121130     640       lcall Wait_Half_Second
09AA C28E       640       clr TR1 ; Stop Timer 1 ISR from playing previous request
09AC D2A5       640       setb FLASH_CE
09AE            640       ;setb sound_flag ; sound starts
09AE C2A6       640       clr SPEAKER ; Turn off speaker
09B0 C2A5       640       clr FLASH_CE ; Enable SPI Flash
09B2 7403       640       mov a, #READ_BYTES
09B4 12040D     640       lcall Send_SPI
09B7            640       ; Set the initial position in memory where to start playing
09B7            640       
09B7 7402       640       mov a, #0x02 ; change initial position
09B9 12040D     640       lcall Send_SPI
09BC 7407       640       mov a, #0x07 ; next memory position
09BE 12040D     640       lcall Send_SPI
09C1 7488       640       mov a, #0x88 ; next memory position
09C3 12040D     640       lcall Send_SPI
09C6 7402       640       mov a, #0x02 ; request first byte to send to DAC
09C8 12040D     640       lcall Send_SPI
09CB            640       
09CB            640       ; How many bytes to play?
09CB 754E00     640       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
09CE 754D1B     640       mov w+1, #0x1b ; Load the middle byte of the number of bytes to play
09D1 754C58     640       mov w+0, #0x58 ; Load the low byte of the number of bytes to play
09D4            640       
09D4            640       
09D4 D2A6       640       setb SPEAKER ;Turn on speaker
09D6 D28E       640       setb TR1 ;Start playback by enabling Timer1
09D8            640       ;clr sound_flag ; sound ends
09D8 020AB1     641           ljmp state_8_hop1
09DB            642   
09DB            643       play_6:
09DB B40634     644           cjne a, #0x06, play_7
09DE            645       ; ***play audio***
09DE            645       ;cjne sound_flag, #0, $
09DE 121130     645       lcall Wait_Half_Second
09E1 C28E       645       clr TR1 ; Stop Timer 1 ISR from playing previous request
09E3 D2A5       645       setb FLASH_CE
09E5            645       ;setb sound_flag ; sound starts
09E5 C2A6       645       clr SPEAKER ; Turn off speaker
09E7 C2A5       645       clr FLASH_CE ; Enable SPI Flash
09E9 7403       645       mov a, #READ_BYTES
09EB 12040D     645       lcall Send_SPI
09EE            645       ; Set the initial position in memory where to start playing
09EE            645       
09EE 7402       645       mov a, #0x02 ; change initial position
09F0 12040D     645       lcall Send_SPI
09F3 7426       645       mov a, #0x26 ; next memory position
09F5 12040D     645       lcall Send_SPI
09F8 74C8       645       mov a, #0xc8 ; next memory position
09FA 12040D     645       lcall Send_SPI
09FD 7402       645       mov a, #0x02 ; request first byte to send to DAC
09FF 12040D     645       lcall Send_SPI
0A02            645       
0A02            645       ; How many bytes to play?
0A02 754E00     645       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0A05 754D1F     645       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
0A08 754C40     645       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
0A0B            645       
0A0B            645       
0A0B D2A6       645       setb SPEAKER ;Turn on speaker
0A0D D28E       645       setb TR1 ;Start playback by enabling Timer1
0A0F            645       ;clr sound_flag ; sound ends
0A0F 020AB1     646           ljmp state_8_hop1
0A12            647   
0A12            648       play_7:
0A12 B40734     649           cjne a, #0x07, play_8
0A15            650       ; ***play audio***
0A15            650       ;cjne sound_flag, #0, $
0A15 121130     650       lcall Wait_Half_Second
0A18 C28E       650       clr TR1 ; Stop Timer 1 ISR from playing previous request
0A1A D2A5       650       setb FLASH_CE
0A1C            650       ;setb sound_flag ; sound starts
0A1C C2A6       650       clr SPEAKER ; Turn off speaker
0A1E C2A5       650       clr FLASH_CE ; Enable SPI Flash
0A20 7403       650       mov a, #READ_BYTES
0A22 12040D     650       lcall Send_SPI
0A25            650       ; Set the initial position in memory where to start playing
0A25            650       
0A25 7402       650       mov a, #0x02 ; change initial position
0A27 12040D     650       lcall Send_SPI
0A2A 7436       650       mov a, #0x36 ; next memory position
0A2C 12040D     650       lcall Send_SPI
0A2F 7468       650       mov a, #0x68 ; next memory position
0A31 12040D     650       lcall Send_SPI
0A34 7402       650       mov a, #0x02 ; request first byte to send to DAC
0A36 12040D     650       lcall Send_SPI
0A39            650       
0A39            650       ; How many bytes to play?
0A39 754E00     650       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0A3C 754D23     650       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
0A3F 754C28     650       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
0A42            650       
0A42            650       
0A42 D2A6       650       setb SPEAKER ;Turn on speaker
0A44 D28E       650       setb TR1 ;Start playback by enabling Timer1
0A46            650       ;clr sound_flag ; sound ends
0A46 020AB1     651           ljmp state_8_hop1
0A49            652   
0A49            653       play_8:
0A49 B40834     654           cjne a, #0x08, play_9
0A4C            655       ; ***play audio***
0A4C            655       ;cjne sound_flag, #0, $
0A4C 121130     655       lcall Wait_Half_Second
0A4F C28E       655       clr TR1 ; Stop Timer 1 ISR from playing previous request
0A51 D2A5       655       setb FLASH_CE
0A53            655       ;setb sound_flag ; sound starts
0A53 C2A6       655       clr SPEAKER ; Turn off speaker
0A55 C2A5       655       clr FLASH_CE ; Enable SPI Flash
0A57 7403       655       mov a, #READ_BYTES
0A59 12040D     655       lcall Send_SPI
0A5C            655       ; Set the initial position in memory where to start playing
0A5C            655       
0A5C 7402       655       mov a, #0x02 ; change initial position
0A5E 12040D     655       lcall Send_SPI
0A61 7457       655       mov a, #0x57 ; next memory position
0A63 12040D     655       lcall Send_SPI
0A66 749C       655       mov a, #0x9c ; next memory position
0A68 12040D     655       lcall Send_SPI
0A6B 7402       655       mov a, #0x02 ; request first byte to send to DAC
0A6D 12040D     655       lcall Send_SPI
0A70            655       
0A70            655       ; How many bytes to play?
0A70 754E00     655       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0A73 754D1B     655       mov w+1, #0x1b ; Load the middle byte of the number of bytes to play
0A76 754C58     655       mov w+0, #0x58 ; Load the low byte of the number of bytes to play
0A79            655       
0A79            655       
0A79 D2A6       655       setb SPEAKER ;Turn on speaker
0A7B D28E       655       setb TR1 ;Start playback by enabling Timer1
0A7D            655       ;clr sound_flag ; sound ends
0A7D 020AB1     656           ljmp state_8_hop1
0A80            657   
0A80            658       play_9:
0A80            659       ; ***play audio***
0A80            659       ;cjne sound_flag, #0, $
0A80 121130     659       lcall Wait_Half_Second
0A83 C28E       659       clr TR1 ; Stop Timer 1 ISR from playing previous request
0A85 D2A5       659       setb FLASH_CE
0A87            659       ;setb sound_flag ; sound starts
0A87 C2A6       659       clr SPEAKER ; Turn off speaker
0A89 C2A5       659       clr FLASH_CE ; Enable SPI Flash
0A8B 7403       659       mov a, #READ_BYTES
0A8D 12040D     659       lcall Send_SPI
0A90            659       ; Set the initial position in memory where to start playing
0A90            659       
0A90 7402       659       mov a, #0x02 ; change initial position
0A92 12040D     659       lcall Send_SPI
0A95 7469       659       mov a, #0x69 ; next memory position
0A97 12040D     659       lcall Send_SPI
0A9A 7430       659       mov a, #0x30 ; next memory position
0A9C 12040D     659       lcall Send_SPI
0A9F 7402       659       mov a, #0x02 ; request first byte to send to DAC
0AA1 12040D     659       lcall Send_SPI
0AA4            659       
0AA4            659       ; How many bytes to play?
0AA4 754E00     659       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0AA7 754D1F     659       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
0AAA 754C40     659       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
0AAD            659       
0AAD            659       
0AAD D2A6       659       setb SPEAKER ;Turn on speaker
0AAF D28E       659       setb TR1 ;Start playback by enabling Timer1
0AB1            659       ;clr sound_flag ; sound ends
0AB1            660   
0AB1            661   state_8_hop1:
0AB1            662   ; go to state_8_sound
0AB1 020CDF     663       ljmp state_8_sound
0AB4            664   
0AB4            665   
0AB4            666   state_7_sound:
0AB4            667   ; play 10 - 19
0AB4            668       ;ljmp PLAYBACK_TEMP
0AB4 75F064     669       mov b, #100
0AB7 E53B       670       mov a, Temp_oven
0AB9 84         671       div ab
0ABA E5F0       672       mov a, b
0ABC B40A34     673       cjne a, #0x0a, play_11
0ABF            674       
0ABF            675       ; ***play audio***
0ABF            675       ;cjne sound_flag, #0, $
0ABF 121130     675       lcall Wait_Half_Second
0AC2 C28E       675       clr TR1 ; Stop Timer 1 ISR from playing previous request
0AC4 D2A5       675       setb FLASH_CE
0AC6            675       ;setb sound_flag ; sound starts
0AC6 C2A6       675       clr SPEAKER ; Turn off speaker
0AC8 C2A5       675       clr FLASH_CE ; Enable SPI Flash
0ACA 7403       675       mov a, #READ_BYTES
0ACC 12040D     675       lcall Send_SPI
0ACF            675       ; Set the initial position in memory where to start playing
0ACF            675       
0ACF 7402       675       mov a, #0x02 ; change initial position
0AD1 12040D     675       lcall Send_SPI
0AD4 7484       675       mov a, #0x84 ; next memory position
0AD6 12040D     675       lcall Send_SPI
0AD9 7488       675       mov a, #0x88 ; next memory position
0ADB 12040D     675       lcall Send_SPI
0ADE 7402       675       mov a, #0x02 ; request first byte to send to DAC
0AE0 12040D     675       lcall Send_SPI
0AE3            675       
0AE3            675       ; How many bytes to play?
0AE3 754E00     675       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0AE6 754D17     675       mov w+1, #0x17 ; Load the middle byte of the number of bytes to play
0AE9 754C70     675       mov w+0, #0x70 ; Load the low byte of the number of bytes to play
0AEC            675       
0AEC            675       
0AEC D2A6       675       setb SPEAKER ;Turn on speaker
0AEE D28E       675       setb TR1 ;Start playback by enabling Timer1
0AF0            675       ;clr sound_flag ; sound ends
0AF0 020CDC     676       ljmp state_8_hop2
0AF3            677   
0AF3            678       play_11:
0AF3 B40B34     679           cjne a, #0x0b, play_12
0AF6            680       ; ***play audio***
0AF6            680       ;cjne sound_flag, #0, $
0AF6 121130     680       lcall Wait_Half_Second
0AF9 C28E       680       clr TR1 ; Stop Timer 1 ISR from playing previous request
0AFB D2A5       680       setb FLASH_CE
0AFD            680       ;setb sound_flag ; sound starts
0AFD C2A6       680       clr SPEAKER ; Turn off speaker
0AFF C2A5       680       clr FLASH_CE ; Enable SPI Flash
0B01 7403       680       mov a, #READ_BYTES
0B03 12040D     680       lcall Send_SPI
0B06            680       ; Set the initial position in memory where to start playing
0B06            680       
0B06 7402       680       mov a, #0x02 ; change initial position
0B08 12040D     680       lcall Send_SPI
0B0B 749B       680       mov a, #0x9b ; next memory position
0B0D 12040D     680       lcall Send_SPI
0B10 74F8       680       mov a, #0xf8 ; next memory position
0B12 12040D     680       lcall Send_SPI
0B15 7402       680       mov a, #0x02 ; request first byte to send to DAC
0B17 12040D     680       lcall Send_SPI
0B1A            680       
0B1A            680       ; How many bytes to play?
0B1A 754E00     680       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0B1D 754D1F     680       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
0B20 754C40     680       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
0B23            680       
0B23            680       
0B23 D2A6       680       setb SPEAKER ;Turn on speaker
0B25 D28E       680       setb TR1 ;Start playback by enabling Timer1
0B27            680       ;clr sound_flag ; sound ends
0B27 020CDC     681           ljmp state_8_hop2
0B2A            682   
0B2A            683       play_12:
0B2A B40C34     684           cjne a, #0x0c, play_13
0B2D            685       ; ***play audio***
0B2D            685       ;cjne sound_flag, #0, $
0B2D 121130     685       lcall Wait_Half_Second
0B30 C28E       685       clr TR1 ; Stop Timer 1 ISR from playing previous request
0B32 D2A5       685       setb FLASH_CE
0B34            685       ;setb sound_flag ; sound starts
0B34 C2A6       685       clr SPEAKER ; Turn off speaker
0B36 C2A5       685       clr FLASH_CE ; Enable SPI Flash
0B38 7403       685       mov a, #READ_BYTES
0B3A 12040D     685       lcall Send_SPI
0B3D            685       ; Set the initial position in memory where to start playing
0B3D            685       
0B3D 7402       685       mov a, #0x02 ; change initial position
0B3F 12040D     685       lcall Send_SPI
0B42 74B7       685       mov a, #0xb7 ; next memory position
0B44 12040D     685       lcall Send_SPI
0B47 7450       685       mov a, #0x50 ; next memory position
0B49 12040D     685       lcall Send_SPI
0B4C 7402       685       mov a, #0x02 ; request first byte to send to DAC
0B4E 12040D     685       lcall Send_SPI
0B51            685       
0B51            685       ; How many bytes to play?
0B51 754E00     685       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0B54 754D1F     685       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
0B57 754C40     685       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
0B5A            685       
0B5A            685       
0B5A D2A6       685       setb SPEAKER ;Turn on speaker
0B5C D28E       685       setb TR1 ;Start playback by enabling Timer1
0B5E            685       ;clr sound_flag ; sound ends
0B5E 020CDC     686           ljmp state_8_hop2
0B61            687   
0B61            688       play_13:
0B61 B40D34     689           cjne a, #0x0d, play_14
0B64            690       ; ***play audio***
0B64            690       ;cjne sound_flag, #0, $
0B64 121130     690       lcall Wait_Half_Second
0B67 C28E       690       clr TR1 ; Stop Timer 1 ISR from playing previous request
0B69 D2A5       690       setb FLASH_CE
0B6B            690       ;setb sound_flag ; sound starts
0B6B C2A6       690       clr SPEAKER ; Turn off speaker
0B6D C2A5       690       clr FLASH_CE ; Enable SPI Flash
0B6F 7403       690       mov a, #READ_BYTES
0B71 12040D     690       lcall Send_SPI
0B74            690       ; Set the initial position in memory where to start playing
0B74            690       
0B74 7402       690       mov a, #0x02 ; change initial position
0B76 12040D     690       lcall Send_SPI
0B79 74CE       690       mov a, #0xce ; next memory position
0B7B 12040D     690       lcall Send_SPI
0B7E 74C0       690       mov a, #0xc0 ; next memory position
0B80 12040D     690       lcall Send_SPI
0B83 7402       690       mov a, #0x02 ; request first byte to send to DAC
0B85 12040D     690       lcall Send_SPI
0B88            690       
0B88            690       ; How many bytes to play?
0B88 754E00     690       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0B8B 754D2E     690       mov w+1, #0x2e ; Load the middle byte of the number of bytes to play
0B8E 754CE0     690       mov w+0, #0xe0 ; Load the low byte of the number of bytes to play
0B91            690       
0B91            690       
0B91 D2A6       690       setb SPEAKER ;Turn on speaker
0B93 D28E       690       setb TR1 ;Start playback by enabling Timer1
0B95            690       ;clr sound_flag ; sound ends
0B95 020CDC     691           ljmp state_8_hop2
0B98            692   
0B98            693       play_14:
0B98 B40E34     694           cjne a, #0x0e, play_15
0B9B            695       ; ***play audio***
0B9B            695       ;cjne sound_flag, #0, $
0B9B 121130     695       lcall Wait_Half_Second
0B9E C28E       695       clr TR1 ; Stop Timer 1 ISR from playing previous request
0BA0 D2A5       695       setb FLASH_CE
0BA2            695       ;setb sound_flag ; sound starts
0BA2 C2A6       695       clr SPEAKER ; Turn off speaker
0BA4 C2A5       695       clr FLASH_CE ; Enable SPI Flash
0BA6 7403       695       mov a, #READ_BYTES
0BA8 12040D     695       lcall Send_SPI
0BAB            695       ; Set the initial position in memory where to start playing
0BAB            695       
0BAB 7402       695       mov a, #0x02 ; change initial position
0BAD 12040D     695       lcall Send_SPI
0BB0 74F5       695       mov a, #0xf5 ; next memory position
0BB2 12040D     695       lcall Send_SPI
0BB5 74D0       695       mov a, #0xd0 ; next memory position
0BB7 12040D     695       lcall Send_SPI
0BBA 7402       695       mov a, #0x02 ; request first byte to send to DAC
0BBC 12040D     695       lcall Send_SPI
0BBF            695       
0BBF            695       ; How many bytes to play?
0BBF 754E00     695       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0BC2 754D36     695       mov w+1, #0x36 ; Load the middle byte of the number of bytes to play
0BC5 754CB0     695       mov w+0, #0xb0 ; Load the low byte of the number of bytes to play
0BC8            695       
0BC8            695       
0BC8 D2A6       695       setb SPEAKER ;Turn on speaker
0BCA D28E       695       setb TR1 ;Start playback by enabling Timer1
0BCC            695       ;clr sound_flag ; sound ends
0BCC 020CDC     696           ljmp state_8_hop2
0BCF            697   
0BCF            698       play_15:
0BCF B40F34     699           cjne a, #0x0f, play_16
0BD2            700       ; ***play audio***
0BD2            700       ;cjne sound_flag, #0, $
0BD2 121130     700       lcall Wait_Half_Second
0BD5 C28E       700       clr TR1 ; Stop Timer 1 ISR from playing previous request
0BD7 D2A5       700       setb FLASH_CE
0BD9            700       ;setb sound_flag ; sound starts
0BD9 C2A6       700       clr SPEAKER ; Turn off speaker
0BDB C2A5       700       clr FLASH_CE ; Enable SPI Flash
0BDD 7403       700       mov a, #READ_BYTES
0BDF 12040D     700       lcall Send_SPI
0BE2            700       ; Set the initial position in memory where to start playing
0BE2            700       
0BE2 7403       700       mov a, #0x03 ; change initial position
0BE4 12040D     700       lcall Send_SPI
0BE7 7428       700       mov a, #0x28 ; next memory position
0BE9 12040D     700       lcall Send_SPI
0BEC 7498       700       mov a, #0x98 ; next memory position
0BEE 12040D     700       lcall Send_SPI
0BF1 7403       700       mov a, #0x03 ; request first byte to send to DAC
0BF3 12040D     700       lcall Send_SPI
0BF6            700       
0BF6            700       ; How many bytes to play?
0BF6 754E00     700       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0BF9 754D23     700       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
0BFC 754C28     700       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
0BFF            700       
0BFF            700       
0BFF D2A6       700       setb SPEAKER ;Turn on speaker
0C01 D28E       700       setb TR1 ;Start playback by enabling Timer1
0C03            700       ;clr sound_flag ; sound ends
0C03 020CDC     701           ljmp state_8_hop2
0C06            702   
0C06            703       play_16:
0C06 B41034     704           cjne a, #0x10, play_17
0C09            705       ; ***play audio***
0C09            705       ;cjne sound_flag, #0, $
0C09 121130     705       lcall Wait_Half_Second
0C0C C28E       705       clr TR1 ; Stop Timer 1 ISR from playing previous request
0C0E D2A5       705       setb FLASH_CE
0C10            705       ;setb sound_flag ; sound starts
0C10 C2A6       705       clr SPEAKER ; Turn off speaker
0C12 C2A5       705       clr FLASH_CE ; Enable SPI Flash
0C14 7403       705       mov a, #READ_BYTES
0C16 12040D     705       lcall Send_SPI
0C19            705       ; Set the initial position in memory where to start playing
0C19            705       
0C19 7403       705       mov a, #0x03 ; change initial position
0C1B 12040D     705       lcall Send_SPI
0C1E 7447       705       mov a, #0x47 ; next memory position
0C20 12040D     705       lcall Send_SPI
0C23 74D8       705       mov a, #0xd8 ; next memory position
0C25 12040D     705       lcall Send_SPI
0C28 7403       705       mov a, #0x03 ; request first byte to send to DAC
0C2A 12040D     705       lcall Send_SPI
0C2D            705       
0C2D            705       ; How many bytes to play?
0C2D 754E00     705       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0C30 754D32     705       mov w+1, #0x32 ; Load the middle byte of the number of bytes to play
0C33 754CC8     705       mov w+0, #0xc8 ; Load the low byte of the number of bytes to play
0C36            705       
0C36            705       
0C36 D2A6       705       setb SPEAKER ;Turn on speaker
0C38 D28E       705       setb TR1 ;Start playback by enabling Timer1
0C3A            705       ;clr sound_flag ; sound ends
0C3A 020CDC     706           ljmp state_8_hop2
0C3D            707   
0C3D            708       play_17:
0C3D B41134     709           cjne a, #0x11, play_18
0C40            710       ; ***play audio***
0C40            710       ;cjne sound_flag, #0, $
0C40 121130     710       lcall Wait_Half_Second
0C43 C28E       710       clr TR1 ; Stop Timer 1 ISR from playing previous request
0C45 D2A5       710       setb FLASH_CE
0C47            710       ;setb sound_flag ; sound starts
0C47 C2A6       710       clr SPEAKER ; Turn off speaker
0C49 C2A5       710       clr FLASH_CE ; Enable SPI Flash
0C4B 7403       710       mov a, #READ_BYTES
0C4D 12040D     710       lcall Send_SPI
0C50            710       ; Set the initial position in memory where to start playing
0C50            710       
0C50 7403       710       mov a, #0x03 ; change initial position
0C52 12040D     710       lcall Send_SPI
0C55 7476       710       mov a, #0x76 ; next memory position
0C57 12040D     710       lcall Send_SPI
0C5A 74B8       710       mov a, #0xb8 ; next memory position
0C5C 12040D     710       lcall Send_SPI
0C5F 7403       710       mov a, #0x03 ; request first byte to send to DAC
0C61 12040D     710       lcall Send_SPI
0C64            710       
0C64            710       ; How many bytes to play?
0C64 754E00     710       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0C67 754D2E     710       mov w+1, #0x2e ; Load the middle byte of the number of bytes to play
0C6A 754C20     710       mov w+0, #0x20 ; Load the low byte of the number of bytes to play
0C6D            710       
0C6D            710       
0C6D D2A6       710       setb SPEAKER ;Turn on speaker
0C6F D28E       710       setb TR1 ;Start playback by enabling Timer1
0C71            710       ;clr sound_flag ; sound ends
0C71 020CDC     711           ljmp state_8_hop2
0C74            712   
0C74            713       play_18:
0C74 B41234     714           cjne a, #0x12, play_19
0C77            715       ; ***play audio***
0C77            715       ;cjne sound_flag, #0, $
0C77 121130     715       lcall Wait_Half_Second
0C7A C28E       715       clr TR1 ; Stop Timer 1 ISR from playing previous request
0C7C D2A5       715       setb FLASH_CE
0C7E            715       ;setb sound_flag ; sound starts
0C7E C2A6       715       clr SPEAKER ; Turn off speaker
0C80 C2A5       715       clr FLASH_CE ; Enable SPI Flash
0C82 7403       715       mov a, #READ_BYTES
0C84 12040D     715       lcall Send_SPI
0C87            715       ; Set the initial position in memory where to start playing
0C87            715       
0C87 7403       715       mov a, #0x03 ; change initial position
0C89 12040D     715       lcall Send_SPI
0C8C 74A1       715       mov a, #0xa1 ; next memory position
0C8E 12040D     715       lcall Send_SPI
0C91 74B0       715       mov a, #0xb0 ; next memory position
0C93 12040D     715       lcall Send_SPI
0C96 7403       715       mov a, #0x03 ; request first byte to send to DAC
0C98 12040D     715       lcall Send_SPI
0C9B            715       
0C9B            715       ; How many bytes to play?
0C9B 754E00     715       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0C9E 754D27     715       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
0CA1 754C10     715       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
0CA4            715       
0CA4            715       
0CA4 D2A6       715       setb SPEAKER ;Turn on speaker
0CA6 D28E       715       setb TR1 ;Start playback by enabling Timer1
0CA8            715       ;clr sound_flag ; sound ends
0CA8 020CDC     716           ljmp state_8_hop2
0CAB            717   
0CAB            718       play_19:
0CAB            719       ; ***play audio***
0CAB            719       ;cjne sound_flag, #0, $
0CAB 121130     719       lcall Wait_Half_Second
0CAE C28E       719       clr TR1 ; Stop Timer 1 ISR from playing previous request
0CB0 D2A5       719       setb FLASH_CE
0CB2            719       ;setb sound_flag ; sound starts
0CB2 C2A6       719       clr SPEAKER ; Turn off speaker
0CB4 C2A5       719       clr FLASH_CE ; Enable SPI Flash
0CB6 7403       719       mov a, #READ_BYTES
0CB8 12040D     719       lcall Send_SPI
0CBB            719       ; Set the initial position in memory where to start playing
0CBB            719       
0CBB 7403       719       mov a, #0x03 ; change initial position
0CBD 12040D     719       lcall Send_SPI
0CC0 74C8       719       mov a, #0xc8 ; next memory position
0CC2 12040D     719       lcall Send_SPI
0CC5 74C0       719       mov a, #0xc0 ; next memory position
0CC7 12040D     719       lcall Send_SPI
0CCA 7403       719       mov a, #0x03 ; request first byte to send to DAC
0CCC 12040D     719       lcall Send_SPI
0CCF            719       
0CCF            719       ; How many bytes to play?
0CCF 754E00     719       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0CD2 754D27     719       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
0CD5 754C10     719       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
0CD8            719       
0CD8            719       
0CD8 D2A6       719       setb SPEAKER ;Turn on speaker
0CDA D28E       719       setb TR1 ;Start playback by enabling Timer1
0CDC            719       ;clr sound_flag ; sound ends
0CDC            720   
0CDC            721       state_8_hop2:
0CDC            722       ; go to state_8_sound
0CDC 020CDF     723           ljmp state_8_sound
0CDF            724   
0CDF            725   state_8_sound:
0CDF            726   ; go to state_0_sound
0CDF 0205B9     727       ljmp Sound_ret
0CE2            728   
0CE2            729   
0CE2            730   INI_PLAYBACK_TEMP:
0CE2            731       ; ****INITIALIZATION****
0CE2            732       ; Configure SPI pins and turn off speaker
0CE2            733            ;anl P2M0, #0b_1100_1110
0CE2 43CE90     734       orl P2M0, #0b_1001_0000
0CE5            735       ;orl P2M0, #0b_0011_0001
0CE5            736            ;orl P2M1, #0b_0011_0001
0CE5 43CF90     737       orl P2M1, #0b_1001_0000
0CE8 D2A1       738            setb MY_MISO_SOUND  ; Configured as input
0CEA D2A5       739            setb FLASH_CE ; CS=1 for SPI flash memory
0CEC C2A0       740            clr MY_SCLK_SOUND   ; Rest state of SCLK=0
0CEE C2A6       741            clr SPEAKER   ; Turn off speaker.
0CF0            742            
0CF0            743            ; Configure timer 1
0CF0 53890F     744            anl     TMOD, #0x0F ; Clear the bits of timer 1 in TMOD
0CF3 438910     745            orl     TMOD, #0x10 ; Set timer 1 in 16-bit timer mode.  Don't change the bits of timer 0
0CF6 758DFC     746            mov TH1, #high(TIMER1_RELOAD)
0CF9 758B8C     747            mov TL1, #low(TIMER1_RELOAD)
0CFC            748            ; Set autoreload value
0CFC 75F5FC     749            mov RH1, #high(TIMER1_RELOAD)
0CFF 75F38C     750            mov RL1, #low(TIMER1_RELOAD)
0D02            751   
0D02            752            ;Enable the timer and interrupts
0D02 D2AB       753       setb ET1  ; Enable timer 1 interrupt
0D04 D28E       754            setb TR1 ; Timer 1 is only enabled to play stored sound
0D06            755   
0D06            756            ; Configure the DAC.  The DAC output we are using is P2.3, but P2.2 is also reserved.
0D06 75A5A0     757            mov DADI, #0b_1010_0000 ; ACON=1
0D09 75A43A     758            mov DADC, #0b_0011_1010 ; Enabled, DAC mode, Left adjusted, CLK/4
0D0C 75AD80     759            mov DADH, #0x80 ; Middle of scale
0D0F 75AC00     760            mov DADL, #0
0D12 43A440     761            orl DADC, #0b_0100_0000 ; Start DAC by GO/BSY=1
0D15            762       check_DAC_init:
0D15 E5A4       763            mov a, DADC
0D17 20E6FB     764            jb acc.6, check_DAC_init ; Wait for DAC to finish
0D1A            765            
0D1A 22         766   ret
0D1B            767   
0D1B            768       
0D1B            769   ;-------------------------------------------------------------------------------------------------------------------------------
0D1B            770   ;***LCD FXNS
0D1B            771   
                772   Display_lower_BCD mac
                773       push ar0
                774       mov r0, %0
                775       lcall ?Display_lower_BCD
                776       pop ar0
                777   endmac
0D1B            778   
0D1B            779   ?Display_lower_BCD:
0D1B C0E0       780       push acc
0D1D            781       ; write least significant digit
0D1D E8         782       mov a, r0
0D1E 540F       783       anl a, #0fh
0D20 4430       784       orl a, #30h
0D22 12007E     785       lcall ?WriteData
0D25 D0E0       786       pop acc
0D27 22         787   ret
0D28            788   
0D28            789   
0D28            790   SendToLCD:
0D28 75F064     791       mov b, #100
0D2B 84         792       div ab
0D2C 4430       793       orl a, #0x30h ; Convert hundreds to ASCII
0D2E 12007E     794       lcall ?WriteData ; Send to LCD
0D31 E5F0       795       mov a, b    ; Remainder is in register b
0D33 75F00A     796       mov b, #10
0D36 84         797       div ab
0D37 4430       798       orl a, #0x30h ; Convert tens to ASCII
0D39 12007E     799       lcall ?WriteData; Send to LCD
0D3C E5F0       800       mov a, b
0D3E 4430       801       orl a, #0x30h ; Convert units to ASCII
0D40 12007E     802       lcall ?WriteData; Send to LCD
0D43 22         803   ret
0D44            804   
0D44            805   Initialize_State_Display:
0D44            806   
0D44            807       ;***clear the screen and set new display***
0D44 7401       808            mov a, #0x01
0D46 120083     808            lcall ?WriteCommand
0D49 C002       809            push AR2
0D4B 7A02       809            mov R2, #2
0D4D 120039     809            lcall ?Wait_Milli_Seconds
0D50 D002       809            pop AR2
0D52            810       
0D52 C0E0       811            push acc
0D54 7401       811            mov a, #1
0D56 14         811            dec a
0D57 1200BF     811            lcall ?Set_Cursor_1 ; Select column and row
0D5A D0E0       811            pop acc
0D5C C083       812            push dph
0D5E C082       812            push dpl
0D60 C0E0       812            push acc
0D62 90037D     812            mov dptr, #time
0D65 1200B2     812            lcall ?Send_Constant_String
0D68 D0E0       812            pop acc
0D6A D082       812            pop dpl
0D6C D083       812            pop dph
0D6E            813            
0D6E C0E0       814            push acc
0D70 7406       814            mov a, #6
0D72 14         814            dec a
0D73 1200BF     814            lcall ?Set_Cursor_1 ; Select column and row
0D76 D0E0       814            pop acc
0D78 C083       815            push dph
0D7A C082       815            push dpl
0D7C C0E0       815            push acc
0D7E 900382     815            mov dptr, #colon
0D81 1200B2     815            lcall ?Send_Constant_String
0D84 D0E0       815            pop acc
0D86 D082       815            pop dpl
0D88 D083       815            pop dph
0D8A            816      
0D8A C0E0       817            push acc
0D8C 740A       817            mov a, #10
0D8E 14         817            dec a
0D8F 1200BF     817            lcall ?Set_Cursor_1 ; Select column and row
0D92 D0E0       817            pop acc
0D94 C083       818            push dph
0D96 C082       818            push dpl
0D98 C0E0       818            push acc
0D9A 900384     818            mov dptr, #temp
0D9D 1200B2     818            lcall ?Send_Constant_String
0DA0 D0E0       818            pop acc
0DA2 D082       818            pop dpl
0DA4 D083       818            pop dph
0DA6            819       
0DA6 C0E0       820            push acc
0DA8 7401       820            mov a, #1
0DAA 14         820            dec a
0DAB 1200BD     820            lcall ?Set_Cursor_2 ; Select column and row
0DAE D0E0       820            pop acc
0DB0 C083       821            push dph
0DB2 C082       821            push dpl
0DB4 C0E0       821            push acc
0DB6 900376     821            mov dptr, #state
0DB9 1200B2     821            lcall ?Send_Constant_String
0DBC D0E0       821            pop acc
0DBE D082       821            pop dpl
0DC0 D083       821            pop dph
0DC2 22         822   ret
0DC3            823   
0DC3            824   Update_Display:
0DC3 C0E0       825            push acc
0DC5 7405       825            mov a, #5
0DC7 14         825            dec a
0DC8 1200BF     825            lcall ?Set_Cursor_1 ; Select column and row
0DCB D0E0       825            pop acc
0DCD C000       826       push ar0
0DCF A839       826       mov r0, Run_time_minutes
0DD1 120D1B     826       lcall ?Display_lower_BCD
0DD4 D000       826       pop ar0
0DD6 C0E0       827            push acc
0DD8 7407       827            mov a, #7
0DDA 14         827            dec a
0DDB 1200BF     827            lcall ?Set_Cursor_1 ; Select column and row
0DDE D0E0       827            pop acc
0DE0 C000       828            push ar0
0DE2 A838       828            mov r0, Run_time_seconds
0DE4 1200C4     828            lcall ?Display_BCD
0DE7 D000       828            pop ar0
0DE9            829       ;Set_Cursor(1,14)
0DE9            830       ;mov a, Temp_oven
0DE9            831       ;SendToLCD(Temp_oven)
0DE9 22         832   ret
0DEA            833   
0DEA            834   State0_display:
0DEA C0E0       835            push acc
0DEC 7401       835            mov a, #1
0DEE 14         835            dec a
0DEF 1200BF     835            lcall ?Set_Cursor_1 ; Select column and row
0DF2 D0E0       835            pop acc
0DF4 C083       836            push dph
0DF6 C082       836            push dpl
0DF8 C0E0       836            push acc
0DFA 900360     836            mov dptr, #STemp
0DFD 1200B2     836            lcall ?Send_Constant_String
0E00 D0E0       836            pop acc
0E02 D082       836            pop dpl
0E04 D083       836            pop dph
0E06 C0E0       837            push acc
0E08 7406       837            mov a, #6
0E0A 14         837            dec a
0E0B 1200BF     837            lcall ?Set_Cursor_1 ; Select column and row
0E0E D0E0       837            pop acc
0E10 E534       838       mov a, Temp_soak
0E12 120D28     839       lcall SendToLCD
0E15            840       
0E15 C0E0       841            push acc
0E17 740A       841            mov a, #10
0E19 14         841            dec a
0E1A 1200BF     841            lcall ?Set_Cursor_1 ; Select column and row
0E1D D0E0       841            pop acc
0E1F C083       842            push dph
0E21 C082       842            push dpl
0E23 C0E0       842            push acc
0E25 900366     842            mov dptr, #STime
0E28 1200B2     842            lcall ?Send_Constant_String
0E2B D0E0       842            pop acc
0E2D D082       842            pop dpl
0E2F D083       842            pop dph
0E31 C0E0       843            push acc
0E33 740E       843            mov a, #14
0E35 14         843            dec a
0E36 1200BF     843            lcall ?Set_Cursor_1 ; Select column and row
0E39 D0E0       843            pop acc
0E3B E535       844       mov a, Time_soak
0E3D 120D28     845            lcall SendToLCD
0E40            846       ;Display_BCD(Time_soak)
0E40            847   
0E40            848       ;Displays Reflow Temp and Time
0E40 C0E0       849            push acc
0E42 7401       849            mov a, #1
0E44 14         849            dec a
0E45 1200BD     849            lcall ?Set_Cursor_2 ; Select column and row
0E48 D0E0       849            pop acc
0E4A C083       850            push dph
0E4C C082       850            push dpl
0E4E C0E0       850            push acc
0E50 90036B     850            mov dptr, #RTemp
0E53 1200B2     850            lcall ?Send_Constant_String
0E56 D0E0       850            pop acc
0E58 D082       850            pop dpl
0E5A D083       850            pop dph
0E5C C0E0       851            push acc
0E5E 7406       851            mov a, #6
0E60 14         851            dec a
0E61 1200BD     851            lcall ?Set_Cursor_2 ; Select column and row
0E64 D0E0       851            pop acc
0E66 E536       852       mov a, Temp_refl
0E68 120D28     853       lcall SendToLCD
0E6B            854       
0E6B C0E0       855            push acc
0E6D 740A       855            mov a, #10
0E6F 14         855            dec a
0E70 1200BD     855            lcall ?Set_Cursor_2 ; Select column and row
0E73 D0E0       855            pop acc
0E75 C083       856            push dph
0E77 C082       856            push dpl
0E79 C0E0       856            push acc
0E7B 900371     856            mov dptr, #RTime
0E7E 1200B2     856            lcall ?Send_Constant_String
0E81 D0E0       856            pop acc
0E83 D082       856            pop dpl
0E85 D083       856            pop dph
0E87 C0E0       857            push acc
0E89 740E       857            mov a, #14
0E8B 14         857            dec a
0E8C 1200BD     857            lcall ?Set_Cursor_2 ; Select column and row
0E8F D0E0       857            pop acc
0E91 E537       858       mov a, Time_refl
0E93 120D28     859            lcall SendToLCD
0E96 22         860   ret
0E97            861   
0E97            862   Display_3_digit_BCD:
0E97 C0E0       863            push acc
0E99 740E       863            mov a, #14
0E9B 14         863            dec a
0E9C 1200BF     863            lcall ?Set_Cursor_1 ; Select column and row
0E9F D0E0       863            pop acc
0EA1 C000       864       push ar0
0EA3 A846       864       mov r0, bcd+1
0EA5 120D1B     864       lcall ?Display_lower_BCD
0EA8 D000       864       pop ar0
0EAA C000       865            push ar0
0EAC A845       865            mov r0, bcd+0
0EAE 1200C4     865            lcall ?Display_BCD
0EB1 D000       865            pop ar0
0EB3 22         866   ret
0EB4            867   
0EB4            868   Animation:
0EB4 740F       869            mov a, #0x0f
0EB6 120083     869            lcall ?WriteCommand ;display cursor
0EB9            870   
0EB9            871       ;name ; Move cursor to line 1 column 1
0EB9 7480       872            mov a, #0x80
0EBB 120083     872            lcall ?WriteCommand
0EBE 7457       873            mov a, #'W'
0EC0 12007E     873            lcall ?WriteData
0EC3 C002       874            push AR2
0EC5 7AFA       874            mov R2, #250
0EC7 120039     874            lcall ?Wait_Milli_Seconds
0ECA D002       874            pop AR2
0ECC 7465       875            mov a, #'e'
0ECE 12007E     875            lcall ?WriteData
0ED1 C002       876            push AR2
0ED3 7AFA       876            mov R2, #250
0ED5 120039     876            lcall ?Wait_Milli_Seconds
0ED8 D002       876            pop AR2
0EDA 746C       877            mov a, #'l'
0EDC 12007E     877            lcall ?WriteData
0EDF C002       878            push AR2
0EE1 7AFA       878            mov R2, #250
0EE3 120039     878            lcall ?Wait_Milli_Seconds
0EE6 D002       878            pop AR2
0EE8 7463       879            mov a, #'c'
0EEA 12007E     879            lcall ?WriteData
0EED C002       880            push AR2
0EEF 7AFA       880            mov R2, #250
0EF1 120039     880            lcall ?Wait_Milli_Seconds
0EF4 D002       880            pop AR2
0EF6 746F       881            mov a, #'o'
0EF8 12007E     881            lcall ?WriteData
0EFB C002       882            push AR2
0EFD 7AFA       882            mov R2, #250
0EFF 120039     882            lcall ?Wait_Milli_Seconds
0F02 D002       882            pop AR2
0F04 746D       883            mov a, #'m'
0F06 12007E     883            lcall ?WriteData
0F09 C002       884            push AR2
0F0B 7AFA       884            mov R2, #250
0F0D 120039     884            lcall ?Wait_Milli_Seconds
0F10 D002       884            pop AR2
0F12 7465       885            mov a, #'e'
0F14 12007E     885            lcall ?WriteData
0F17 C002       886            push AR2
0F19 7AFA       886            mov R2, #250
0F1B 120039     886            lcall ?Wait_Milli_Seconds
0F1E D002       886            pop AR2
0F20 7421       887            mov a, #'!'
0F22 12007E     887            lcall ?WriteData
0F25 C002       888            push AR2
0F27 7AFA       888            mov R2, #250
0F29 120039     888            lcall ?Wait_Milli_Seconds
0F2C D002       888            pop AR2
0F2E 7420       889            mov a, #' '
0F30 12007E     889            lcall ?WriteData
0F33 C002       890            push AR2
0F35 7AFA       890            mov R2, #250
0F37 120039     890            lcall ?Wait_Milli_Seconds
0F3A D002       890            pop AR2
0F3C 7460       891            mov a, #96
0F3E 12007E     891            lcall ?WriteData
0F41 C002       892            push AR2
0F43 7AFA       892            mov R2, #250
0F45 120039     892            lcall ?Wait_Milli_Seconds
0F48 D002       892            pop AR2
0F4A 74EF       893            mov a, #239
0F4C 12007E     893            lcall ?WriteData
0F4F C002       894            push AR2
0F51 7AFA       894            mov R2, #250
0F53 120039     894            lcall ?Wait_Milli_Seconds
0F56 D002       894            pop AR2
0F58 742F       895            mov a, #47
0F5A 12007E     895            lcall ?WriteData
0F5D 12110B     896       lcall Wait_One_Second
0F60 12110B     897       lcall Wait_One_Second
0F63 740C       898            mov a, #0x0c
0F65 120083     898            lcall ?WriteCommand ;clear cursor
0F68 22         899   ret
0F69            900   
0F69            901   ;The following functions store and restore the values--------------------------------------------------------------------------
                902   loadbyte mac
                903       mov a, %0
                904       movx @dptr, a
                905       inc dptr
                906   endmac
0F69            907   
0F69            908   Save_Configuration1:
0F69 C0A8       909       push IE ; Save the current state of bit EA in the stack
0F6B C2AF       910       clr EA ; Disable interrupts
0F6D 75D108     911       mov FCON, #0x08 ; Page Buffer Mapping Enabled (FPS = 1)
0F70 907F80     912       mov dptr, #0x7f80 ; Last page of flash memory
0F73            913       ; Save variables
0F73 E534       914       mov a, temp_soak
0F75 F0         914       movx @dptr, a
0F76 A3         914       inc dptr ; @0x7f80
0F77 E535       915       mov a, time_soak
0F79 F0         915       movx @dptr, a
0F7A A3         915       inc dptr ; @0x7f81
0F7B E536       916       mov a, temp_refl
0F7D F0         916       movx @dptr, a
0F7E A3         916       inc dptr ; @0x7f82
0F7F E537       917       mov a, time_refl
0F81 F0         917       movx @dptr, a
0F82 A3         917       inc dptr ; @0x7f83
0F83 7455       918       mov a, #0x55
0F85 F0         918       movx @dptr, a
0F86 A3         918       inc dptr ; First key value @0x7f84
0F87 74AA       919       mov a, #0xAA
0F89 F0         919       movx @dptr, a
0F8A A3         919       inc dptr ; Second key value @0x7f85
0F8B 75D100     920       mov FCON, #0x00 ; Page Buffer Mapping Disabled (FPS = 0) 
0F8E 43D240     921       orl EECON, #0b01000000 ; Enable auto-erase on next write sequence  
0F91 75D150     922       mov FCON, #0x50 ; Write trigger first byte
0F94 75D1A0     923       mov FCON, #0xA0 ; Write trigger second byte
0F97            924       ; CPU idles until writing of flash completes.
0F97 75D100     925       mov FCON, #0x00 ; Page Buffer Mapping Disabled (FPS = 0)
0F9A 53D2BF     926       anl EECON, #0b10111111 ; Disable auto-erase
0F9D D0A8       927       pop IE ; Restore the state of bit EA from the stack
0F9F 22         928   ret
0FA0            929   
0FA0            930   Save_Configuration2:
0FA0 C0A8       931       push IE ; Save the current state of bit EA in the stack
0FA2 C2AF       932       clr EA ; Disable interrupts
0FA4 75D108     933       mov FCON, #0x08 ; Page Buffer Mapping Enabled (FPS = 1)
0FA7 907F00     934       mov dptr, #0x7f00 ; Second Last page of flash memory
0FAA            935       ; Save variables
0FAA E534       936       mov a, temp_soak
0FAC F0         936       movx @dptr, a
0FAD A3         936       inc dptr ; @0x7f00
0FAE E535       937       mov a, time_soak
0FB0 F0         937       movx @dptr, a
0FB1 A3         937       inc dptr ; @0x7f01
0FB2 E536       938       mov a, temp_refl
0FB4 F0         938       movx @dptr, a
0FB5 A3         938       inc dptr ; @0x7f02
0FB6 E537       939       mov a, time_refl
0FB8 F0         939       movx @dptr, a
0FB9 A3         939       inc dptr ; @0x7f03
0FBA 7444       940       mov a, #0x44
0FBC F0         940       movx @dptr, a
0FBD A3         940       inc dptr ; First key value @0x7f04
0FBE 74BB       941       mov a, #0xBB
0FC0 F0         941       movx @dptr, a
0FC1 A3         941       inc dptr ; Second key value @0x7f05
0FC2 75D100     942       mov FCON, #0x00 ; Page Buffer Mapping Disabled (FPS = 0) 
0FC5 43D240     943       orl EECON, #0b01000000 ; Enable auto-erase on next write sequence  
0FC8 75D150     944       mov FCON, #0x50 ; Write trigger first byte
0FCB 75D1A0     945       mov FCON, #0xA0 ; Write trigger second byte
0FCE            946       ; CPU idles until writing of flash completes.
0FCE 75D100     947       mov FCON, #0x00 ; Page Buffer Mapping Disabled (FPS = 0)
0FD1 53D2BF     948       anl EECON, #0b10111111 ; Disable auto-erase
0FD4 D0A8       949       pop IE ; Restore the state of bit EA from the stack
0FD6 22         950   ret
0FD7            951   
                952   getbyte mac
                953       clr a
                954       movc a, @a+dptr
                955       mov %0, a
                956       inc dptr
                957   endmac
0FD7            958   
0FD7            959   Load_Configuration1:
0FD7 907F84     960       mov dptr, #0x7f84 ; First key value location.
0FDA E4         961       clr a
0FDB 93         961       movc a, @a+dptr
0FDC F8         961       mov R0, a
0FDD A3         961       inc dptr ; 0x7f84 should contain 0x55
0FDE B85548     962       cjne R0, #0x55, Load_Defaults1
0FE1 E4         963       clr a
0FE2 93         963       movc a, @a+dptr
0FE3 F8         963       mov R0, a
0FE4 A3         963       inc dptr ; 0x7f85 should contain 0xAA
0FE5 B8AA41     964       cjne R0, #0xAA, Load_Defaults1
0FE8            965   ; Keys are good.  Get stored values.
0FE8 907F80     966       mov dptr, #0x7f80
0FEB E4         967       clr a
0FEC 93         967       movc a, @a+dptr
0FED F534       967       mov Temp_soak, a
0FEF A3         967       inc dptr ; 0x7f80
0FF0 E4         968       clr a
0FF1 93         968       movc a, @a+dptr
0FF2 F535       968       mov Time_soak, a
0FF4 A3         968       inc dptr ; 0x7f81
0FF5 E4         969       clr a
0FF6 93         969       movc a, @a+dptr
0FF7 F536       969       mov Temp_refl, a
0FF9 A3         969       inc dptr ; 0x7f82
0FFA E4         970       clr a
0FFB 93         970       movc a, @a+dptr
0FFC F537       970       mov Time_refl, a
0FFE A3         970       inc dptr ; 0x7f83
0FFF 22         971   ret
1000            972   
1000            973   Load_Configuration2:
1000 907F04     974       mov dptr, #0x7f04 ; First key value location.
1003 E4         975       clr a
1004 93         975       movc a, @a+dptr
1005 F8         975       mov R0, a
1006 A3         975       inc dptr ; 0x7f04 should contain 0x44
1007 B8442C     976       cjne R0, #0x44, Load_Defaults2
100A E4         977       clr a
100B 93         977       movc a, @a+dptr
100C F8         977       mov R0, a
100D A3         977       inc dptr ; 0x7f05 should contain 0xBB
100E B8BB25     978       cjne R0, #0xBB, Load_Defaults2
1011            979   ; Keys are good.  Get stored values.
1011 907F00     980       mov dptr, #0x7f00
1014 E4         981       clr a
1015 93         981       movc a, @a+dptr
1016 F534       981       mov Temp_soak, a
1018 A3         981       inc dptr ; 0x7f00
1019 E4         982       clr a
101A 93         982       movc a, @a+dptr
101B F535       982       mov Time_soak, a
101D A3         982       inc dptr ; 0x7f01
101E E4         983       clr a
101F 93         983       movc a, @a+dptr
1020 F536       983       mov Temp_refl, a
1022 A3         983       inc dptr ; 0x7f02
1023 E4         984       clr a
1024 93         984       movc a, @a+dptr
1025 F537       984       mov Time_refl, a
1027 A3         984       inc dptr ; 0x7f03
1028 22         985   ret
1029            986   
1029            987   Load_Defaults1:
1029 753482     988       mov Temp_soak, #130 ; Soak Tmp Range is 130-170
102C 75353C     989       mov Time_soak, #0x3C ; Range 60-90 seconds
102F 7536DC     990       mov Temp_refl, #220 ; Range 220-240
1032 75371E     991       mov Time_refl, #0x1E ; Range 30-45 seconds
1035 22         992       ret
1036            993   
1036            994   Load_Defaults2:
1036 75348C     995       mov Temp_soak, #140 ; Soak Tmp Range is 130-170
1039 75354B     996       mov Time_soak, #75 ; Range 60-90 seconds
103C 7536E6     997       mov Temp_refl, #230 ; Range 220-240
103F 753723     998       mov Time_refl, #35 ; Range 30-45 seconds
1042 22         999       ret
1043           1000   ;-------------------------------------------------------------------------------------------------------------------------------
1043           1001   ;off state
1043           1002   
1043           1003   OFF_STATE:
1043           1004       ;**CLEAR SCREEN**
1043 7401      1005            mov a, #0x01
1045 120083    1005            lcall ?WriteCommand
1048           1006       ;OFF_STATE1:
1048           1007       
1048 20C5FD    1008       jb POWER_BUTTON, $ ; loop while the button is not pressed
104B C002      1009            push AR2
104D 7A32      1009            mov R2, #50
104F 120039    1009            lcall ?Wait_Milli_Seconds
1052 D002      1009            pop AR2 ; debounce time
1054 20C5EC    1010            jb POWER_BUTTON, OFF_STATE ; it was a bounce, try again
1057 30C5FD    1011            jnb POWER_BUTTON, $ ; loop while the button is pressed
105A 0211F4    1012       ljmp main
105D 22        1013   ret
105E           1014   ;-------------------------------------------------------------------------------------------------------------------------------
105E           1015   
105E           1016   ;***CHECK TEMPERATURE BY READING VOLTAGE AND CONVERTING
105E           1017   Check_Temp:
105E           1018       
105E           1019       ;jnb one_seconds_flag, Check_Temp_done
105E           1020       ;clr one_seconds_flag
105E           1021       
105E C297      1022       clr CE_ADC
1060 7801      1023            mov R0, #00000001B ; Start bit:1
1062 1203F4    1024            lcall DO_SPI_G
1065 7880      1025            mov R0, #10000000B ; Single ended, read channel 0
1067 1203F4    1026            lcall DO_SPI_G
106A E9        1027            mov a, R1          ; R1 contains bits 8 and 9
106B 5403      1028            anl a, #00000011B  ; We need only the two least significant bits
106D F54B      1029            mov Result+1, a    ; Save result high.
106F 7855      1030            mov R0, #55H ; It doesn't matter what we transmit...
1071 1203F4    1031            lcall DO_SPI_G
1074 894A      1032            mov Result+0, R1     ; R1 contains bits 0 to 7.  Save result low.
1076 D297      1033            setb CE_ADC
1078           1034   
1078 C002      1035            push AR2
107A 7A0A      1035            mov R2, #10
107C 120039    1035            lcall ?Wait_Milli_Seconds
107F D002      1035            pop AR2
1081           1036       ; Copy the 10-bits of the ADC conversion into the 32-bits of 'x'
1081 AE4A      1037            mov R6, Result+0
1083 AF4B      1038            mov R7, Result+1
1085 22        1039   ret
1086           1040   
1086           1041       
1086           1042       
1086           1043   ;***CALCULATES THE TEMPERATURE
1086           1044   Average_Temp:
1086 753D00    1045            mov x+0, #low (0 % 0x10000) 
1089 753E00    1045            mov x+1, #high(0 % 0x10000) 
108C 753F00    1045            mov x+2, #low (0 / 0x10000) 
108F 754000    1045            mov x+3, #high(0 / 0x10000) 
1092 7D64      1046       mov R5, #100
1094           1047   Ave_loop:
1094 12105E    1048       lcall Check_Temp
1097 754400    1049       mov y+3, #0
109A 754300    1050       mov y+2, #0
109D 8F42      1051       mov y+1, R7
109F 8E41      1052       mov y+0, R6
10A1 1201B5    1053       lcall add32
10A4 121143    1054       lcall Wait10us
10A7 DDEB      1055       djnz R5, Ave_loop
10A9 754164    1056            mov y+0, #low (100 % 0x10000) 
10AC 754200    1056            mov y+1, #high(100 % 0x10000) 
10AF 754300    1056            mov y+2, #low (100 / 0x10000) 
10B2 754400    1056            mov y+3, #high(100 / 0x10000) 
10B5 1202F7    1057       lcall div32
10B8           1058   
10B8           1059       ;**INSERT MATH FUNCTIONS
10B8           1060   
10B8 75414E    1061            mov y+0, #low (2894 % 0x10000) 
10BB 75420B    1061            mov y+1, #high(2894 % 0x10000) 
10BE 754300    1061            mov y+2, #low (2894 / 0x10000) 
10C1 754400    1061            mov y+3, #high(2894 / 0x10000)  ;6078; 2026
10C4 12026A    1062            lcall mul32
10C7 754110    1063            mov y+0, #low (10000 % 0x10000) 
10CA 754227    1063            mov y+1, #high(10000 % 0x10000) 
10CD 754300    1063            mov y+2, #low (10000 / 0x10000) 
10D0 754400    1063            mov y+3, #high(10000 / 0x10000)  ;14000; 7000
10D3 1202F7    1064            lcall div32
10D6 754116    1065            mov y+0, #low (22 % 0x10000) 
10D9 754200    1065            mov y+1, #high(22 % 0x10000) 
10DC 754300    1065            mov y+2, #low (22 / 0x10000) 
10DF 754400    1065            mov y+3, #high(22 / 0x10000) 
10E2 1201B5    1066       lcall add32
10E5 853D3B    1067       mov Temp_oven, x+0
10E8           1068       ;add KTemp_oven, Temp_oven, #273
10E8           1069   
10E8           1070   Display_Temp_BCD_Or_Kelvin:
10E8 1200F0    1071            lcall hex2bcd ; converts binary in x to BCD in BCD
10EB           1072       ;mov a, K_or_C
10EB           1073       ;cjne a, #1, Display_3_digit_BCD
10EB           1074       ;mov a, KTemp_oven
10EB           1075       ;SendToLCD
10EB           1076       ;sjmp Send_Temp_Port
10EB           1077   
10EB           1078   Display_Temp_BCD:    
10EB 120E97    1079       lcall Display_3_digit_BCD
10EE           1080   
10EE           1081   Send_Temp_Port:
10EE           1082       ;Send_BCD(bcd+4)
10EE           1083       ;Send_BCD(bcd+3)
10EE           1084       ;Send_BCD(bcd+2)
10EE C000      1085       push ar0
10F0 A846      1085       mov r0, bcd+1
10F2 1200DA    1085       lcall ?Send_BCD
10F5 D000      1085       pop ar0
10F7           1085   
10F7 C000      1086       push ar0
10F9 A845      1086       mov r0, bcd+0
10FB 1200DA    1086       lcall ?Send_BCD
10FE D000      1086       pop ar0
1100           1086   
1100 740D      1087            mov a, #'\r'
1102 12047E    1088            lcall putchar
1105 740A      1089            mov a, #'\n'
1107 12047E    1090            lcall putchar
110A           1091   Check_Temp_done:
110A 22        1092   ret    
110B           1093   
110B           1094   ;-------------------------------------------------------------------------------------------------------------------------------
110B           1095   
110B           1096   ;Time wait
110B           1097   
110B           1098   Wait_One_Second:
110B C002      1099            push AR2
110D 7AFA      1099            mov R2, #250
110F 120039    1099            lcall ?Wait_Milli_Seconds
1112 D002      1099            pop AR2
1114 C002      1100            push AR2
1116 7AFA      1100            mov R2, #250
1118 120039    1100            lcall ?Wait_Milli_Seconds
111B D002      1100            pop AR2
111D C002      1101            push AR2
111F 7AFA      1101            mov R2, #250
1121 120039    1101            lcall ?Wait_Milli_Seconds
1124 D002      1101            pop AR2
1126 C002      1102            push AR2
1128 7AFA      1102            mov R2, #250
112A 120039    1102            lcall ?Wait_Milli_Seconds
112D D002      1102            pop AR2
112F 22        1103   ret
1130           1104   
1130           1105   Wait_Half_Second:
1130 C002      1106            push AR2
1132 7AFA      1106            mov R2, #250
1134 120039    1106            lcall ?Wait_Milli_Seconds
1137 D002      1106            pop AR2
1139 C002      1107            push AR2
113B 7AFA      1107            mov R2, #250
113D 120039    1107            lcall ?Wait_Milli_Seconds
1140 D002      1107            pop AR2
1142 22        1108   ret
1143           1109   
1143           1110   
1143           1111   
1143           1112   Wait10us:
1143 784A      1113       mov R0, #74
1145 D8FE      1114       djnz R0, $
1147 22        1115   ret
1148           1116   ; ==================================================================================================
1148           1117   
1148           1118   ;-------------------------------------;
1148           1119   ; ISR for Timer 1.  Used to playback  ;
1148           1120   ; the WAV file stored in the SPI      ;
1148           1121   ; flash memory.                       ;
1148           1122   ;-------------------------------------;
1148           1123   Timer1_ISR:
1148           1124            ; The registers used in the ISR must be saved in the stack
1148 C0E0      1125            push acc
114A C0D0      1126            push psw
114C           1127            
114C           1128            ; Check if the play counter is zero.  If so, stop playing sound.
114C E54C      1129            mov a, w+0
114E 454D      1130            orl a, w+1
1150 454E      1131            orl a, w+2
1152 601C      1132            jz stop_playing
1154           1133            
1154           1134            ; Decrement play counter 'w'.  In this implementation 'w' is a 24-bit counter.
1154 74FF      1135            mov a, #0xff
1156 154C      1136            dec w+0
1158 B54C07    1137            cjne a, w+0, keep_playing
115B 154D      1138            dec w+1
115D B54D02    1139            cjne a, w+1, keep_playing
1160 154E      1140            dec w+2
1162           1141            
1162           1142   keep_playing:
1162 D2A6      1143            setb SPEAKER
1164 12040D    1144            lcall Send_SPI ; Read the next byte from the SPI Flash...
1167           1145            ;mov P0, a ; WARNING: Remove this if not using an external DAC to use the pins of P0 as GPIO
1167 2480      1146            add a, #0x80
1169 F5AD      1147            mov DADH, a ; Output to DAC. DAC output is pin P2.3
116B 43A440    1148            orl DADC, #0b_0100_0000 ; Start DAC by setting GO/BSY=1
116E 800C      1149            sjmp Timer1_ISR_Done
1170           1150   
1170           1151   stop_playing:
1170 C28E      1152            clr TR1 ; Stop timer 1
1172 D2A5      1153            setb FLASH_CE  ; Disable SPI Flash
1174 C2A6      1154            clr SPEAKER ; Turn off speaker.  Removes hissing noise when not playing sound.
1176 75AD80    1155            mov DADH, #0x80 ; middle of range
1179 43A440    1156            orl DADC, #0b_0100_0000 ; Start DAC by setting GO/BSY=1
117C           1157   
117C           1158   Timer1_ISR_Done:         
117C D0D0      1159            pop psw
117E D0E0      1160            pop acc
1180 32        1161            reti
1181           1162   ; ==================================================================================================
1181           1163   
1181           1164   ;---------------------------------;
1181           1165   ; Routine to initialize the ISR   ;
1181           1166   ; for timer 2                     ;
1181           1167   ;---------------------------------;
1181           1168   Timer2_init:
1181 75C800    1169       mov T2CON, #0
1184 75CDA9    1170       mov TH2, #high(TIMER2_RELOAD)
1187 75CC9A    1171       mov TL2, #low(TIMER2_RELOAD)
118A           1172   
118A 75CBA9    1173       mov RCAP2H, #high(TIMER2_RELOAD)
118D 75CA9A    1174       mov RCAP2L, #low(TIMER2_RELOAD)
1190           1175   
1190 E4        1176       clr a
1191 F530      1177       mov Count1ms+0, a
1193 F531      1178       mov Count1ms+1, a
1195 F532      1179       mov Count5sec , a
1197 D2AD      1180       setb ET2
1199 D2CA      1181       setb TR2
119B C202      1182       clr enable_clk
119D 22        1183       ret
119E           1184   
119E           1185   ;---------------------------------;
119E           1186   ; ISR for timer 2                 ;
119E           1187   ;---------------------------------;
119E           1188   Timer2_ISR:
119E C2CF      1189       clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
11A0 B290      1190       cpl P1.0 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
11A2           1191            
11A2           1192            ; The two registers used in the ISR must be saved in the stack
11A2 C0E0      1193       push acc
11A4 C0D0      1194       push psw
11A6           1195            
11A6           1196            ; Increment the 16-bit one mili second counter
11A6 0530      1197            inc Count1ms+0    ; Increment the low 8-bits first
11A8 E530      1198            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
11AA 7002      1199            jnz Inc_Done
11AC 0531      1200            inc Count1ms+1
11AE           1201   
11AE           1202   Inc_Done:
11AE           1203   
11AE           1204   ;**Oven Power Output-------------------
11AE           1205       ; Do the PWM thing
11AE           1206            ; Check if Count1ms > pwm_ratio (this is a 16-bit compare)
11AE C3        1207            clr c
11AF E54F      1208            mov a, pwm_ratio+0
11B1 9530      1209            subb a, Count1ms+0
11B3 E550      1210            mov a, pwm_ratio+1
11B5 9531      1211            subb a, Count1ms+1
11B7           1212            ; if Count1ms > pwm_ratio  the carry is set.  Just copy the carry to the pwm output pin:
11B7 9290      1213            mov PWM_OUTPUT, c
11B9           1214   ;**----------------------------------
11B9           1215            ; Check if one second has passed
11B9 E530      1216            mov a, Count1ms+0
11BB B4E831    1217            cjne a, #low(1000), Timer2_ISR_done ; Warning: this instruction changes the carry flag!
11BE E531      1218            mov a, Count1ms+1
11C0 B4032C    1219            cjne a, #high(1000), Timer2_ISR_done
11C3           1220            
11C3           1221            ; 1000 milliseconds have passed.  Set a flag so the main program knows
11C3 D200      1222            setb one_seconds_flag ; Let the main program know one second had passed
11C5           1223       
11C5 0532      1224       inc Count5sec
11C7 E532      1225       mov a, Count5sec
11C9 B40505    1226       cjne a, #5, Set_5sec_flag_done
11CC D201      1227       setb five_seconds_flag
11CE E4        1228       clr a
11CF F532      1229       mov Count5sec, a
11D1           1230       
11D1           1231   Set_5sec_flag_done:
11D1 E4        1232            clr a
11D2 F530      1233            mov Count1ms+0, a
11D4 F531      1234            mov Count1ms+1, a
11D6           1235   
11D6 300216    1236       jnb enable_clk, Timer2_ISR_done ;if the clk is enabled, increment the second. Otherwise skip
11D9           1237   ; Increment the run time counter and state time counter
11D9 E538      1238            mov a, Run_time_seconds
11DB 2401      1239            add a, #0x01
11DD D4        1240            da a
11DE F538      1241       mov Run_time_seconds, a
11E0           1242       ;check sec overflow
11E0 B4600A    1243       cjne a, #0x60, Check_sec_overflow_done
11E3 753800    1244       mov Run_time_seconds, #0x00
11E6 E539      1245       mov a, Run_time_minutes ;inc min
11E8 2401      1246       add a, #1
11EA D4        1247       da a
11EB F539      1248       mov Run_time_minutes, a
11ED           1249   Check_sec_overflow_done:
11ED 053A      1250       inc State_time
11EF           1251   Timer2_ISR_done:
11EF D0D0      1252            pop psw
11F1 D0E0      1253            pop acc
11F3 32        1254            reti
11F4           1255   
11F4           1256   
11F4           1257   ; ==================================================================================================
11F4           1258   
11F4           1259   main:
11F4 75817F    1260       mov SP, #0x7F
11F7 121181    1261       lcall Timer2_Init
11FA           1262       ;lcall INI_SPI
11FA 120088    1263       lcall LCD_4BIT
11FD 120466    1264       lcall InitSerialPort
1200 120CE2    1265       lcall INI_PLAYBACK_TEMP
1203           1266       ;orl AUXR, #0x01 ; pin 4.4
1203           1267       ; In case you decide to use the pins of P0, configure the port in bidirectional mode. Can be ignored
1203 75E600    1268       mov P0M0, #0
1206 75E700    1269       mov P0M1, #0
1209 D2AF      1270       setb EA   ;Enable global enterupt
120B D204      1271       setb SPAN_ENG ; setb for english, clr for spanish
120D           1272   
120D           1273       ;Set the default pwm output ratio to 0%.  That is 0ms of every second:
120D 754F00    1274            mov pwm_ratio+0, #low(0)
1210 755000    1275            mov pwm_ratio+1, #high(0)
1213 753300    1276       mov States, #0
1216 755300    1277       mov Profile, #0
1219 120FD7    1278       lcall Load_Configuration1
121C           1279       ;setb FAN
121C 120EB4    1280       lcall Animation 
121F           1281   
121F           1282   
121F           1283   state0: ; idle 
121F           1284   ;***initial parameters displayed***
121F 754F00    1285       mov pwm_ratio+0, #low(0)
1222 755000    1286            mov pwm_ratio+1, #high(0)
1225           1287       
1225           1288       ;Displays Soak Temp and Time
1225 120DEA    1289       lcall State0_display
1228           1290       ;check power on
1228 12052A    1291       lcall CHECK_POWER
122B           1292       ; check the parameters being pressed
122B 120486    1293       lcall CHECK_STIME
122E 1204AF    1294       lcall CHECK_STEMP
1231 1204D8    1295       lcall CHECK_RTIME
1234 120501    1296       lcall CHECK_RTEMP
1237 120546    1297       lcall CHECK_PROFILE
123A           1298   
123A 12056C    1299       lcall CHECK_SPAN_OR_ENGL
123D           1300       
123D 2085DF    1301       jb NEXT_STATE_BUTTON, state0
1240 C002      1302            push AR2
1242 7A32      1302            mov R2, #50
1244 120039    1302            lcall ?Wait_Milli_Seconds
1247 D002      1302            pop AR2 ; debounce time
1249 2085D3    1303            jb NEXT_STATE_BUTTON, state0 ; if button not pressed, loop
124C 3085FD    1304            jnb NEXT_STATE_BUTTON, $
124F           1305   state0_done:
124F 753301    1306       mov States, #1
1252 753A00    1307       mov State_time, #0
1255 D202      1308       setb enable_clk
1257           1309       ; ***play audio***
1257           1309       ;cjne sound_flag, #0, $
1257           1309       
1257 C28E      1309       clr TR1 ; Stop Timer 1 ISR from playing previous request
1259 D2A5      1309       setb FLASH_CE
125B           1309       ;setb sound_flag ; sound starts
125B C2A6      1309       clr SPEAKER ; Turn off speaker
125D C2A5      1309       clr FLASH_CE ; Enable SPI Flash
125F 7403      1309       mov a, #READ_BYTES
1261 12040D    1309       lcall Send_SPI
1264           1309       ; Set the initial position in memory where to start playing
1264           1309       
1264 7418      1309       mov a, #0x18 ; change initial position
1266 12040D    1309       lcall Send_SPI
1269 74CB      1309       mov a, #0xcb ; next memory position
126B 12040D    1309       lcall Send_SPI
126E 74A8      1309       mov a, #0xa8 ; next memory position
1270 12040D    1309       lcall Send_SPI
1273 7418      1309       mov a, #0x18 ; request first byte to send to DAC
1275 12040D    1309       lcall Send_SPI
1278           1309       
1278           1309       ; How many bytes to play?
1278 754E02    1309       mov w+2, #0x02 ; Load the high byte of the number of bytes to play
127B 754D0F    1309       mov w+1, #0x0f ; Load the middle byte of the number of bytes to play
127E 754C58    1309       mov w+0, #0x58 ; Load the low byte of the number of bytes to play
1281           1309       
1281           1309       
1281 D2A6      1309       setb SPEAKER ;Turn on speaker
1283 D28E      1309       setb TR1 ;Start playback by enabling Timer1
1285           1309       ;clr sound_flag ; sound ends
1285 12110B    1310       lcall Wait_One_Second
1288           1311        
1288           1312   
1288           1313   state1_beginning:
1288           1314   
1288           1315       ;Start Run Time
1288 753800    1316       mov Run_time_seconds, #0 ; time starts at 0:00
128B 753900    1317       mov Run_time_minutes, #0
128E 753A00    1318       mov State_time, #0
1291           1319   
1291           1320       ;***clear the screen and set new display***
1291 120D44    1321       lcall Initialize_State_Display
1294 C0E0      1322            push acc
1296 7407      1322            mov a, #7
1298 14        1322            dec a
1299 1200BD    1322            lcall ?Set_Cursor_2 ; Select column and row
129C D0E0      1322            pop acc
129E C083      1323            push dph
12A0 C082      1323            push dpl
12A2 C0E0      1323            push acc
12A4 9003C7    1323            mov dptr, #Ramp2Soak
12A7 1200B2    1323            lcall ?Send_Constant_String
12AA D0E0      1323            pop acc
12AC D082      1323            pop dpl
12AE D083      1323            pop dph; displays current state
12B0           1324   
12B0           1325       ;Set the default pwm output ratio to 100%.  That is 1000ms of every second:
12B0 754FE8    1326            mov pwm_ratio+0, #low(1000)
12B3 755003    1327            mov pwm_ratio+1, #high(1000)
12B6 300433    1328       jnb SPAN_ENG, SPANISH1
12B9           1329       ; ***play audio***
12B9           1329       ;cjne sound_flag, #0, $
12B9 121130    1329       lcall Wait_Half_Second
12BC C28E      1329       clr TR1 ; Stop Timer 1 ISR from playing previous request
12BE D2A5      1329       setb FLASH_CE
12C0           1329       ;setb sound_flag ; sound starts
12C0 C2A6      1329       clr SPEAKER ; Turn off speaker
12C2 C2A5      1329       clr FLASH_CE ; Enable SPI Flash
12C4 7403      1329       mov a, #READ_BYTES
12C6 12040D    1329       lcall Send_SPI
12C9           1329       ; Set the initial position in memory where to start playing
12C9           1329       
12C9 7400      1329       mov a, #0x00 ; change initial position
12CB 12040D    1329       lcall Send_SPI
12CE 7400      1329       mov a, #0x00 ; next memory position
12D0 12040D    1329       lcall Send_SPI
12D3 742D      1329       mov a, #0x2d ; next memory position
12D5 12040D    1329       lcall Send_SPI
12D8 7400      1329       mov a, #0x00 ; request first byte to send to DAC
12DA 12040D    1329       lcall Send_SPI
12DD           1329       
12DD           1329       ; How many bytes to play?
12DD 754E00    1329       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
12E0 754D4E    1329       mov w+1, #0x4e ; Load the middle byte of the number of bytes to play
12E3 754C20    1329       mov w+0, #0x20 ; Load the low byte of the number of bytes to play
12E6           1329       
12E6           1329       
12E6 D2A6      1329       setb SPEAKER ;Turn on speaker
12E8 D28E      1329       setb TR1 ;Start playback by enabling Timer1
12EA           1329       ;clr sound_flag ; sound ends
12EA           1330       ;lcall Wait_One_Second
12EA 8036      1331       sjmp state1
12EC           1332   SPANISH1:
12EC           1333       ; ***play audio***
12EC           1333       ;cjne sound_flag, #0, $
12EC 121130    1333       lcall Wait_Half_Second
12EF C28E      1333       clr TR1 ; Stop Timer 1 ISR from playing previous request
12F1 D2A5      1333       setb FLASH_CE
12F3           1333       ;setb sound_flag ; sound starts
12F3 C2A6      1333       clr SPEAKER ; Turn off speaker
12F5 C2A5      1333       clr FLASH_CE ; Enable SPI Flash
12F7 7403      1333       mov a, #READ_BYTES
12F9 12040D    1333       lcall Send_SPI
12FC           1333       ; Set the initial position in memory where to start playing
12FC           1333       
12FC 7405      1333       mov a, #0x05 ; change initial position
12FE 12040D    1333       lcall Send_SPI
1301 7457      1333       mov a, #0x57 ; next memory position
1303 12040D    1333       lcall Send_SPI
1306 7430      1333       mov a, #0x30 ; next memory position
1308 12040D    1333       lcall Send_SPI
130B 7405      1333       mov a, #0x05 ; request first byte to send to DAC
130D 12040D    1333       lcall Send_SPI
1310           1333       
1310           1333       ; How many bytes to play?
1310 754E00    1333       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1313 754DEA    1333       mov w+1, #0xea ; Load the middle byte of the number of bytes to play
1316 754C60    1333       mov w+0, #0x60 ; Load the low byte of the number of bytes to play
1319           1333       
1319           1333       
1319 D2A6      1333       setb SPEAKER ;Turn on speaker
131B D28E      1333       setb TR1 ;Start playback by enabling Timer1
131D           1333       ;clr sound_flag ; sound ends
131D           1334       ;mov FAN, #1
131D 8003      1335       sjmp state1
131F           1336       
131F           1337   main_1:
131F 0211F4    1338            ljmp main
1322           1339   
1322           1340   state1: ; ramp to soak
1322           1341       ;check power on
1322 12052A    1342       lcall CHECK_POWER
1325           1343       ;Update Time and Temp
1325 120DC3    1344       lcall Update_Display
1328 121086    1345       lcall Average_Temp
132B           1346       ;lcall CHECK_SPAN_OR_ENGL
132B           1347       
132B           1348       ;Decides if going to Spanish or English
132B           1349       ;jb SPAN_ENG, SPANISH1
132B 1205B2    1350       lcall SOUND_FSM
132E           1351   ;SPANISH1:
132E           1352       ;lcall SOUND_FSM_S
132E           1353   
132E           1354   Check_Temp_done1:
132E           1355   
132E           1356       ;check if temp is below 150 
132E E53B      1357       mov a, Temp_oven           
1330 9534      1358       subb a, Temp_soak
1332 5014      1359       jnc state1_done        ; if greater, jump to state 2
1334 6012      1360       jz state1_done         ; if equal to, jump to state 2
1336 4000      1361       jc Check_state1_safety ; if less than, check state time
1338           1362   Check_state1_safety:       ; safety
1338 E53B      1363       mov a, Temp_oven           
133A 9432      1364       subb a, #50
133C 50E4      1365       jnc state1             ; if greater, go back to state1
133E E53A      1366       mov a, State_time      ; if less than 50C, check if state time is too long
1340 943C      1367       subb a, #60
1342 50DB      1368       jnc main_1             ; if greater, restart
1344 60D9      1369       jz main_1              ; if equal to, restart
1346 40DA      1370       jc state1              ; if less than, go back to state1
1348           1371   ;*Checking moving to states with buttons---- 
1348           1372   ;*Will remove after proper temperature reading----
1348           1373   
1348           1374       ;jb NEXT_STATE_BUTTON, state1
1348           1375       ;Wait_Milli_Seconds(#50) ; debounce time
1348           1376            ;jb NEXT_STATE_BUTTON, state1 ; if button not pressed, loop
1348           1377            ;jnb NEXT_STATE_BUTTON, $ 
1348           1378   
1348           1379   state1_done:
1348           1380       ;mov FAN, #0
1348 753302    1381       mov States, #2
134B           1382   
134B           1383   ; preheat/soak
134B           1384   state2_beginning: 
134B 753A00    1385       mov State_time, #0;x00 ;clear the state time
134E           1386       ;***clear the screen and set new display***
134E 120D44    1387       lcall Initialize_State_Display
1351 C0E0      1388            push acc
1353 7407      1388            mov a, #7
1355 14        1388            dec a
1356 1200BD    1388            lcall ?Set_Cursor_2 ; Select column and row
1359 D0E0      1388            pop acc
135B C083      1389            push dph
135D C082      1389            push dpl
135F C0E0      1389            push acc
1361 9003D1    1389            mov dptr, #Soak
1364 1200B2    1389            lcall ?Send_Constant_String
1367 D0E0      1389            pop acc
1369 D082      1389            pop dpl
136B D083      1389            pop dph ;displays current state
136D           1390   
136D           1391       ;Set the default pwm output ratio to 20%.  That is 200ms of every second:
136D 754FC8    1392            mov pwm_ratio+0, #low(200)
1370 755000    1393            mov pwm_ratio+1, #high(000)
1373           1394       ; Produces SOAK on speaker
1373 300433    1395       jnb SPAN_ENG, SPANISH2
1376           1396       ; ***play audio***
1376           1396       ;cjne sound_flag, #0, $
1376 121130    1396       lcall Wait_Half_Second
1379 C28E      1396       clr TR1 ; Stop Timer 1 ISR from playing previous request
137B D2A5      1396       setb FLASH_CE
137D           1396       ;setb sound_flag ; sound starts
137D C2A6      1396       clr SPEAKER ; Turn off speaker
137F C2A5      1396       clr FLASH_CE ; Enable SPI Flash
1381 7403      1396       mov a, #READ_BYTES
1383 12040D    1396       lcall Send_SPI
1386           1396       ; Set the initial position in memory where to start playing
1386           1396       
1386 7400      1396       mov a, #0x00 ; change initial position
1388 12040D    1396       lcall Send_SPI
138B 7444      1396       mov a, #0x44 ; next memory position
138D 12040D    1396       lcall Send_SPI
1390 74DD      1396       mov a, #0xdd ; next memory position
1392 12040D    1396       lcall Send_SPI
1395 7400      1396       mov a, #0x00 ; request first byte to send to DAC
1397 12040D    1396       lcall Send_SPI
139A           1396       
139A           1396       ; How many bytes to play?
139A 754E00    1396       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
139D 754D4E    1396       mov w+1, #0x4e ; Load the middle byte of the number of bytes to play
13A0 754C20    1396       mov w+0, #0x20 ; Load the low byte of the number of bytes to play
13A3           1396       
13A3           1396       
13A3 D2A6      1396       setb SPEAKER ;Turn on speaker
13A5 D28E      1396       setb TR1 ;Start playback by enabling Timer1
13A7           1396       ;clr sound_flag ; sound ends
13A7 8031      1397       sjmp state2
13A9           1398   SPANISH2:
13A9           1399       ; ***play audio***
13A9           1399       ;cjne sound_flag, #0, $
13A9 121130    1399       lcall Wait_Half_Second
13AC C28E      1399       clr TR1 ; Stop Timer 1 ISR from playing previous request
13AE D2A5      1399       setb FLASH_CE
13B0           1399       ;setb sound_flag ; sound starts
13B0 C2A6      1399       clr SPEAKER ; Turn off speaker
13B2 C2A5      1399       clr FLASH_CE ; Enable SPI Flash
13B4 7403      1399       mov a, #READ_BYTES
13B6 12040D    1399       lcall Send_SPI
13B9           1399       ; Set the initial position in memory where to start playing
13B9           1399       
13B9 7406      1399       mov a, #0x06 ; change initial position
13BB 12040D    1399       lcall Send_SPI
13BE 741A      1399       mov a, #0x1a ; next memory position
13C0 12040D    1399       lcall Send_SPI
13C3 7480      1399       mov a, #0x80 ; next memory position
13C5 12040D    1399       lcall Send_SPI
13C8 7406      1399       mov a, #0x06 ; request first byte to send to DAC
13CA 12040D    1399       lcall Send_SPI
13CD           1399       
13CD           1399       ; How many bytes to play?
13CD 754E00    1399       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
13D0 754D9C    1399       mov w+1, #0x9c ; Load the middle byte of the number of bytes to play
13D3 754C40    1399       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
13D6           1399       
13D6           1399       
13D6 D2A6      1399       setb SPEAKER ;Turn on speaker
13D8 D28E      1399       setb TR1 ;Start playback by enabling Timer1
13DA           1399       ;clr sound_flag ; sound ends
13DA           1400   
13DA           1401   state2:
13DA           1402       ;check power on
13DA 12052A    1403       lcall CHECK_POWER 
13DD           1404       ;Update Time and Temp
13DD 120DC3    1405       lcall Update_Display
13E0 121086    1406       lcall Average_Temp
13E3           1407       ;lcall CHECK_SPAN_OR_ENGL
13E3           1408   
13E3           1409       ;jb SPAN_ENG, SPANISH2
13E3 1205B2    1410       lcall SOUND_FSM
13E6 8000      1411       sjmp Check_Temp_done2
13E8           1412   ;SPANISH2:
13E8           1413       ;lcall SOUND_FSM_S
13E8           1414       
13E8           1415       ; loop back to state2 if run time is less than soak time. If greater than jump to state3 cuz of overflow of time
13E8           1416   Check_Temp_done2:     
13E8 E53A      1417       mov a, State_time
13EA 9535      1418       subb a, Time_soak
13EC 5002      1419       jnc state2_done
13EE 40EA      1420       jc state2
13F0           1421   
13F0           1422   state2_done:
13F0 753A03    1423       mov State_time, #3
13F3           1424   
13F3           1425   ; ramp to peak
13F3           1426   state3_beginning:
13F3           1427       ;setb OVEN_POWER ;turn power on 100%
13F3           1428   
13F3           1429       ;***clear the screen and set new display***
13F3 120D44    1430       lcall Initialize_State_Display
13F6 C0E0      1431            push acc
13F8 7407      1431            mov a, #7
13FA 14        1431            dec a
13FB 1200BD    1431            lcall ?Set_Cursor_2 ; Select column and row
13FE D0E0      1431            pop acc
1400 C083      1432            push dph
1402 C082      1432            push dpl
1404 C0E0      1432            push acc
1406 9003D6    1432            mov dptr, #Ramp2Peak
1409 1200B2    1432            lcall ?Send_Constant_String
140C D0E0      1432            pop acc
140E D082      1432            pop dpl
1410 D083      1432            pop dph
1412           1433   
1412           1434       ;Set the default pwm output ratio to 100%.  That is 1000ms of every second:
1412 754FE8    1435            mov pwm_ratio+0, #low(1000)
1415 755003    1436            mov pwm_ratio+1, #high(1000)
1418           1437   
1418           1438       ; Produces RAMP TO PEAK on speaker
1418 300433    1439       jnb SPAN_ENG, SPANISH3
141B           1440       ; ***play audio***
141B           1440       ;cjne sound_flag, #0, $
141B 121130    1440       lcall Wait_Half_Second
141E C28E      1440       clr TR1 ; Stop Timer 1 ISR from playing previous request
1420 D2A5      1440       setb FLASH_CE
1422           1440       ;setb sound_flag ; sound starts
1422 C2A6      1440       clr SPEAKER ; Turn off speaker
1424 C2A5      1440       clr FLASH_CE ; Enable SPI Flash
1426 7403      1440       mov a, #READ_BYTES
1428 12040D    1440       lcall Send_SPI
142B           1440       ; Set the initial position in memory where to start playing
142B           1440       
142B 7400      1440       mov a, #0x00 ; change initial position
142D 12040D    1440       lcall Send_SPI
1430 748B      1440       mov a, #0x8b ; next memory position
1432 12040D    1440       lcall Send_SPI
1435 74CA      1440       mov a, #0xca ; next memory position
1437 12040D    1440       lcall Send_SPI
143A 7400      1440       mov a, #0x00 ; request first byte to send to DAC
143C 12040D    1440       lcall Send_SPI
143F           1440       
143F           1440       ; How many bytes to play?
143F 754E00    1440       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1442 754D75    1440       mov w+1, #0x75 ; Load the middle byte of the number of bytes to play
1445 754C30    1440       mov w+0, #0x30 ; Load the low byte of the number of bytes to play
1448           1440       
1448           1440       
1448 D2A6      1440       setb SPEAKER ;Turn on speaker
144A D28E      1440       setb TR1 ;Start playback by enabling Timer1
144C           1440       ;clr sound_flag ; sound ends
144C 8031      1441       sjmp state3
144E           1442   SPANISH3:
144E           1443       ; ***play audio***
144E           1443       ;cjne sound_flag, #0, $
144E 121130    1443       lcall Wait_Half_Second
1451 C28E      1443       clr TR1 ; Stop Timer 1 ISR from playing previous request
1453 D2A5      1443       setb FLASH_CE
1455           1443       ;setb sound_flag ; sound starts
1455 C2A6      1443       clr SPEAKER ; Turn off speaker
1457 C2A5      1443       clr FLASH_CE ; Enable SPI Flash
1459 7403      1443       mov a, #READ_BYTES
145B 12040D    1443       lcall Send_SPI
145E           1443       ; Set the initial position in memory where to start playing
145E           1443       
145E 7406      1443       mov a, #0x06 ; change initial position
1460 12040D    1443       lcall Send_SPI
1463 74B6      1443       mov a, #0xb6 ; next memory position
1465 12040D    1443       lcall Send_SPI
1468 74C0      1443       mov a, #0xc0 ; next memory position
146A 12040D    1443       lcall Send_SPI
146D 7406      1443       mov a, #0x06 ; request first byte to send to DAC
146F 12040D    1443       lcall Send_SPI
1472           1443       
1472           1443       ; How many bytes to play?
1472 754E00    1443       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1475 754D75    1443       mov w+1, #0x75 ; Load the middle byte of the number of bytes to play
1478 754C30    1443       mov w+0, #0x30 ; Load the low byte of the number of bytes to play
147B           1443       
147B           1443       
147B D2A6      1443       setb SPEAKER ;Turn on speaker
147D D28E      1443       setb TR1 ;Start playback by enabling Timer1
147F           1443       ;clr sound_flag ; sound ends
147F           1444   
147F           1445   state3: 
147F           1446       ;check power on
147F 12052A    1447       lcall CHECK_POWER
1482 121086    1448       lcall Average_Temp
1485           1449       ;lcall CHECK_SPAN_OR_ENGL
1485           1450       
1485           1451       ;Update Time and Temp
1485 120DC3    1452       lcall Update_Display
1488           1453       ;jb SPAN_ENG, SPANISH3
1488 1205B2    1454       lcall SOUND_FSM
148B 8000      1455       sjmp Check_Temp_done3
148D           1456   ;SPANISH3:
148D           1457       ;lcall SOUND_FSM_S
148D           1458       
148D           1459   Check_Temp_done3:  
148D           1460    
148D E53B      1461       mov a, Temp_oven           
148F 9536      1462       subb a, Temp_refl
1491 5004      1463       jnc state3_done    ; if greater, jump to state 4
1493 6002      1464       jz state3_done ; if equal to, jump to state 4
1495 40E8      1465       jc state3 ; if less than, go back to state3
1497           1466    
1497           1467   state3_done:
1497 753A04    1468       mov State_time, #4
149A           1469   
149A           1470   ; reflow 
149A           1471   state4_beginning:
149A           1472       
149A 753A00    1473       mov State_time, #0;x00 clear the state time
149D           1474       ;***clear the screen and set new display***
149D 120D44    1475       lcall Initialize_State_Display
14A0 C0E0      1476            push acc
14A2 7407      1476            mov a, #7
14A4 14        1476            dec a
14A5 1200BD    1476            lcall ?Set_Cursor_2 ; Select column and row
14A8 D0E0      1476            pop acc
14AA C083      1477            push dph
14AC C082      1477            push dpl
14AE C0E0      1477            push acc
14B0 9003E0    1477            mov dptr, #Reflow
14B3 1200B2    1477            lcall ?Send_Constant_String
14B6 D0E0      1477            pop acc
14B8 D082      1477            pop dpl
14BA D083      1477            pop dph
14BC           1478   
14BC           1479       ;Set the default pwm output ratio to 20%.  That is 200ms of every second:
14BC 754FC8    1480            mov pwm_ratio+0, #low(200)
14BF 755000    1481            mov pwm_ratio+1, #high(000)
14C2           1482   
14C2           1483       ; Produces REFLOW on speaker
14C2 300433    1484       jnb SPAN_ENG, SPANISH4
14C5           1485       ; ***play audio***
14C5           1485       ;cjne sound_flag, #0, $
14C5 121130    1485       lcall Wait_Half_Second
14C8 C28E      1485       clr TR1 ; Stop Timer 1 ISR from playing previous request
14CA D2A5      1485       setb FLASH_CE
14CC           1485       ;setb sound_flag ; sound starts
14CC C2A6      1485       clr SPEAKER ; Turn off speaker
14CE C2A5      1485       clr FLASH_CE ; Enable SPI Flash
14D0 7403      1485       mov a, #READ_BYTES
14D2 12040D    1485       lcall Send_SPI
14D5           1485       ; Set the initial position in memory where to start playing
14D5           1485       
14D5 7400      1485       mov a, #0x00 ; change initial position
14D7 12040D    1485       lcall Send_SPI
14DA 74F0      1485       mov a, #0xf0 ; next memory position
14DC 12040D    1485       lcall Send_SPI
14DF 7463      1485       mov a, #0x63 ; next memory position
14E1 12040D    1485       lcall Send_SPI
14E4 7400      1485       mov a, #0x00 ; request first byte to send to DAC
14E6 12040D    1485       lcall Send_SPI
14E9           1485       
14E9           1485       ; How many bytes to play?
14E9 754E00    1485       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
14EC 754D59    1485       mov w+1, #0x59 ; Load the middle byte of the number of bytes to play
14EF 754CD8    1485       mov w+0, #0xd8 ; Load the low byte of the number of bytes to play
14F2           1485       
14F2           1485       
14F2 D2A6      1485       setb SPEAKER ;Turn on speaker
14F4 D28E      1485       setb TR1 ;Start playback by enabling Timer1
14F6           1485       ;clr sound_flag ; sound ends
14F6 8031      1486       sjmp state4
14F8           1487   SPANISH4:
14F8           1488       ; ***play audio***
14F8           1488       ;cjne sound_flag, #0, $
14F8 121130    1488       lcall Wait_Half_Second
14FB C28E      1488       clr TR1 ; Stop Timer 1 ISR from playing previous request
14FD D2A5      1488       setb FLASH_CE
14FF           1488       ;setb sound_flag ; sound starts
14FF C2A6      1488       clr SPEAKER ; Turn off speaker
1501 C2A5      1488       clr FLASH_CE ; Enable SPI Flash
1503 7403      1488       mov a, #READ_BYTES
1505 12040D    1488       lcall Send_SPI
1508           1488       ; Set the initial position in memory where to start playing
1508           1488       
1508 7419      1488       mov a, #0x19 ; change initial position
150A 12040D    1488       lcall Send_SPI
150D 748E      1488       mov a, #0x8e ; next memory position
150F 12040D    1488       lcall Send_SPI
1512 74F8      1488       mov a, #0xf8 ; next memory position
1514 12040D    1488       lcall Send_SPI
1517 7419      1488       mov a, #0x19 ; request first byte to send to DAC
1519 12040D    1488       lcall Send_SPI
151C           1488       
151C           1488       ; How many bytes to play?
151C 754E00    1488       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
151F 754D75    1488       mov w+1, #0x75 ; Load the middle byte of the number of bytes to play
1522 754C30    1488       mov w+0, #0x30 ; Load the low byte of the number of bytes to play
1525           1488       
1525           1488       
1525 D2A6      1488       setb SPEAKER ;Turn on speaker
1527 D28E      1488       setb TR1 ;Start playback by enabling Timer1
1529           1488       ;clr sound_flag ; sound ends
1529           1489   
1529           1490   state4:
1529           1491       ;check power on
1529 12052A    1492       lcall CHECK_POWER
152C           1493       ;Update Time and Temp
152C 120DC3    1494       lcall Update_Display
152F 121086    1495       lcall Average_Temp
1532           1496       ;lcall CHECK_SPAN_OR_ENGL
1532           1497      ;jb SPAN_ENG, SPANISH4
1532 1205B2    1498       lcall SOUND_FSM
1535 8000      1499       sjmp Check_Temp_done4
1537           1500   ;SPANISH4:
1537           1501       ;lcall SOUND_FSM_S
1537           1502       
1537           1503   Check_Temp_done4:  
1537           1504      
1537           1505       ; loop back to state2 if run time is less than soak time
1537 E53A      1506       mov a, State_time
1539 9537      1507       subb a, Time_refl
153B 5002      1508       jnc state4_done
153D 40EA      1509       jc state4
153F           1510   
153F           1511   state4_done: 
153F 753A00    1512       mov State_time, #0
1542 021545    1513       ljmp state5_beginning 
1545           1514   
1545           1515   
1545           1516   ; cooling
1545           1517   state5_beginning: ; turn oven off
1545           1518       ;clr OVEN_POWER
1545           1519   
1545           1520   ;***clear the screen and set new display***
1545 120D44    1521       lcall Initialize_State_Display
1548 C083      1522            push dph
154A C082      1522            push dpl
154C C0E0      1522            push acc
154E 9003E7    1522            mov dptr, #Cooling
1551 1200B2    1522            lcall ?Send_Constant_String
1554 D0E0      1522            pop acc
1556 D082      1522            pop dpl
1558 D083      1522            pop dph
155A           1523   
155A           1524       ;Set the default pwm output ratio to 0%.  That is 0ms of every second:
155A 754F00    1525            mov pwm_ratio+0, #low(0)
155D 755000    1526            mov pwm_ratio+1, #high(0)
1560           1527   
1560           1528       ; Produces COOLING on speaker
1560 300433    1529       jnb SPAN_ENG, SPANISH5
1563           1530       ; ***play audio***
1563           1530       ;cjne sound_flag, #0, $
1563 121130    1530       lcall Wait_Half_Second
1566 C28E      1530       clr TR1 ; Stop Timer 1 ISR from playing previous request
1568 D2A5      1530       setb FLASH_CE
156A           1530       ;setb sound_flag ; sound starts
156A C2A6      1530       clr SPEAKER ; Turn off speaker
156C C2A5      1530       clr FLASH_CE ; Enable SPI Flash
156E 7403      1530       mov a, #READ_BYTES
1570 12040D    1530       lcall Send_SPI
1573           1530       ; Set the initial position in memory where to start playing
1573           1530       
1573 7401      1530       mov a, #0x01 ; change initial position
1575 12040D    1530       lcall Send_SPI
1578 7448      1530       mov a, #0x48 ; next memory position
157A 12040D    1530       lcall Send_SPI
157D 749A      1530       mov a, #0x9a ; next memory position
157F 12040D    1530       lcall Send_SPI
1582 7401      1530       mov a, #0x01 ; request first byte to send to DAC
1584 12040D    1530       lcall Send_SPI
1587           1530       
1587           1530       ; How many bytes to play?
1587 754E00    1530       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
158A 754D6B    1530       mov w+1, #0x6b ; Load the middle byte of the number of bytes to play
158D 754C6C    1530       mov w+0, #0x6c ; Load the low byte of the number of bytes to play
1590           1530       
1590           1530       
1590 D2A6      1530       setb SPEAKER ;Turn on speaker
1592 D28E      1530       setb TR1 ;Start playback by enabling Timer1
1594           1530       ;clr sound_flag ; sound ends
1594 8031      1531       sjmp state5
1596           1532   SPANISH5:
1596           1533       ; ***play audio***
1596           1533       ;cjne sound_flag, #0, $
1596 121130    1533       lcall Wait_Half_Second
1599 C28E      1533       clr TR1 ; Stop Timer 1 ISR from playing previous request
159B D2A5      1533       setb FLASH_CE
159D           1533       ;setb sound_flag ; sound starts
159D C2A6      1533       clr SPEAKER ; Turn off speaker
159F C2A5      1533       clr FLASH_CE ; Enable SPI Flash
15A1 7403      1533       mov a, #READ_BYTES
15A3 12040D    1533       lcall Send_SPI
15A6           1533       ; Set the initial position in memory where to start playing
15A6           1533       
15A6 7419      1533       mov a, #0x19 ; change initial position
15A8 12040D    1533       lcall Send_SPI
15AB 74F0      1533       mov a, #0xf0 ; next memory position
15AD 12040D    1533       lcall Send_SPI
15B0 74A0      1533       mov a, #0xa0 ; next memory position
15B2 12040D    1533       lcall Send_SPI
15B5 7419      1533       mov a, #0x19 ; request first byte to send to DAC
15B7 12040D    1533       lcall Send_SPI
15BA           1533       
15BA           1533       ; How many bytes to play?
15BA 754E00    1533       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
15BD 754DEA    1533       mov w+1, #0xea ; Load the middle byte of the number of bytes to play
15C0 754C60    1533       mov w+0, #0x60 ; Load the low byte of the number of bytes to play
15C3           1533       
15C3           1533       
15C3 D2A6      1533       setb SPEAKER ;Turn on speaker
15C5 D28E      1533       setb TR1 ;Start playback by enabling Timer1
15C7           1533       ;clr sound_flag ; sound ends
15C7           1534       ;cpl FAN
15C7           1535   
15C7           1536   state5:
15C7           1537       ;check power on
15C7 12052A    1538       lcall CHECK_POWER
15CA           1539       
15CA           1540       ; update display
15CA 120DC3    1541       lcall Update_Display
15CD 121086    1542       lcall Average_Temp
15D0           1543   
15D0           1544       ;jb SPAN_ENG, SPANISH5
15D0 1205B2    1545       lcall SOUND_FSM
15D3 8000      1546       sjmp Check_Temp_done5
15D5           1547   ;SPANISH5:
15D5           1548       ;lcall SOUND_FSM_S
15D5           1549       
15D5           1550   Check_Temp_done5:  
15D5           1551   
15D5 E53B      1552       mov a, Temp_oven
15D7 943C      1553       subb a, #60
15D9 50EC      1554       JNC state5    ; if greater, jump back to state 5
15DB 60EA      1555       JZ state5 ; if equal to, go back to state5
15DD 4000      1556       JC state5_done ; if less than, go back to state 0
15DF           1557   
15DF           1558       ;*Checking moving to states with buttons---- 
15DF           1559   ;*Will remove after proper temperature reading----
15DF           1560   
15DF           1561       ;jb NEXT_STATE_BUTTON, state5
15DF           1562       ;Wait_Milli_Seconds(#50) ; debounce time
15DF           1563            ;jb NEXT_STATE_BUTTON, state5 ; if button not pressed, loop
15DF           1564            ;jnb NEXT_STATE_BUTTON, $ 
15DF           1565   
15DF           1566   state5_done:
15DF           1567       ; ***play audio***
15DF           1567       ;cjne sound_flag, #0, $
15DF           1567       
15DF C28E      1567       clr TR1 ; Stop Timer 1 ISR from playing previous request
15E1 D2A5      1567       setb FLASH_CE
15E3           1567       ;setb sound_flag ; sound starts
15E3 C2A6      1567       clr SPEAKER ; Turn off speaker
15E5 C2A5      1567       clr FLASH_CE ; Enable SPI Flash
15E7 7403      1567       mov a, #READ_BYTES
15E9 12040D    1567       lcall Send_SPI
15EC           1567       ; Set the initial position in memory where to start playing
15EC           1567       
15EC 7416      1567       mov a, #0x16 ; change initial position
15EE 12040D    1567       lcall Send_SPI
15F1 74BC      1567       mov a, #0xbc ; next memory position
15F3 12040D    1567       lcall Send_SPI
15F6 7450      1567       mov a, #0x50 ; next memory position
15F8 12040D    1567       lcall Send_SPI
15FB 7416      1567       mov a, #0x16 ; request first byte to send to DAC
15FD 12040D    1567       lcall Send_SPI
1600           1567       
1600           1567       ; How many bytes to play?
1600 754E02    1567       mov w+2, #0x02 ; Load the high byte of the number of bytes to play
1603 754D0F    1567       mov w+1, #0x0f ; Load the middle byte of the number of bytes to play
1606 754C58    1567       mov w+0, #0x58 ; Load the low byte of the number of bytes to play
1609           1567       
1609           1567       
1609 D2A6      1567       setb SPEAKER ;Turn on speaker
160B D28E      1567       setb TR1 ;Start playback by enabling Timer1
160D           1567       ;clr sound_flag ; sound ends
160D 12110B    1568       lcall Wait_One_Second
1610 753A00    1569       mov State_time, #0
1613 753300    1570       mov States, #0
1616           1571       ;setb FAN
1616 0211F4    1572       ljmp main
1619           1573   
1619           1574   EN
