                  2   $LIST
0000              4   
0000              5   
0000              6   ;-------------------------------------------------------------------------------------------------------------------------------
0000              7   ;These EQU must match the wiring between the microcontroller and ADC
0000              8   CLK  EQU 22118400
0000              9   TIMER1_RATE    EQU 25000 ;22050     ; 22050Hz is the sampling rate of the wav file we are playing
0000             10   TIMER1_RELOAD  EQU 0x10000-(CLK/TIMER1_RATE)
0000             11   BAUD equ 115200
0000             12   BRG_VAL equ (0x100-(CLK/(16*BAUD)))
0000             13   
0000             14   TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
0000             15   TIMER2_RELOAD EQU (65536-(CLK/TIMER2_RATE))
0000             16   
0000             17   ;shjfjdfs
0000             18   ;-------------------------------------------------------------------------------------------------------------------------------
0000             19   ;Button Pin Mapping
0000             20   NEXT_STATE_BUTTON  equ P0.5
0000             21   STIME_BUTTON    equ P0.2
0000             22   STEMP_BUTTON    equ P0.3
0000             23   RTIME_BUTTON    equ P0.4
0000             24   RTEMP_BUTTON    equ P0.6
0000             25   SPAN_ENGL_BUTTON equ P0.0
0000             26   
0000             27   POWER_BUTTON    equ P4.5
0000             28   SHIFT_BUTTON    equ p0.1
0000             29   
0000             30   ;Output Pins
0000             31   OVEN_POWER      equ P0.7
0000             32   SPEAKER         equ P2.6
0000             33   
0000             34   PWM_OUTPUT      equ P1.0 ; Attach an LED (with 1k resistor in series) to P1.0
0000             35   FAN             equ P1.1
0000             36   
0000             37   
0000             38   ;FLASH pins
0000             39   MY_MOSI_SOUND EQU P2.4
0000             40   MY_MISO_SOUND EQU P2.1
0000             41   MY_SCLK_SOUND EQU P2.0
0000             42   FLASH_CE      EQU P2.5
0000             43   
0000             44   ;Thermowire Pins
0000             45   CE_ADC    EQU  P1.7
0000             46   MY_MOSI   EQU  P1.6
0000             47   MY_MISO   EQU  P1.5
0000             48   MY_SCLK   EQU  P1.4 
0000             49   
0000             50   ; Commands supported by the SPI flash memory according to the datasheet
0000             51   WRITE_ENABLE     EQU 0x06  ; Address:0 Dummy:0 Num:0
0000             52   WRITE_DISABLE    EQU 0x04  ; Address:0 Dummy:0 Num:0
0000             53   READ_STATUS      EQU 0x05  ; Address:0 Dummy:0 Num:1 to infinite
0000             54   READ_BYTES       EQU 0x03  ; Address:3 Dummy:0 Num:1 to infinite
0000             55   READ_SILICON_ID  EQU 0xab  ; Address:0 Dummy:3 Num:1 to infinite
0000             56   FAST_READ        EQU 0x0b  ; Address:3 Dummy:1 Num:1 to infinite
0000             57   WRITE_STATUS     EQU 0x01  ; Address:0 Dummy:0 Num:1
0000             58   WRITE_BYTES      EQU 0x02  ; Address:3 Dummy:0 Num:1 to 256
0000             59   ERASE_ALL        EQU 0xc7  ; Address:0 Dummy:0 Num:0
0000             60   ERASE_BLOCK      EQU 0xd8  ; Address:3 Dummy:0 Num:0
0000             61   READ_DEVICE_ID   EQU 0x9f  ; Address:0 Dummy:2 Num:1 to infinite
0000             62   
0000             63   ; These 'equ' must match the hardware wiring
0000             64   LCD_RS equ P3.2
0000             65   ;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
0000             66   LCD_E  equ P3.3
0000             67   LCD_D4 equ P3.4
0000             68   LCD_D5 equ P3.5
0000             69   LCD_D6 equ P3.6
0000             70   LCD_D7 equ P3.7
0000             71   
0000             72   ;-------------------------------------------------------------------------------------------------------------------------------
0000             73   
0000             74   org 0x0000
0000 02183F      75       ljmp main
0003             76   
0003             77   ; External interrupt 0 vector (not used in this code)
0003             78   org 0x0003
0003 32          79            reti
0004             80   
0004             81   ; Timer/Counter 0 overflow interrupt vector
000B             82   org 0x000B
000B 32          83            reti
000C             84   
000C             85   ; External interrupt 1 vector (not used in this code)
0013             86   org 0x0013
0013 32          87            reti
0014             88   
0014             89   ; Timer/Counter 1 overflow interrupt vector
001B             90   org 0x001B
001B 021793      91            ljmp Timer1_ISR
001E             92   
001E             93   ; Serial port receive/transmit interrupt vector (not used in this code)
0023             94   org 0x0023 
0023 32          95            reti
0024             96            
0024             97   ; Timer/Counter 2 overflow interrupt vector
002B             98   org 0x002B
002B 0217E9      99       ljmp Timer2_ISR
002E            100   ;-------------------------------------------------------------------------------------------------------------------------------
002E            101   ; Place our variables here
0030            102   DSEG at 0x30 ; Before the state machine!
0030            103   Count1ms:         ds 2 ; Used to determine when one second has passed
0032            104   Count5sec:        ds 1
0033            105   States:           ds 1
0034            106   Temp_soak:        ds 1
0035            107   Time_soak:        ds 1
0036            108   Temp_refl:        ds 1
0037            109   Time_refl:        ds 1
0038            110   Run_time_seconds: ds 1
0039            111   Run_time_minutes: ds 1
003A            112   State_time:       ds 1
003B            113   Temp_oven:        ds 1
003C            114   KTemp_oven:       ds 1
003D            115   x:                ds 4
0041            116   y:                ds 4
0045            117   bcd:              ds 5
004A            118   Result:           ds 2
004C            119   w:                ds 3
004F            120   pwm_ratio:        ds 2
0051            121   average_count:    ds 1
0052            122   K_or_C:           ds 1
0053            123   
                125   $LIST
00F0            127   
                546   $LIST
                129   $LIST
0360            131   
0360            132   ;$NOLIST
0360            133   ;$INCLUDE(sound_for_project1_index.asm)
0360            134   ;$LIST
0360            135   
0000            136   bseg
0000            137   one_seconds_flag:  dbit 1
0001            138   five_seconds_flag: dbit 1
0002            139   enable_clk:        dbit 1
0003            140   mf:                dbit 1
0004            141   SPAN_ENG:          dbit 1
0005            142   ;sound_flag: dbit 1
0005            143   
0360            144   cseg
0360            145   
0360            146   ;-------------------------------------------------------------------------------------------------------------------------------
0360            147   ;***Messages To Display*** 
0360            148   
0360            149   ;shortened labels
0360 53546D70   150   STemp:  db 'STmp:', 0
     3A00
0366 53546D3A   151   STime:  db 'STm:', 0
     00
036B 52546D70   152   RTemp:  db 'RTmp:', 0
     3A00
0371 52546D3A   153   RTime:  db 'RTm:', 0
     00
0376            154   
0376            155   ;lables for runnning oven
0376 53746174   156   state:     db 'State>' , 0
     653E00
037D 546D653E   157   time:      db 'Tme>' , 0
     00
0382 3A00       158   colon:     db ':', 0
0384 546D703E   159   temp:      db 'Tmp>', 0
     00
0389            160   
0389            161   ;labels for changin parameters
0389 5265666C   162   ReflowTemp:  db 'Reflow Temperature:', 0
     6F772054
     656D7065
     72617475
     72653A00
039D 5265666C   163   ReflowTime:  db 'Reflow Time:', 0
     6F772054
     696D653A
     00
03AA 536F616B   164   SoakTime:    db 'Soak Time:', 0
     2054696D
     653A00
03B5 536F616B   165   SoakTemp:    db 'Soak Temperature:', 0
     2054656D
     70657261
     74757265
     3A00
03C7            166   
03C7            167   
03C7            168   ;Current State in Oven
03C7 52616D70   169   Ramp2Soak: db 'Ramp-Soak' , 0
     2D536F61
     6B00
03D1 536F616B   170   Soak:      db 'Soak' , 0
     00
03D6 52616D70   171   Ramp2Peak: db 'Ramp-Peak' , 0
     2D506561
     6B00
03E0 5265666C   172   Reflow:    db 'Reflow' , 0
     6F7700
03E7 436F6F6C   173   Cooling:   db 'Cooling' , 0
     696E6700
03EF            174   
03EF            175   ;-------------------------------------------------------------------------------------------------------------------------------
03EF            176   ;FXNS FOR THERMOWIRE
03EF            177   
03EF            178   ;initialize SPI 
03EF            179   INI_SPI:
03EF D295       180            setb MY_MISO          ; Make MISO an input pin
03F1 C294       181            clr MY_SCLK           ; Mode 0,0 default
03F3 22         182            ret
03F4            183   DO_SPI_G:
03F4 C0E0       184            push acc
03F6 7900       185            mov R1, #0            ; Received byte stored in R1
03F8 7A08       186            mov R2, #8            ; Loop counter (8-bits)
03FA            187   DO_SPI_G_LOOP:
03FA E8         188            mov a, R0             ; Byte to write is in R0
03FB 33         189            rlc a                 ; Carry flag has bit to write
03FC F8         190            mov R0, a
03FD 9296       191            mov MY_MOSI, c
03FF D294       192            setb MY_SCLK          ; Transmit
0401 A295       193            mov c, MY_MISO        ; Read received bit
0403 E9         194            mov a, R1             ; Save received bit in R1
0404 33         195            rlc a
0405 F9         196            mov R1, a
0406 C294       197            clr MY_SCLK
0408 DAF0       198            djnz R2, DO_SPI_G_LOOP
040A D0E0       199            pop acc
040C 22         200   ret
040D            201   
040D            202   Send_SPI:
                203   	SPIBIT MAC
                204   	    ; Send/Receive bit %0
                205   		rlc a
                206   		mov MY_MOSI_SOUND, c
                207   		setb MY_SCLK_SOUND
                208   		mov c, MY_MISO_SOUND
                209   		clr MY_SCLK_SOUND
                210   		mov acc.0, c
                211   	ENDMAC
040D            212            
040D            213                ; Send/Receive bit 7
040D 33         213                    rlc a
040E 92A4       213                    mov MY_MOSI_SOUND, c
0410 D2A0       213                    setb MY_SCLK_SOUND
0412 A2A1       213                    mov c, MY_MISO_SOUND
0414 C2A0       213                    clr MY_SCLK_SOUND
0416 92E0       213                    mov acc.0, c
0418            214                ; Send/Receive bit 6
0418 33         214                    rlc a
0419 92A4       214                    mov MY_MOSI_SOUND, c
041B D2A0       214                    setb MY_SCLK_SOUND
041D A2A1       214                    mov c, MY_MISO_SOUND
041F C2A0       214                    clr MY_SCLK_SOUND
0421 92E0       214                    mov acc.0, c
0423            215                ; Send/Receive bit 5
0423 33         215                    rlc a
0424 92A4       215                    mov MY_MOSI_SOUND, c
0426 D2A0       215                    setb MY_SCLK_SOUND
0428 A2A1       215                    mov c, MY_MISO_SOUND
042A C2A0       215                    clr MY_SCLK_SOUND
042C 92E0       215                    mov acc.0, c
042E            216                ; Send/Receive bit 4
042E 33         216                    rlc a
042F 92A4       216                    mov MY_MOSI_SOUND, c
0431 D2A0       216                    setb MY_SCLK_SOUND
0433 A2A1       216                    mov c, MY_MISO_SOUND
0435 C2A0       216                    clr MY_SCLK_SOUND
0437 92E0       216                    mov acc.0, c
0439            217                ; Send/Receive bit 3
0439 33         217                    rlc a
043A 92A4       217                    mov MY_MOSI_SOUND, c
043C D2A0       217                    setb MY_SCLK_SOUND
043E A2A1       217                    mov c, MY_MISO_SOUND
0440 C2A0       217                    clr MY_SCLK_SOUND
0442 92E0       217                    mov acc.0, c
0444            218                ; Send/Receive bit 2
0444 33         218                    rlc a
0445 92A4       218                    mov MY_MOSI_SOUND, c
0447 D2A0       218                    setb MY_SCLK_SOUND
0449 A2A1       218                    mov c, MY_MISO_SOUND
044B C2A0       218                    clr MY_SCLK_SOUND
044D 92E0       218                    mov acc.0, c
044F            219                ; Send/Receive bit 1
044F 33         219                    rlc a
0450 92A4       219                    mov MY_MOSI_SOUND, c
0452 D2A0       219                    setb MY_SCLK_SOUND
0454 A2A1       219                    mov c, MY_MISO_SOUND
0456 C2A0       219                    clr MY_SCLK_SOUND
0458 92E0       219                    mov acc.0, c
045A            220                ; Send/Receive bit 0
045A 33         220                    rlc a
045B 92A4       220                    mov MY_MOSI_SOUND, c
045D D2A0       220                    setb MY_SCLK_SOUND
045F A2A1       220                    mov c, MY_MISO_SOUND
0461 C2A0       220                    clr MY_SCLK_SOUND
0463 92E0       220                    mov acc.0, c
0465            221   
0465 22         222   ret
0466            223   
                224   Change_8bit_Variable MAC
                225       jb %0, %2
                226       Wait_Milli_Seconds(#50) ; de-bounce
                227       jb %0, %2
                228       jnb %0, $
                229       jb SHIFT_BUTTON, skip%Mb
                230       dec %1
                231       sjmp skip%Ma
                232       skip%Mb:
                233       inc %1
                234       skip%Ma:
                235   ENDMAC
0466            236   
0466            237   
0466            238   
0466            239   ;Change_8bit_Variable(MY_VARIABLE_BUTTON, my_variable, loop_c)
0466            240   ;    Set_Cursor(2, 14)
0466            241   ;    mov a, my_variable
0466            242   ;    lcall SendToLCD
0466            243   ;lcall Save_Configuration
0466            244   
0466            245   ;-------------------------------------------------------------------------------------------------------------------------------
0466            246   ;***FXNS For Serial Port
0466            247   
0466            248   ; Configure the serial port and baud rate
0466            249   InitSerialPort:
0466            250       ; Since the reset button bounces, we need to wait a bit before
0466            251       ; sending messages, otherwise we risk displaying gibberish!
0466 79DE       252       mov R1, #222
0468 78A6       253       mov R0, #166
046A D8FE       254       djnz R0, $   ; 3 cycles->3*45.21123ns*166=22.51519us
046C D9FA       255       djnz R1, $-4 ; 22.51519us*222=4.998ms
046E            256       ; Now we can proceed with the configuration
046E 438780     257            orl     PCON,#0x80
0471 759852     258            mov     SCON,#0x52
0474 759B00     259            mov     BDRCON,#0x00
0477 759AF4     260            mov     BRL,#BRG_VAL
047A 759B1E     261            mov     BDRCON,#0x1E ; BDRCON=BRR|TBCK|RBCK|SPD;
047D 22         262   ret
047E            263   
047E            264   
047E            265   putchar:
047E 3099FD     266       jnb TI, putchar
0481 C299       267       clr TI
0483 F599       268       mov SBUF, a
0485 22         269   ret
0486            270   
0486            271   ;-------------------------------------------------------------------------------------------------------------------------------
0486            272   ;***FXNS to CHECK BUTTONS
0486            273   
0486            274   CHECK_STIME:
0486            275   
0486 208218     276       jb STIME_BUTTON, CHECK_STIME_END
0489 C002       276            push AR2
048B 7A32       276            mov R2, #50
048D 120039     276            lcall ?Wait_Milli_Seconds
0490 D002       276            pop AR2 ; de-bounce
0492 20820C     276       jb STIME_BUTTON, CHECK_STIME_END
0495 3082FD     276       jnb STIME_BUTTON, $
0498 208104     276       jb SHIFT_BUTTON, skip16b
049B 1535       276       dec Time_soak
049D 8002       276       sjmp skip16a
049F            276       skip16b:
049F 0535       276       inc Time_soak
04A1            276       skip16a:
04A1            277            
04A1            278   CHECK_STIME_END:
04A1 22         279   ret
04A2            280   
04A2            281   CHECK_STEMP:
04A2 208318     282       jb STEMP_BUTTON, CHECK_STEMP_END
04A5 C002       282            push AR2
04A7 7A32       282            mov R2, #50
04A9 120039     282            lcall ?Wait_Milli_Seconds
04AC D002       282            pop AR2 ; de-bounce
04AE 20830C     282       jb STEMP_BUTTON, CHECK_STEMP_END
04B1 3083FD     282       jnb STEMP_BUTTON, $
04B4 208104     282       jb SHIFT_BUTTON, skip18b
04B7 1534       282       dec Temp_soak
04B9 8002       282       sjmp skip18a
04BB            282       skip18b:
04BB 0534       282       inc Temp_soak
04BD            282       skip18a:
04BD            283       ;lcall Save_Configuration
04BD            284            
04BD            285   CHECK_STEMP_END:
04BD 22         286   ret
04BE            287   
04BE            288   CHECK_RTIME:
04BE 208418     289       jb RTIME_BUTTON, CHECK_RTIME_END
04C1 C002       289            push AR2
04C3 7A32       289            mov R2, #50
04C5 120039     289            lcall ?Wait_Milli_Seconds
04C8 D002       289            pop AR2 ; de-bounce
04CA 20840C     289       jb RTIME_BUTTON, CHECK_RTIME_END
04CD 3084FD     289       jnb RTIME_BUTTON, $
04D0 208104     289       jb SHIFT_BUTTON, skip20b
04D3 1537       289       dec Time_refl
04D5 8002       289       sjmp skip20a
04D7            289       skip20b:
04D7 0537       289       inc Time_refl
04D9            289       skip20a:
04D9            290   CHECK_RTIME_END:
04D9 22         291   ret
04DA            292   
04DA            293   CHECK_RTEMP:
04DA 208618     294       jb RTEMP_BUTTON, CHECK_RTEMP_END
04DD C002       294            push AR2
04DF 7A32       294            mov R2, #50
04E1 120039     294            lcall ?Wait_Milli_Seconds
04E4 D002       294            pop AR2 ; de-bounce
04E6 20860C     294       jb RTEMP_BUTTON, CHECK_RTEMP_END
04E9 3086FD     294       jnb RTEMP_BUTTON, $
04EC 208104     294       jb SHIFT_BUTTON, skip22b
04EF 1536       294       dec Temp_refl
04F1 8002       294       sjmp skip22a
04F3            294       skip22b:
04F3 0536       294       inc Temp_refl
04F5            294       skip22a:
04F5            295   CHECK_RTEMP_END:
04F5 22         296   ret
04F6            297   
04F6            298   CHECK_POWER:
04F6 20C518     299       jb POWER_BUTTON, CHECK_POWER_END ; if button not pressed, stop checking
04F9 C002       300            push AR2
04FB 7A32       300            mov R2, #50
04FD 120039     300            lcall ?Wait_Milli_Seconds
0500 D002       300            pop AR2 ; debounce time
0502 20C50C     301            jb POWER_BUTTON, CHECK_POWER_END ; if button not pressed, stop checking
0505 30C5FD     302            jnb POWER_BUTTON, $ ; loop while the button is pressed
0508 754F00     303       mov pwm_ratio+0, #low(0)
050B 755000     304            mov pwm_ratio+1, #high(0)
050E 12168E     305       lcall OFF_STATE
0511            306   CHECK_POWER_END:
0511 22         307   ret
0512            308   
0512            309   CHECK_SPAN_OR_ENGL:
0512 208011     310       jb SPAN_ENGL_BUTTON, CHECK_SPAN_OR_ENGL_END
0515 C002       311            push AR2
0517 7A32       311            mov R2, #50
0519 120039     311            lcall ?Wait_Milli_Seconds
051C D002       311            pop AR2 ; de-bounce
051E 208005     312       jb SPAN_ENGL_BUTTON, CHECK_SPAN_OR_ENGL_END
0521 3080FD     313       jnb SPAN_ENGL_BUTTON, $
0524 B204       314       cpl SPAN_ENG
0526            315   CHECK_SPAN_OR_ENGL_END:
0526 22         316   ret
0527            317   
0527            318   CHECK_K_OR_C:
0527            319   
0527 20860F     320       jb RTEMP_BUTTON, CHECK_K_OR_C_END ; if button not pressed, stop checking
052A C002       321            push AR2
052C 7A32       321            mov R2, #50
052E 120039     321            lcall ?Wait_Milli_Seconds
0531 D002       321            pop AR2 ; debounce time
0533 208603     322            jb RTEMP_BUTTON, CHECK_K_OR_C_END ; if button not pressed, stop checking
0536 3086FD     323            jnb RTEMP_BUTTON, $ ; loop while the button is pressed
0539            324       
0539            325       ;mov a, K_or_C
0539            326       ;anl a,
0539            327       ;anl a, #00000001B  ; We need only the two least significant bits
0539            328   
0539            329   
0539            330   CHECK_K_OR_C_END:
0539 22         331   ret
053A            332   
053A            333   ; Playback MACRO for sound --------------------------------------------------
053A            334   
                335   PLAYBACK_TEMP MAC
                336       ; ***play audio***
                337       ;cjne sound_flag, #0, $
                338       
                339       lcall Wait_Half_Second
                340       clr TR1 ; Stop Timer 1 ISR from playing previous request
                341       setb FLASH_CE
                342       ;setb sound_flag ; sound starts
                343       clr SPEAKER ; Turn off speaker
                344       clr FLASH_CE ; Enable SPI Flash
                345       mov a, #READ_BYTES
                346       lcall Send_SPI
                347       ; Set the initial position in memory where to start playing
                348       
                349       mov a, %0 ; change initial position
                350       lcall Send_SPI
                351       mov a, %1 ; next memory position
                352       lcall Send_SPI
                353       mov a, %2 ; next memory position
                354       lcall Send_SPI
                355       mov a, %0 ; request first byte to send to DAC
                356       lcall Send_SPI
                357       
                358       ; How many bytes to play?
                359       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
                360       mov w+1, %3 ; Load the middle byte of the number of bytes to play
                361       mov w+0, %4 ; Load the low byte of the number of bytes to play
                362       
                363       
                364       setb SPEAKER ;Turn on speaker
                365       setb TR1 ;Start playback by enabling Timer1
                366       ;clr sound_flag ; sound ends
                367   ENDMAC
053A            368   
                369   PLAYBACK_MUSIC MAC
                370       ; ***play audio***
                371       ;cjne sound_flag, #0, $
                372       
                373       clr TR1 ; Stop Timer 1 ISR from playing previous request
                374       setb FLASH_CE
                375       ;setb sound_flag ; sound starts
                376       clr SPEAKER ; Turn off speaker
                377       clr FLASH_CE ; Enable SPI Flash
                378       mov a, #READ_BYTES
                379       lcall Send_SPI
                380       ; Set the initial position in memory where to start playing
                381       
                382       mov a, %0 ; change initial position
                383       lcall Send_SPI
                384       mov a, %1 ; next memory position
                385       lcall Send_SPI
                386       mov a, %2 ; next memory position
                387       lcall Send_SPI
                388       mov a, %0 ; request first byte to send to DAC
                389       lcall Send_SPI
                390       
                391       ; How many bytes to play?
                392       mov w+2, #0x02 ; Load the high byte of the number of bytes to play
                393       mov w+1, %3 ; Load the middle byte of the number of bytes to play
                394       mov w+0, %4 ; Load the low byte of the number of bytes to play
                395       
                396       
                397       setb SPEAKER ;Turn on speaker
                398       setb TR1 ;Start playback by enabling Timer1
                399       ;clr sound_flag ; sound ends
                400   ENDMAC
053A            401   
053A            402   
053A            403   ;****ENGLISH SOUND FSM--------------------------------------------------------
053A            404   
053A            405   SOUND_FSM:
053A            406   state_0_sound:
053A            407   ;check if 5 seconds has passed, if yes go to state 1, if no exit function 
053A 300104     408       jnb five_seconds_flag, Sound_ret
053D C201       409       clr five_seconds_flag
053F 8001       410       sjmp state_1_sound
0541            411   Sound_ret:
0541 22         412       ret
0542            413   
0542            414   state_1_sound:
0542            415   ; check if temp is greater than or equal to 100, if yes go to state 2
0542            416   ; check if temp is less than 100, if yes go to state 4
0542 E53B       417       mov a, Temp_oven
0544 9464       418       subb a, #100
0546 5002       419       jnc state_2_sound_hop
0548 4002       420       jc state_4_sound_hop
054A            421   
054A            422       state_2_sound_hop:
054A 8003       423           sjmp state_2_sound
054C            424   
054C            425       state_4_sound_hop:
054C 020648     426           ljmp state_4_sound
054F            427   
054F            428   state_2_sound:
054F            429   ;divide temp by 100, if it is 1 play sound: "100", if it is 2 play sound: "200"
054F            430   ; go to state_3_sound
054F 75F064     431       mov b, #100
0552 E53B       432       mov a, Temp_oven
0554 84         433       div ab
0555 9401       434       subb a, #1
0557 600A       435       jz play_sound_100
0559            436   
0559 75F064     437       mov b, #100
055C E53B       438       mov a, Temp_oven
055E 84         439       div ab
055F 9402       440       subb a, #2
0561 6065       441       jz play_sound_200
0563            442      
0563            443       play_sound_100: 
0563            444       ; ***play audio***
0563            444       ;cjne sound_flag, #0, $
0563            444       
0563 12177B     444       lcall Wait_Half_Second
0566 C28E       444       clr TR1 ; Stop Timer 1 ISR from playing previous request
0568 D2A5       444       setb FLASH_CE
056A            444       ;setb sound_flag ; sound starts
056A C2A6       444       clr SPEAKER ; Turn off speaker
056C C2A5       444       clr FLASH_CE ; Enable SPI Flash
056E 7403       444       mov a, #READ_BYTES
0570 12040D     444       lcall Send_SPI
0573            444       ; Set the initial position in memory where to start playing
0573            444       
0573 7401       444       mov a, #0x01 ; change initial position
0575 12040D     444       lcall Send_SPI
0578 7493       444       mov a, #0x93 ; next memory position
057A 12040D     444       lcall Send_SPI
057D 7484       444       mov a, #0x84 ; next memory position
057F 12040D     444       lcall Send_SPI
0582 7401       444       mov a, #0x01 ; request first byte to send to DAC
0584 12040D     444       lcall Send_SPI
0587            444       
0587            444       ; How many bytes to play?
0587 754E00     444       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
058A 754D36     444       mov w+1, #0x36 ; Load the middle byte of the number of bytes to play
058D 754CB0     444       mov w+0, #0xb0 ; Load the low byte of the number of bytes to play
0590            444       
0590            444       
0590 D2A6       444       setb SPEAKER ;Turn on speaker
0592 D28E       444       setb TR1 ;Start playback by enabling Timer1
0594            444       ;clr sound_flag ; sound ends ;one
0594            445       ; ***play audio***
0594            445       ;cjne sound_flag, #0, $
0594            445       
0594 12177B     445       lcall Wait_Half_Second
0597 C28E       445       clr TR1 ; Stop Timer 1 ISR from playing previous request
0599 D2A5       445       setb FLASH_CE
059B            445       ;setb sound_flag ; sound starts
059B C2A6       445       clr SPEAKER ; Turn off speaker
059D C2A5       445       clr FLASH_CE ; Enable SPI Flash
059F 7403       445       mov a, #READ_BYTES
05A1 12040D     445       lcall Send_SPI
05A4            445       ; Set the initial position in memory where to start playing
05A4            445       
05A4 7405       445       mov a, #0x05 ; change initial position
05A6 12040D     445       lcall Send_SPI
05A9 7409       445       mov a, #0x09 ; next memory position
05AB 12040D     445       lcall Send_SPI
05AE 7410       445       mov a, #0x10 ; next memory position
05B0 12040D     445       lcall Send_SPI
05B3 7405       445       mov a, #0x05 ; request first byte to send to DAC
05B5 12040D     445       lcall Send_SPI
05B8            445       
05B8            445       ; How many bytes to play?
05B8 754E00     445       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
05BB 754D27     445       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
05BE 754C10     445       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
05C1            445       
05C1            445       
05C1 D2A6       445       setb SPEAKER ;Turn on speaker
05C3 D28E       445       setb TR1 ;Start playback by enabling Timer1
05C5            445       ;clr sound_flag ; sound ends ;hundred
05C5 02062D     446           ljmp state_3_sound
05C8            447   
05C8            448       play_sound_200:
05C8            449       ; ***play audio***
05C8            449       ;cjne sound_flag, #0, $
05C8            449       
05C8 12177B     449       lcall Wait_Half_Second
05CB C28E       449       clr TR1 ; Stop Timer 1 ISR from playing previous request
05CD D2A5       449       setb FLASH_CE
05CF            449       ;setb sound_flag ; sound starts
05CF C2A6       449       clr SPEAKER ; Turn off speaker
05D1 C2A5       449       clr FLASH_CE ; Enable SPI Flash
05D3 7403       449       mov a, #READ_BYTES
05D5 12040D     449       lcall Send_SPI
05D8            449       ; Set the initial position in memory where to start playing
05D8            449       
05D8 7401       449       mov a, #0x01 ; change initial position
05DA 12040D     449       lcall Send_SPI
05DD 74C7       449       mov a, #0xc7 ; next memory position
05DF 12040D     449       lcall Send_SPI
05E2 7414       449       mov a, #0x14 ; next memory position
05E4 12040D     449       lcall Send_SPI
05E7 7401       449       mov a, #0x01 ; request first byte to send to DAC
05E9 12040D     449       lcall Send_SPI
05EC            449       
05EC            449       ; How many bytes to play?
05EC 754E00     449       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
05EF 754D13     449       mov w+1, #0x13 ; Load the middle byte of the number of bytes to play
05F2 754C88     449       mov w+0, #0x88 ; Load the low byte of the number of bytes to play
05F5            449       
05F5            449       
05F5 D2A6       449       setb SPEAKER ;Turn on speaker
05F7 D28E       449       setb TR1 ;Start playback by enabling Timer1
05F9            449       ;clr sound_flag ; sound ends ;two
05F9            450       ; ***play audio***
05F9            450       ;cjne sound_flag, #0, $
05F9            450       
05F9 12177B     450       lcall Wait_Half_Second
05FC C28E       450       clr TR1 ; Stop Timer 1 ISR from playing previous request
05FE D2A5       450       setb FLASH_CE
0600            450       ;setb sound_flag ; sound starts
0600 C2A6       450       clr SPEAKER ; Turn off speaker
0602 C2A5       450       clr FLASH_CE ; Enable SPI Flash
0604 7403       450       mov a, #READ_BYTES
0606 12040D     450       lcall Send_SPI
0609            450       ; Set the initial position in memory where to start playing
0609            450       
0609 7405       450       mov a, #0x05 ; change initial position
060B 12040D     450       lcall Send_SPI
060E 7409       450       mov a, #0x09 ; next memory position
0610 12040D     450       lcall Send_SPI
0613 7410       450       mov a, #0x10 ; next memory position
0615 12040D     450       lcall Send_SPI
0618 7405       450       mov a, #0x05 ; request first byte to send to DAC
061A 12040D     450       lcall Send_SPI
061D            450       
061D            450       ; How many bytes to play?
061D 754E00     450       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0620 754D27     450       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
0623 754C10     450       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
0626            450       
0626            450       
0626 D2A6       450       setb SPEAKER ;Turn on speaker
0628 D28E       450       setb TR1 ;Start playback by enabling Timer1
062A            450       ;clr sound_flag ; sound ends ;hundred
062A 02062D     451           ljmp state_3_sound
062D            452   
062D            453   state_3_sound:
062D            454   ; check remainder of temp, if it is 0, exit
062D            455   ; if not 0, go to state_4_sound
062D            456   
062D            457   
062D 75F064     458       mov b, #100
0630 E53B       459       mov a, Temp_oven
0632 95F0       460       subb a, b
0634 E5F0       461       mov a, b
0636 600D       462       jz state_3_sound_hop
0638            463       
0638 75F0C8     464       mov b, #200
063B E53B       465       mov a, Temp_oven
063D 95F0       466       subb a, b
063F E5F0       467       mov a, b
0641 6002       468       jz state_3_sound_hop
0643            469   
0643 8003       470       sjmp state_4_sound
0645            471   
0645            472       state_3_sound_hop:
0645 020541     473           ljmp Sound_ret
0648            474   
0648            475   state_4_sound:
0648            476   ; if T % 100 greater or equal to 20, go to state_5_sound,
0648 75F064     477       mov b, #100
064B E53B       478       mov a, Temp_oven
064D 84         479       div ab
064E            480       ;mov R0, b
064E E5F0       481       mov a, b 
0650            482   
0650            483   
0650 9414       484       subb a, #20
0652 5027       485       jnc state_5_sound
0654 6025       486       jz state_5_sound
0656 E4         487       clr a
0657            488   ; if T % 100 is less than 10, go to state_6_sound
0657 75F064     489       mov b, #100
065A E53B       490       mov a, Temp_oven
065C 84         491       div ab
065D E5F0       492       mov a, b
065F 940A       493       subb a, #10
0661 4015       494       jc state_6_sound_hop0
0663            495       
0663            496       ;mov a, b
0663            497       
0663            498       ; ubb a, #0
0663            499       ;jc state_6_sound_hop0
0663            500       ;clr a
0663            501   ; if T % 100 is greater than or equal to 10 and less than 20, go to state_7_sound
0663            502   
0663 75F064     503       mov b, #100
0666 E53B       504       mov a, Temp_oven
0668 84         505       div ab
0669 E5F0       506       mov a, b
066B 940A       507       subb a, #10
066D 6000       508       jz and_branch
066F            509   
066F            510       and_branch:
066F E5F0       511           mov a, b
0671 9414       512           subb a, #20
0673 4000       513           jc state_7_sound_hop0
0675            514       
0675            515       state_7_sound_hop0:
0675 020A3C     516           ljmp state_7_sound
0678            517   
0678            518       state_6_sound_hop0:
0678 02083C     519           ljmp state_6_sound
067B            520       
067B            521   
067B            522   state_5_sound:
067B            523   ; play number from 20 to 90 in decades (20, 30, 40, 50, 60, 70, 80, 90), based off remainder from temp divided by 100
067B            524   ; if (T % 100) % 10 is not equal to 0, go to state_6_sound
067B            525   ; if (T % 100) % 10 is equal to 0, go to state_8_sound
067B            526   
067B            527       play_sound:
067B            528           ;ljmp PLAYBACK_TEMP
067B E53B       529           mov a, Temp_oven
067D 75F064     530           mov b, #100
0680 84         531           div ab
0681 E5F0       532           mov a, b
0683 75F00A     533           mov b, #10
0686 84         534           div ab
0687 B40234     535           cjne a, #2, play_30
068A            536           ;mov    
068A            537   
068A            538           play_20:
068A            539       ; ***play audio***
068A            539       ;cjne sound_flag, #0, $
068A            539       
068A 12177B     539       lcall Wait_Half_Second
068D C28E       539       clr TR1 ; Stop Timer 1 ISR from playing previous request
068F D2A5       539       setb FLASH_CE
0691            539       ;setb sound_flag ; sound starts
0691 C2A6       539       clr SPEAKER ; Turn off speaker
0693 C2A5       539       clr FLASH_CE ; Enable SPI Flash
0695 7403       539       mov a, #READ_BYTES
0697 12040D     539       lcall Send_SPI
069A            539       ; Set the initial position in memory where to start playing
069A            539       
069A 7403       539       mov a, #0x03 ; change initial position
069C 12040D     539       lcall Send_SPI
069F 74EF       539       mov a, #0xef ; next memory position
06A1 12040D     539       lcall Send_SPI
06A4 74D0       539       mov a, #0xd0 ; next memory position
06A6 12040D     539       lcall Send_SPI
06A9 7403       539       mov a, #0x03 ; request first byte to send to DAC
06AB 12040D     539       lcall Send_SPI
06AE            539       
06AE            539       ; How many bytes to play?
06AE 754E00     539       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
06B1 754D27     539       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
06B4 754C10     539       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
06B7            539       
06B7            539       
06B7 D2A6       539       setb SPEAKER ;Turn on speaker
06B9 D28E       539       setb TR1 ;Start playback by enabling Timer1
06BB            539       ;clr sound_flag ; sound ends
06BB            540               ;lcall Wait_One_Second
06BB 020839     541               ljmp state_6_sound_hop1
06BE            542   
06BE            543           play_30:
06BE            544               
06BE B40334     545               cjne a, #3, play_40   
06C1            546       ; ***play audio***
06C1            546       ;cjne sound_flag, #0, $
06C1            546       
06C1 12177B     546       lcall Wait_Half_Second
06C4 C28E       546       clr TR1 ; Stop Timer 1 ISR from playing previous request
06C6 D2A5       546       setb FLASH_CE
06C8            546       ;setb sound_flag ; sound starts
06C8 C2A6       546       clr SPEAKER ; Turn off speaker
06CA C2A5       546       clr FLASH_CE ; Enable SPI Flash
06CC 7403       546       mov a, #READ_BYTES
06CE 12040D     546       lcall Send_SPI
06D1            546       ; Set the initial position in memory where to start playing
06D1            546       
06D1 7404       546       mov a, #0x04 ; change initial position
06D3 12040D     546       lcall Send_SPI
06D6 7416       546       mov a, #0x16 ; next memory position
06D8 12040D     546       lcall Send_SPI
06DB 74E0       546       mov a, #0xe0 ; next memory position
06DD 12040D     546       lcall Send_SPI
06E0 7404       546       mov a, #0x04 ; request first byte to send to DAC
06E2 12040D     546       lcall Send_SPI
06E5            546       
06E5            546       ; How many bytes to play?
06E5 754E00     546       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
06E8 754D23     546       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
06EB 754C28     546       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
06EE            546       
06EE            546       
06EE D2A6       546       setb SPEAKER ;Turn on speaker
06F0 D28E       546       setb TR1 ;Start playback by enabling Timer1
06F2            546       ;clr sound_flag ; sound ends
06F2 020839     547               ljmp state_6_sound_hop1
06F5            548   
06F5            549           play_40:
06F5            550               
06F5 B40434     551               cjne a, #4, play_50  
06F8            552       ; ***play audio***
06F8            552       ;cjne sound_flag, #0, $
06F8            552       
06F8 12177B     552       lcall Wait_Half_Second
06FB C28E       552       clr TR1 ; Stop Timer 1 ISR from playing previous request
06FD D2A5       552       setb FLASH_CE
06FF            552       ;setb sound_flag ; sound starts
06FF C2A6       552       clr SPEAKER ; Turn off speaker
0701 C2A5       552       clr FLASH_CE ; Enable SPI Flash
0703 7403       552       mov a, #READ_BYTES
0705 12040D     552       lcall Send_SPI
0708            552       ; Set the initial position in memory where to start playing
0708            552       
0708 7404       552       mov a, #0x04 ; change initial position
070A 12040D     552       lcall Send_SPI
070D 743D       552       mov a, #0x3d ; next memory position
070F 12040D     552       lcall Send_SPI
0712 74F0       552       mov a, #0xf0 ; next memory position
0714 12040D     552       lcall Send_SPI
0717 7404       552       mov a, #0x04 ; request first byte to send to DAC
0719 12040D     552       lcall Send_SPI
071C            552       
071C            552       ; How many bytes to play?
071C 754E00     552       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
071F 754D1F     552       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
0722 754C40     552       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
0725            552       
0725            552       
0725 D2A6       552       setb SPEAKER ;Turn on speaker
0727 D28E       552       setb TR1 ;Start playback by enabling Timer1
0729            552       ;clr sound_flag ; sound ends
0729 020839     553               ljmp state_6_sound_hop1
072C            554   
072C            555           play_50:
072C            556              
072C B40534     557               cjne a, #5, play_60  
072F            558       ; ***play audio***
072F            558       ;cjne sound_flag, #0, $
072F            558       
072F 12177B     558       lcall Wait_Half_Second
0732 C28E       558       clr TR1 ; Stop Timer 1 ISR from playing previous request
0734 D2A5       558       setb FLASH_CE
0736            558       ;setb sound_flag ; sound starts
0736 C2A6       558       clr SPEAKER ; Turn off speaker
0738 C2A5       558       clr FLASH_CE ; Enable SPI Flash
073A 7403       558       mov a, #READ_BYTES
073C 12040D     558       lcall Send_SPI
073F            558       ; Set the initial position in memory where to start playing
073F            558       
073F 7404       558       mov a, #0x04 ; change initial position
0741 12040D     558       lcall Send_SPI
0744 7451       558       mov a, #0x51 ; next memory position
0746 12040D     558       lcall Send_SPI
0749 7478       558       mov a, #0x78 ; next memory position
074B 12040D     558       lcall Send_SPI
074E 7404       558       mov a, #0x04 ; request first byte to send to DAC
0750 12040D     558       lcall Send_SPI
0753            558       
0753            558       ; How many bytes to play?
0753 754E00     558       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0756 754D23     558       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
0759 754C28     558       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
075C            558       
075C            558       
075C D2A6       558       setb SPEAKER ;Turn on speaker
075E D28E       558       setb TR1 ;Start playback by enabling Timer1
0760            558       ;clr sound_flag ; sound ends
0760 020839     559               ljmp state_6_sound_hop1
0763            560   
0763            561           play_60:
0763            562               
0763 B40634     563               cjne a, #6, play_70  
0766            564       ; ***play audio***
0766            564       ;cjne sound_flag, #0, $
0766            564       
0766 12177B     564       lcall Wait_Half_Second
0769 C28E       564       clr TR1 ; Stop Timer 1 ISR from playing previous request
076B D2A5       564       setb FLASH_CE
076D            564       ;setb sound_flag ; sound starts
076D C2A6       564       clr SPEAKER ; Turn off speaker
076F C2A5       564       clr FLASH_CE ; Enable SPI Flash
0771 7403       564       mov a, #READ_BYTES
0773 12040D     564       lcall Send_SPI
0776            564       ; Set the initial position in memory where to start playing
0776            564       
0776 7404       564       mov a, #0x04 ; change initial position
0778 12040D     564       lcall Send_SPI
077B 7474       564       mov a, #0x74 ; next memory position
077D 12040D     564       lcall Send_SPI
0780 74A0       564       mov a, #0xa0 ; next memory position
0782 12040D     564       lcall Send_SPI
0785 7404       564       mov a, #0x04 ; request first byte to send to DAC
0787 12040D     564       lcall Send_SPI
078A            564       
078A            564       ; How many bytes to play?
078A 754E00     564       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
078D 754D27     564       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
0790 754C10     564       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
0793            564       
0793            564       
0793 D2A6       564       setb SPEAKER ;Turn on speaker
0795 D28E       564       setb TR1 ;Start playback by enabling Timer1
0797            564       ;clr sound_flag ; sound ends
0797 020839     565               ljmp state_6_sound_hop1
079A            566   
079A            567           play_70:
079A            568              
079A B40734     569               cjne a, #7, play_80  
079D            570       ; ***play audio***
079D            570       ;cjne sound_flag, #0, $
079D            570       
079D 12177B     570       lcall Wait_Half_Second
07A0 C28E       570       clr TR1 ; Stop Timer 1 ISR from playing previous request
07A2 D2A5       570       setb FLASH_CE
07A4            570       ;setb sound_flag ; sound starts
07A4 C2A6       570       clr SPEAKER ; Turn off speaker
07A6 C2A5       570       clr FLASH_CE ; Enable SPI Flash
07A8 7403       570       mov a, #READ_BYTES
07AA 12040D     570       lcall Send_SPI
07AD            570       ; Set the initial position in memory where to start playing
07AD            570       
07AD 7404       570       mov a, #0x04 ; change initial position
07AF 12040D     570       lcall Send_SPI
07B2 749B       570       mov a, #0x9b ; next memory position
07B4 12040D     570       lcall Send_SPI
07B7 74B0       570       mov a, #0xb0 ; next memory position
07B9 12040D     570       lcall Send_SPI
07BC 7404       570       mov a, #0x04 ; request first byte to send to DAC
07BE 12040D     570       lcall Send_SPI
07C1            570       
07C1            570       ; How many bytes to play?
07C1 754E00     570       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
07C4 754D32     570       mov w+1, #0x32 ; Load the middle byte of the number of bytes to play
07C7 754CC8     570       mov w+0, #0xc8 ; Load the low byte of the number of bytes to play
07CA            570       
07CA            570       
07CA D2A6       570       setb SPEAKER ;Turn on speaker
07CC D28E       570       setb TR1 ;Start playback by enabling Timer1
07CE            570       ;clr sound_flag ; sound ends
07CE 020839     571               ljmp state_6_sound_hop1
07D1            572   
07D1            573           play_80:
07D1            574               
07D1 B40834     575               cjne a, #8, play_90  
07D4            576       ; ***play audio***
07D4            576       ;cjne sound_flag, #0, $
07D4            576       
07D4 12177B     576       lcall Wait_Half_Second
07D7 C28E       576       clr TR1 ; Stop Timer 1 ISR from playing previous request
07D9 D2A5       576       setb FLASH_CE
07DB            576       ;setb sound_flag ; sound starts
07DB C2A6       576       clr SPEAKER ; Turn off speaker
07DD C2A5       576       clr FLASH_CE ; Enable SPI Flash
07DF 7403       576       mov a, #READ_BYTES
07E1 12040D     576       lcall Send_SPI
07E4            576       ; Set the initial position in memory where to start playing
07E4            576       
07E4 7404       576       mov a, #0x04 ; change initial position
07E6 12040D     576       lcall Send_SPI
07E9 74C6       576       mov a, #0xc6 ; next memory position
07EB 12040D     576       lcall Send_SPI
07EE 74A8       576       mov a, #0xa8 ; next memory position
07F0 12040D     576       lcall Send_SPI
07F3 7404       576       mov a, #0x04 ; request first byte to send to DAC
07F5 12040D     576       lcall Send_SPI
07F8            576       
07F8            576       ; How many bytes to play?
07F8 754E00     576       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
07FB 754D23     576       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
07FE 754C28     576       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
0801            576       
0801            576       
0801 D2A6       576       setb SPEAKER ;Turn on speaker
0803 D28E       576       setb TR1 ;Start playback by enabling Timer1
0805            576       ;clr sound_flag ; sound ends
0805 020839     577               ljmp state_6_sound_hop1
0808            578   
0808            579           play_90:
0808            580       ; ***play audio***
0808            580       ;cjne sound_flag, #0, $
0808            580       
0808 12177B     580       lcall Wait_Half_Second
080B C28E       580       clr TR1 ; Stop Timer 1 ISR from playing previous request
080D D2A5       580       setb FLASH_CE
080F            580       ;setb sound_flag ; sound starts
080F C2A6       580       clr SPEAKER ; Turn off speaker
0811 C2A5       580       clr FLASH_CE ; Enable SPI Flash
0813 7403       580       mov a, #READ_BYTES
0815 12040D     580       lcall Send_SPI
0818            580       ; Set the initial position in memory where to start playing
0818            580       
0818 7404       580       mov a, #0x04 ; change initial position
081A 12040D     580       lcall Send_SPI
081D 74ED       580       mov a, #0xed ; next memory position
081F 12040D     580       lcall Send_SPI
0822 74B8       580       mov a, #0xb8 ; next memory position
0824 12040D     580       lcall Send_SPI
0827 7404       580       mov a, #0x04 ; request first byte to send to DAC
0829 12040D     580       lcall Send_SPI
082C            580       
082C            580       ; How many bytes to play?
082C 754E00     580       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
082F 754D1F     580       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
0832 754C40     580       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
0835            580       
0835            580       
0835 D2A6       580       setb SPEAKER ;Turn on speaker
0837 D28E       580       setb TR1 ;Start playback by enabling Timer1
0839            580       ;clr sound_flag ; sound ends
0839            581   
0839            582       state_6_sound_hop1:
0839 02083C     583           ljmp state_6_sound
083C            584           
083C            585       ;state_8_hop0:
083C            586           ;ljmp state_6_sound ;state_8_sound
083C            587   
083C            588   
083C            589   state_6_sound:
083C            590   ; play 1 - 9
083C            591       ;ljmp PLAYBACK_TEMP
083C 75F064     592       mov b, #100
083F E53B       593       mov a, Temp_oven
0841 84         594       div ab
0842 E5F0       595       mov a, b
0844 75F00A     596       mov b, #10
0847 84         597       div ab
0848 E5F0       598       mov a, b
084A            599       
084A B40003     600       cjne a, #0x00, play_1
084D 020A39     601       ljmp state_8_hop1
0850            602   
0850            603       play_1:
0850 B40134     604           cjne a, #0x01, play_2
0853            605       ; ***play audio***
0853            605       ;cjne sound_flag, #0, $
0853            605       
0853 12177B     605       lcall Wait_Half_Second
0856 C28E       605       clr TR1 ; Stop Timer 1 ISR from playing previous request
0858 D2A5       605       setb FLASH_CE
085A            605       ;setb sound_flag ; sound starts
085A C2A6       605       clr SPEAKER ; Turn off speaker
085C C2A5       605       clr FLASH_CE ; Enable SPI Flash
085E 7403       605       mov a, #READ_BYTES
0860 12040D     605       lcall Send_SPI
0863            605       ; Set the initial position in memory where to start playing
0863            605       
0863 7401       605       mov a, #0x01 ; change initial position
0865 12040D     605       lcall Send_SPI
0868 7493       605       mov a, #0x93 ; next memory position
086A 12040D     605       lcall Send_SPI
086D 7484       605       mov a, #0x84 ; next memory position
086F 12040D     605       lcall Send_SPI
0872 7401       605       mov a, #0x01 ; request first byte to send to DAC
0874 12040D     605       lcall Send_SPI
0877            605       
0877            605       ; How many bytes to play?
0877 754E00     605       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
087A 754D36     605       mov w+1, #0x36 ; Load the middle byte of the number of bytes to play
087D 754CB0     605       mov w+0, #0xb0 ; Load the low byte of the number of bytes to play
0880            605       
0880            605       
0880 D2A6       605       setb SPEAKER ;Turn on speaker
0882 D28E       605       setb TR1 ;Start playback by enabling Timer1
0884            605       ;clr sound_flag ; sound ends 
0884 020A39     606           ljmp state_8_hop1
0887            607   
0887            608       play_2:
0887 B40234     609           cjne a, #0x02, play_3
088A            610       ; ***play audio***
088A            610       ;cjne sound_flag, #0, $
088A            610       
088A 12177B     610       lcall Wait_Half_Second
088D C28E       610       clr TR1 ; Stop Timer 1 ISR from playing previous request
088F D2A5       610       setb FLASH_CE
0891            610       ;setb sound_flag ; sound starts
0891 C2A6       610       clr SPEAKER ; Turn off speaker
0893 C2A5       610       clr FLASH_CE ; Enable SPI Flash
0895 7403       610       mov a, #READ_BYTES
0897 12040D     610       lcall Send_SPI
089A            610       ; Set the initial position in memory where to start playing
089A            610       
089A 7401       610       mov a, #0x01 ; change initial position
089C 12040D     610       lcall Send_SPI
089F 74C7       610       mov a, #0xc7 ; next memory position
08A1 12040D     610       lcall Send_SPI
08A4 7414       610       mov a, #0x14 ; next memory position
08A6 12040D     610       lcall Send_SPI
08A9 7401       610       mov a, #0x01 ; request first byte to send to DAC
08AB 12040D     610       lcall Send_SPI
08AE            610       
08AE            610       ; How many bytes to play?
08AE 754E00     610       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
08B1 754D13     610       mov w+1, #0x13 ; Load the middle byte of the number of bytes to play
08B4 754C88     610       mov w+0, #0x88 ; Load the low byte of the number of bytes to play
08B7            610       
08B7            610       
08B7 D2A6       610       setb SPEAKER ;Turn on speaker
08B9 D28E       610       setb TR1 ;Start playback by enabling Timer1
08BB            610       ;clr sound_flag ; sound ends
08BB 020A39     611           ljmp state_8_hop1
08BE            612   
08BE            613       play_3:
08BE B40334     614           cjne a, #0x03, play_4
08C1            615       ; ***play audio***
08C1            615       ;cjne sound_flag, #0, $
08C1            615       
08C1 12177B     615       lcall Wait_Half_Second
08C4 C28E       615       clr TR1 ; Stop Timer 1 ISR from playing previous request
08C6 D2A5       615       setb FLASH_CE
08C8            615       ;setb sound_flag ; sound starts
08C8 C2A6       615       clr SPEAKER ; Turn off speaker
08CA C2A5       615       clr FLASH_CE ; Enable SPI Flash
08CC 7403       615       mov a, #READ_BYTES
08CE 12040D     615       lcall Send_SPI
08D1            615       ; Set the initial position in memory where to start playing
08D1            615       
08D1 7401       615       mov a, #0x01 ; change initial position
08D3 12040D     615       lcall Send_SPI
08D6 74D6       615       mov a, #0xd6 ; next memory position
08D8 12040D     615       lcall Send_SPI
08DB 7468       615       mov a, #0x68 ; next memory position
08DD 12040D     615       lcall Send_SPI
08E0 7401       615       mov a, #0x01 ; request first byte to send to DAC
08E2 12040D     615       lcall Send_SPI
08E5            615       
08E5            615       ; How many bytes to play?
08E5 754E00     615       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
08E8 754D23     615       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
08EB 754C28     615       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
08EE            615       
08EE            615       
08EE D2A6       615       setb SPEAKER ;Turn on speaker
08F0 D28E       615       setb TR1 ;Start playback by enabling Timer1
08F2            615       ;clr sound_flag ; sound ends
08F2 020A39     616           ljmp state_8_hop1
08F5            617   
08F5            618       play_4:
08F5 B40434     619           cjne a, #0x04, play_5
08F8            620       ; ***play audio***
08F8            620       ;cjne sound_flag, #0, $
08F8            620       
08F8 12177B     620       lcall Wait_Half_Second
08FB C28E       620       clr TR1 ; Stop Timer 1 ISR from playing previous request
08FD D2A5       620       setb FLASH_CE
08FF            620       ;setb sound_flag ; sound starts
08FF C2A6       620       clr SPEAKER ; Turn off speaker
0901 C2A5       620       clr FLASH_CE ; Enable SPI Flash
0903 7403       620       mov a, #READ_BYTES
0905 12040D     620       lcall Send_SPI
0908            620       ; Set the initial position in memory where to start playing
0908            620       
0908 7401       620       mov a, #0x01 ; change initial position
090A 12040D     620       lcall Send_SPI
090D 74F4       620       mov a, #0xf4 ; next memory position
090F 12040D     620       lcall Send_SPI
0912 7400       620       mov a, #0x00 ; next memory position
0914 12040D     620       lcall Send_SPI
0917 7401       620       mov a, #0x01 ; request first byte to send to DAC
0919 12040D     620       lcall Send_SPI
091C            620       
091C            620       ; How many bytes to play?
091C 754E00     620       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
091F 754D1B     620       mov w+1, #0x1b ; Load the middle byte of the number of bytes to play
0922 754C58     620       mov w+0, #0x58 ; Load the low byte of the number of bytes to play
0925            620       
0925            620       
0925 D2A6       620       setb SPEAKER ;Turn on speaker
0927 D28E       620       setb TR1 ;Start playback by enabling Timer1
0929            620       ;clr sound_flag ; sound ends
0929 020A39     621           ljmp state_8_hop1
092C            622   
092C            623       play_5:
092C B40534     624           cjne a, #0x05, play_6
092F            625       ; ***play audio***
092F            625       ;cjne sound_flag, #0, $
092F            625       
092F 12177B     625       lcall Wait_Half_Second
0932 C28E       625       clr TR1 ; Stop Timer 1 ISR from playing previous request
0934 D2A5       625       setb FLASH_CE
0936            625       ;setb sound_flag ; sound starts
0936 C2A6       625       clr SPEAKER ; Turn off speaker
0938 C2A5       625       clr FLASH_CE ; Enable SPI Flash
093A 7403       625       mov a, #READ_BYTES
093C 12040D     625       lcall Send_SPI
093F            625       ; Set the initial position in memory where to start playing
093F            625       
093F 7402       625       mov a, #0x02 ; change initial position
0941 12040D     625       lcall Send_SPI
0944 7407       625       mov a, #0x07 ; next memory position
0946 12040D     625       lcall Send_SPI
0949 7488       625       mov a, #0x88 ; next memory position
094B 12040D     625       lcall Send_SPI
094E 7402       625       mov a, #0x02 ; request first byte to send to DAC
0950 12040D     625       lcall Send_SPI
0953            625       
0953            625       ; How many bytes to play?
0953 754E00     625       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0956 754D1B     625       mov w+1, #0x1b ; Load the middle byte of the number of bytes to play
0959 754C58     625       mov w+0, #0x58 ; Load the low byte of the number of bytes to play
095C            625       
095C            625       
095C D2A6       625       setb SPEAKER ;Turn on speaker
095E D28E       625       setb TR1 ;Start playback by enabling Timer1
0960            625       ;clr sound_flag ; sound ends
0960 020A39     626           ljmp state_8_hop1
0963            627   
0963            628       play_6:
0963 B40634     629           cjne a, #0x06, play_7
0966            630       ; ***play audio***
0966            630       ;cjne sound_flag, #0, $
0966            630       
0966 12177B     630       lcall Wait_Half_Second
0969 C28E       630       clr TR1 ; Stop Timer 1 ISR from playing previous request
096B D2A5       630       setb FLASH_CE
096D            630       ;setb sound_flag ; sound starts
096D C2A6       630       clr SPEAKER ; Turn off speaker
096F C2A5       630       clr FLASH_CE ; Enable SPI Flash
0971 7403       630       mov a, #READ_BYTES
0973 12040D     630       lcall Send_SPI
0976            630       ; Set the initial position in memory where to start playing
0976            630       
0976 7402       630       mov a, #0x02 ; change initial position
0978 12040D     630       lcall Send_SPI
097B 7426       630       mov a, #0x26 ; next memory position
097D 12040D     630       lcall Send_SPI
0980 74C8       630       mov a, #0xc8 ; next memory position
0982 12040D     630       lcall Send_SPI
0985 7402       630       mov a, #0x02 ; request first byte to send to DAC
0987 12040D     630       lcall Send_SPI
098A            630       
098A            630       ; How many bytes to play?
098A 754E00     630       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
098D 754D1F     630       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
0990 754C40     630       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
0993            630       
0993            630       
0993 D2A6       630       setb SPEAKER ;Turn on speaker
0995 D28E       630       setb TR1 ;Start playback by enabling Timer1
0997            630       ;clr sound_flag ; sound ends
0997 020A39     631           ljmp state_8_hop1
099A            632   
099A            633       play_7:
099A B40734     634           cjne a, #0x07, play_8
099D            635       ; ***play audio***
099D            635       ;cjne sound_flag, #0, $
099D            635       
099D 12177B     635       lcall Wait_Half_Second
09A0 C28E       635       clr TR1 ; Stop Timer 1 ISR from playing previous request
09A2 D2A5       635       setb FLASH_CE
09A4            635       ;setb sound_flag ; sound starts
09A4 C2A6       635       clr SPEAKER ; Turn off speaker
09A6 C2A5       635       clr FLASH_CE ; Enable SPI Flash
09A8 7403       635       mov a, #READ_BYTES
09AA 12040D     635       lcall Send_SPI
09AD            635       ; Set the initial position in memory where to start playing
09AD            635       
09AD 7402       635       mov a, #0x02 ; change initial position
09AF 12040D     635       lcall Send_SPI
09B2 7436       635       mov a, #0x36 ; next memory position
09B4 12040D     635       lcall Send_SPI
09B7 7468       635       mov a, #0x68 ; next memory position
09B9 12040D     635       lcall Send_SPI
09BC 7402       635       mov a, #0x02 ; request first byte to send to DAC
09BE 12040D     635       lcall Send_SPI
09C1            635       
09C1            635       ; How many bytes to play?
09C1 754E00     635       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
09C4 754D23     635       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
09C7 754C28     635       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
09CA            635       
09CA            635       
09CA D2A6       635       setb SPEAKER ;Turn on speaker
09CC D28E       635       setb TR1 ;Start playback by enabling Timer1
09CE            635       ;clr sound_flag ; sound ends
09CE 020A39     636           ljmp state_8_hop1
09D1            637   
09D1            638       play_8:
09D1 B40834     639           cjne a, #0x08, play_9
09D4            640       ; ***play audio***
09D4            640       ;cjne sound_flag, #0, $
09D4            640       
09D4 12177B     640       lcall Wait_Half_Second
09D7 C28E       640       clr TR1 ; Stop Timer 1 ISR from playing previous request
09D9 D2A5       640       setb FLASH_CE
09DB            640       ;setb sound_flag ; sound starts
09DB C2A6       640       clr SPEAKER ; Turn off speaker
09DD C2A5       640       clr FLASH_CE ; Enable SPI Flash
09DF 7403       640       mov a, #READ_BYTES
09E1 12040D     640       lcall Send_SPI
09E4            640       ; Set the initial position in memory where to start playing
09E4            640       
09E4 7402       640       mov a, #0x02 ; change initial position
09E6 12040D     640       lcall Send_SPI
09E9 7457       640       mov a, #0x57 ; next memory position
09EB 12040D     640       lcall Send_SPI
09EE 749C       640       mov a, #0x9c ; next memory position
09F0 12040D     640       lcall Send_SPI
09F3 7402       640       mov a, #0x02 ; request first byte to send to DAC
09F5 12040D     640       lcall Send_SPI
09F8            640       
09F8            640       ; How many bytes to play?
09F8 754E00     640       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
09FB 754D1B     640       mov w+1, #0x1b ; Load the middle byte of the number of bytes to play
09FE 754C58     640       mov w+0, #0x58 ; Load the low byte of the number of bytes to play
0A01            640       
0A01            640       
0A01 D2A6       640       setb SPEAKER ;Turn on speaker
0A03 D28E       640       setb TR1 ;Start playback by enabling Timer1
0A05            640       ;clr sound_flag ; sound ends
0A05 020A39     641           ljmp state_8_hop1
0A08            642   
0A08            643       play_9:
0A08            644       ; ***play audio***
0A08            644       ;cjne sound_flag, #0, $
0A08            644       
0A08 12177B     644       lcall Wait_Half_Second
0A0B C28E       644       clr TR1 ; Stop Timer 1 ISR from playing previous request
0A0D D2A5       644       setb FLASH_CE
0A0F            644       ;setb sound_flag ; sound starts
0A0F C2A6       644       clr SPEAKER ; Turn off speaker
0A11 C2A5       644       clr FLASH_CE ; Enable SPI Flash
0A13 7403       644       mov a, #READ_BYTES
0A15 12040D     644       lcall Send_SPI
0A18            644       ; Set the initial position in memory where to start playing
0A18            644       
0A18 7402       644       mov a, #0x02 ; change initial position
0A1A 12040D     644       lcall Send_SPI
0A1D 7469       644       mov a, #0x69 ; next memory position
0A1F 12040D     644       lcall Send_SPI
0A22 7430       644       mov a, #0x30 ; next memory position
0A24 12040D     644       lcall Send_SPI
0A27 7402       644       mov a, #0x02 ; request first byte to send to DAC
0A29 12040D     644       lcall Send_SPI
0A2C            644       
0A2C            644       ; How many bytes to play?
0A2C 754E00     644       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0A2F 754D1F     644       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
0A32 754C40     644       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
0A35            644       
0A35            644       
0A35 D2A6       644       setb SPEAKER ;Turn on speaker
0A37 D28E       644       setb TR1 ;Start playback by enabling Timer1
0A39            644       ;clr sound_flag ; sound ends
0A39            645   
0A39            646   state_8_hop1:
0A39            647   ; go to state_8_sound
0A39 020C67     648       ljmp state_8_sound
0A3C            649   
0A3C            650   
0A3C            651   state_7_sound:
0A3C            652   ; play 10 - 19
0A3C            653       ;ljmp PLAYBACK_TEMP
0A3C 75F064     654       mov b, #100
0A3F E53B       655       mov a, Temp_oven
0A41 84         656       div ab
0A42 E5F0       657       mov a, b
0A44 B40A34     658       cjne a, #0x0a, play_11
0A47            659       
0A47            660       ; ***play audio***
0A47            660       ;cjne sound_flag, #0, $
0A47            660       
0A47 12177B     660       lcall Wait_Half_Second
0A4A C28E       660       clr TR1 ; Stop Timer 1 ISR from playing previous request
0A4C D2A5       660       setb FLASH_CE
0A4E            660       ;setb sound_flag ; sound starts
0A4E C2A6       660       clr SPEAKER ; Turn off speaker
0A50 C2A5       660       clr FLASH_CE ; Enable SPI Flash
0A52 7403       660       mov a, #READ_BYTES
0A54 12040D     660       lcall Send_SPI
0A57            660       ; Set the initial position in memory where to start playing
0A57            660       
0A57 7402       660       mov a, #0x02 ; change initial position
0A59 12040D     660       lcall Send_SPI
0A5C 7484       660       mov a, #0x84 ; next memory position
0A5E 12040D     660       lcall Send_SPI
0A61 7488       660       mov a, #0x88 ; next memory position
0A63 12040D     660       lcall Send_SPI
0A66 7402       660       mov a, #0x02 ; request first byte to send to DAC
0A68 12040D     660       lcall Send_SPI
0A6B            660       
0A6B            660       ; How many bytes to play?
0A6B 754E00     660       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0A6E 754D17     660       mov w+1, #0x17 ; Load the middle byte of the number of bytes to play
0A71 754C70     660       mov w+0, #0x70 ; Load the low byte of the number of bytes to play
0A74            660       
0A74            660       
0A74 D2A6       660       setb SPEAKER ;Turn on speaker
0A76 D28E       660       setb TR1 ;Start playback by enabling Timer1
0A78            660       ;clr sound_flag ; sound ends
0A78 020C64     661       ljmp state_8_hop2
0A7B            662   
0A7B            663       play_11:
0A7B B40B34     664           cjne a, #0x0b, play_12
0A7E            665       ; ***play audio***
0A7E            665       ;cjne sound_flag, #0, $
0A7E            665       
0A7E 12177B     665       lcall Wait_Half_Second
0A81 C28E       665       clr TR1 ; Stop Timer 1 ISR from playing previous request
0A83 D2A5       665       setb FLASH_CE
0A85            665       ;setb sound_flag ; sound starts
0A85 C2A6       665       clr SPEAKER ; Turn off speaker
0A87 C2A5       665       clr FLASH_CE ; Enable SPI Flash
0A89 7403       665       mov a, #READ_BYTES
0A8B 12040D     665       lcall Send_SPI
0A8E            665       ; Set the initial position in memory where to start playing
0A8E            665       
0A8E 7402       665       mov a, #0x02 ; change initial position
0A90 12040D     665       lcall Send_SPI
0A93 749B       665       mov a, #0x9b ; next memory position
0A95 12040D     665       lcall Send_SPI
0A98 74F8       665       mov a, #0xf8 ; next memory position
0A9A 12040D     665       lcall Send_SPI
0A9D 7402       665       mov a, #0x02 ; request first byte to send to DAC
0A9F 12040D     665       lcall Send_SPI
0AA2            665       
0AA2            665       ; How many bytes to play?
0AA2 754E00     665       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0AA5 754D1F     665       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
0AA8 754C40     665       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
0AAB            665       
0AAB            665       
0AAB D2A6       665       setb SPEAKER ;Turn on speaker
0AAD D28E       665       setb TR1 ;Start playback by enabling Timer1
0AAF            665       ;clr sound_flag ; sound ends
0AAF 020C64     666           ljmp state_8_hop2
0AB2            667   
0AB2            668       play_12:
0AB2 B40C34     669           cjne a, #0x0c, play_13
0AB5            670       ; ***play audio***
0AB5            670       ;cjne sound_flag, #0, $
0AB5            670       
0AB5 12177B     670       lcall Wait_Half_Second
0AB8 C28E       670       clr TR1 ; Stop Timer 1 ISR from playing previous request
0ABA D2A5       670       setb FLASH_CE
0ABC            670       ;setb sound_flag ; sound starts
0ABC C2A6       670       clr SPEAKER ; Turn off speaker
0ABE C2A5       670       clr FLASH_CE ; Enable SPI Flash
0AC0 7403       670       mov a, #READ_BYTES
0AC2 12040D     670       lcall Send_SPI
0AC5            670       ; Set the initial position in memory where to start playing
0AC5            670       
0AC5 7402       670       mov a, #0x02 ; change initial position
0AC7 12040D     670       lcall Send_SPI
0ACA 74B7       670       mov a, #0xb7 ; next memory position
0ACC 12040D     670       lcall Send_SPI
0ACF 7450       670       mov a, #0x50 ; next memory position
0AD1 12040D     670       lcall Send_SPI
0AD4 7402       670       mov a, #0x02 ; request first byte to send to DAC
0AD6 12040D     670       lcall Send_SPI
0AD9            670       
0AD9            670       ; How many bytes to play?
0AD9 754E00     670       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0ADC 754D1F     670       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
0ADF 754C40     670       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
0AE2            670       
0AE2            670       
0AE2 D2A6       670       setb SPEAKER ;Turn on speaker
0AE4 D28E       670       setb TR1 ;Start playback by enabling Timer1
0AE6            670       ;clr sound_flag ; sound ends
0AE6 020C64     671           ljmp state_8_hop2
0AE9            672   
0AE9            673       play_13:
0AE9 B40D34     674           cjne a, #0x0d, play_14
0AEC            675       ; ***play audio***
0AEC            675       ;cjne sound_flag, #0, $
0AEC            675       
0AEC 12177B     675       lcall Wait_Half_Second
0AEF C28E       675       clr TR1 ; Stop Timer 1 ISR from playing previous request
0AF1 D2A5       675       setb FLASH_CE
0AF3            675       ;setb sound_flag ; sound starts
0AF3 C2A6       675       clr SPEAKER ; Turn off speaker
0AF5 C2A5       675       clr FLASH_CE ; Enable SPI Flash
0AF7 7403       675       mov a, #READ_BYTES
0AF9 12040D     675       lcall Send_SPI
0AFC            675       ; Set the initial position in memory where to start playing
0AFC            675       
0AFC 7402       675       mov a, #0x02 ; change initial position
0AFE 12040D     675       lcall Send_SPI
0B01 74CE       675       mov a, #0xce ; next memory position
0B03 12040D     675       lcall Send_SPI
0B06 74C0       675       mov a, #0xc0 ; next memory position
0B08 12040D     675       lcall Send_SPI
0B0B 7402       675       mov a, #0x02 ; request first byte to send to DAC
0B0D 12040D     675       lcall Send_SPI
0B10            675       
0B10            675       ; How many bytes to play?
0B10 754E00     675       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0B13 754D2E     675       mov w+1, #0x2e ; Load the middle byte of the number of bytes to play
0B16 754CE0     675       mov w+0, #0xe0 ; Load the low byte of the number of bytes to play
0B19            675       
0B19            675       
0B19 D2A6       675       setb SPEAKER ;Turn on speaker
0B1B D28E       675       setb TR1 ;Start playback by enabling Timer1
0B1D            675       ;clr sound_flag ; sound ends
0B1D 020C64     676           ljmp state_8_hop2
0B20            677   
0B20            678       play_14:
0B20 B40E34     679           cjne a, #0x0e, play_15
0B23            680       ; ***play audio***
0B23            680       ;cjne sound_flag, #0, $
0B23            680       
0B23 12177B     680       lcall Wait_Half_Second
0B26 C28E       680       clr TR1 ; Stop Timer 1 ISR from playing previous request
0B28 D2A5       680       setb FLASH_CE
0B2A            680       ;setb sound_flag ; sound starts
0B2A C2A6       680       clr SPEAKER ; Turn off speaker
0B2C C2A5       680       clr FLASH_CE ; Enable SPI Flash
0B2E 7403       680       mov a, #READ_BYTES
0B30 12040D     680       lcall Send_SPI
0B33            680       ; Set the initial position in memory where to start playing
0B33            680       
0B33 7402       680       mov a, #0x02 ; change initial position
0B35 12040D     680       lcall Send_SPI
0B38 74F5       680       mov a, #0xf5 ; next memory position
0B3A 12040D     680       lcall Send_SPI
0B3D 74D0       680       mov a, #0xd0 ; next memory position
0B3F 12040D     680       lcall Send_SPI
0B42 7402       680       mov a, #0x02 ; request first byte to send to DAC
0B44 12040D     680       lcall Send_SPI
0B47            680       
0B47            680       ; How many bytes to play?
0B47 754E00     680       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0B4A 754D36     680       mov w+1, #0x36 ; Load the middle byte of the number of bytes to play
0B4D 754CB0     680       mov w+0, #0xb0 ; Load the low byte of the number of bytes to play
0B50            680       
0B50            680       
0B50 D2A6       680       setb SPEAKER ;Turn on speaker
0B52 D28E       680       setb TR1 ;Start playback by enabling Timer1
0B54            680       ;clr sound_flag ; sound ends
0B54 020C64     681           ljmp state_8_hop2
0B57            682   
0B57            683       play_15:
0B57 B40F34     684           cjne a, #0x0f, play_16
0B5A            685       ; ***play audio***
0B5A            685       ;cjne sound_flag, #0, $
0B5A            685       
0B5A 12177B     685       lcall Wait_Half_Second
0B5D C28E       685       clr TR1 ; Stop Timer 1 ISR from playing previous request
0B5F D2A5       685       setb FLASH_CE
0B61            685       ;setb sound_flag ; sound starts
0B61 C2A6       685       clr SPEAKER ; Turn off speaker
0B63 C2A5       685       clr FLASH_CE ; Enable SPI Flash
0B65 7403       685       mov a, #READ_BYTES
0B67 12040D     685       lcall Send_SPI
0B6A            685       ; Set the initial position in memory where to start playing
0B6A            685       
0B6A 7403       685       mov a, #0x03 ; change initial position
0B6C 12040D     685       lcall Send_SPI
0B6F 7428       685       mov a, #0x28 ; next memory position
0B71 12040D     685       lcall Send_SPI
0B74 7498       685       mov a, #0x98 ; next memory position
0B76 12040D     685       lcall Send_SPI
0B79 7403       685       mov a, #0x03 ; request first byte to send to DAC
0B7B 12040D     685       lcall Send_SPI
0B7E            685       
0B7E            685       ; How many bytes to play?
0B7E 754E00     685       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0B81 754D23     685       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
0B84 754C28     685       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
0B87            685       
0B87            685       
0B87 D2A6       685       setb SPEAKER ;Turn on speaker
0B89 D28E       685       setb TR1 ;Start playback by enabling Timer1
0B8B            685       ;clr sound_flag ; sound ends
0B8B 020C64     686           ljmp state_8_hop2
0B8E            687   
0B8E            688       play_16:
0B8E B41034     689           cjne a, #0x10, play_17
0B91            690       ; ***play audio***
0B91            690       ;cjne sound_flag, #0, $
0B91            690       
0B91 12177B     690       lcall Wait_Half_Second
0B94 C28E       690       clr TR1 ; Stop Timer 1 ISR from playing previous request
0B96 D2A5       690       setb FLASH_CE
0B98            690       ;setb sound_flag ; sound starts
0B98 C2A6       690       clr SPEAKER ; Turn off speaker
0B9A C2A5       690       clr FLASH_CE ; Enable SPI Flash
0B9C 7403       690       mov a, #READ_BYTES
0B9E 12040D     690       lcall Send_SPI
0BA1            690       ; Set the initial position in memory where to start playing
0BA1            690       
0BA1 7403       690       mov a, #0x03 ; change initial position
0BA3 12040D     690       lcall Send_SPI
0BA6 7447       690       mov a, #0x47 ; next memory position
0BA8 12040D     690       lcall Send_SPI
0BAB 74D8       690       mov a, #0xd8 ; next memory position
0BAD 12040D     690       lcall Send_SPI
0BB0 7403       690       mov a, #0x03 ; request first byte to send to DAC
0BB2 12040D     690       lcall Send_SPI
0BB5            690       
0BB5            690       ; How many bytes to play?
0BB5 754E00     690       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0BB8 754D32     690       mov w+1, #0x32 ; Load the middle byte of the number of bytes to play
0BBB 754CC8     690       mov w+0, #0xc8 ; Load the low byte of the number of bytes to play
0BBE            690       
0BBE            690       
0BBE D2A6       690       setb SPEAKER ;Turn on speaker
0BC0 D28E       690       setb TR1 ;Start playback by enabling Timer1
0BC2            690       ;clr sound_flag ; sound ends
0BC2 020C64     691           ljmp state_8_hop2
0BC5            692   
0BC5            693       play_17:
0BC5 B41134     694           cjne a, #0x11, play_18
0BC8            695       ; ***play audio***
0BC8            695       ;cjne sound_flag, #0, $
0BC8            695       
0BC8 12177B     695       lcall Wait_Half_Second
0BCB C28E       695       clr TR1 ; Stop Timer 1 ISR from playing previous request
0BCD D2A5       695       setb FLASH_CE
0BCF            695       ;setb sound_flag ; sound starts
0BCF C2A6       695       clr SPEAKER ; Turn off speaker
0BD1 C2A5       695       clr FLASH_CE ; Enable SPI Flash
0BD3 7403       695       mov a, #READ_BYTES
0BD5 12040D     695       lcall Send_SPI
0BD8            695       ; Set the initial position in memory where to start playing
0BD8            695       
0BD8 7403       695       mov a, #0x03 ; change initial position
0BDA 12040D     695       lcall Send_SPI
0BDD 7476       695       mov a, #0x76 ; next memory position
0BDF 12040D     695       lcall Send_SPI
0BE2 74B8       695       mov a, #0xb8 ; next memory position
0BE4 12040D     695       lcall Send_SPI
0BE7 7403       695       mov a, #0x03 ; request first byte to send to DAC
0BE9 12040D     695       lcall Send_SPI
0BEC            695       
0BEC            695       ; How many bytes to play?
0BEC 754E00     695       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0BEF 754D2E     695       mov w+1, #0x2e ; Load the middle byte of the number of bytes to play
0BF2 754C20     695       mov w+0, #0x20 ; Load the low byte of the number of bytes to play
0BF5            695       
0BF5            695       
0BF5 D2A6       695       setb SPEAKER ;Turn on speaker
0BF7 D28E       695       setb TR1 ;Start playback by enabling Timer1
0BF9            695       ;clr sound_flag ; sound ends
0BF9 020C64     696           ljmp state_8_hop2
0BFC            697   
0BFC            698       play_18:
0BFC B41234     699           cjne a, #0x12, play_19
0BFF            700       ; ***play audio***
0BFF            700       ;cjne sound_flag, #0, $
0BFF            700       
0BFF 12177B     700       lcall Wait_Half_Second
0C02 C28E       700       clr TR1 ; Stop Timer 1 ISR from playing previous request
0C04 D2A5       700       setb FLASH_CE
0C06            700       ;setb sound_flag ; sound starts
0C06 C2A6       700       clr SPEAKER ; Turn off speaker
0C08 C2A5       700       clr FLASH_CE ; Enable SPI Flash
0C0A 7403       700       mov a, #READ_BYTES
0C0C 12040D     700       lcall Send_SPI
0C0F            700       ; Set the initial position in memory where to start playing
0C0F            700       
0C0F 7403       700       mov a, #0x03 ; change initial position
0C11 12040D     700       lcall Send_SPI
0C14 74A1       700       mov a, #0xa1 ; next memory position
0C16 12040D     700       lcall Send_SPI
0C19 74B0       700       mov a, #0xb0 ; next memory position
0C1B 12040D     700       lcall Send_SPI
0C1E 7403       700       mov a, #0x03 ; request first byte to send to DAC
0C20 12040D     700       lcall Send_SPI
0C23            700       
0C23            700       ; How many bytes to play?
0C23 754E00     700       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0C26 754D27     700       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
0C29 754C10     700       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
0C2C            700       
0C2C            700       
0C2C D2A6       700       setb SPEAKER ;Turn on speaker
0C2E D28E       700       setb TR1 ;Start playback by enabling Timer1
0C30            700       ;clr sound_flag ; sound ends
0C30 020C64     701           ljmp state_8_hop2
0C33            702   
0C33            703       play_19:
0C33            704       ; ***play audio***
0C33            704       ;cjne sound_flag, #0, $
0C33            704       
0C33 12177B     704       lcall Wait_Half_Second
0C36 C28E       704       clr TR1 ; Stop Timer 1 ISR from playing previous request
0C38 D2A5       704       setb FLASH_CE
0C3A            704       ;setb sound_flag ; sound starts
0C3A C2A6       704       clr SPEAKER ; Turn off speaker
0C3C C2A5       704       clr FLASH_CE ; Enable SPI Flash
0C3E 7403       704       mov a, #READ_BYTES
0C40 12040D     704       lcall Send_SPI
0C43            704       ; Set the initial position in memory where to start playing
0C43            704       
0C43 7403       704       mov a, #0x03 ; change initial position
0C45 12040D     704       lcall Send_SPI
0C48 74C8       704       mov a, #0xc8 ; next memory position
0C4A 12040D     704       lcall Send_SPI
0C4D 74C0       704       mov a, #0xc0 ; next memory position
0C4F 12040D     704       lcall Send_SPI
0C52 7403       704       mov a, #0x03 ; request first byte to send to DAC
0C54 12040D     704       lcall Send_SPI
0C57            704       
0C57            704       ; How many bytes to play?
0C57 754E00     704       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0C5A 754D27     704       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
0C5D 754C10     704       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
0C60            704       
0C60            704       
0C60 D2A6       704       setb SPEAKER ;Turn on speaker
0C62 D28E       704       setb TR1 ;Start playback by enabling Timer1
0C64            704       ;clr sound_flag ; sound ends
0C64            705   
0C64            706       state_8_hop2:
0C64            707       ; go to state_8_sound
0C64 020C67     708           ljmp state_8_sound
0C67            709   
0C67            710   state_8_sound:
0C67            711   ; go to state_0_sound
0C67 020541     712       ljmp Sound_ret
0C6A            713   
0C6A            714   ;****SPANISH SOUND FSM--------------------------------------------------------
0C6A            715   SOUND_FSM_S:
0C6A            716   state_0_sound_S:
0C6A            717   ;check if 5 seconds has passed, if yes go to state 1, if no exit function 
0C6A 300104     718       jnb five_seconds_flag, Sound_ret_S
0C6D C201       719       clr five_seconds_flag
0C6F 8001       720       sjmp state_1_sound_S
0C71            721   Sound_ret_S:
0C71 22         722       ret
0C72            723   
0C72            724   state_1_sound_S:
0C72            725   ; check if temp is greater than or equal to 100, if yes go to state 2
0C72            726   ; check if temp is less than 100, if yes go to state 4
0C72 E53B       727       mov a, Temp_oven
0C74 9464       728       subb a, #100
0C76 5002       729       jnc state_2_sound_hop_S
0C78 4002       730       jc state_4_sound_hop_S
0C7A            731   
0C7A            732       state_2_sound_hop_S:
0C7A 8003       733           sjmp state_2_sound_S
0C7C            734   
0C7C            735       state_4_sound_hop_S:
0C7C 020D78     736           ljmp state_4_sound_S
0C7F            737   
0C7F            738   state_2_sound_S:
0C7F            739   ;divide temp by 100, if it is 1 play sound: "100", if it is 2 play sound: "200"
0C7F            740   ; go to state_3_sound
0C7F 75F064     741       mov b, #100
0C82 E53B       742       mov a, Temp_oven
0C84 84         743       div ab
0C85 9401       744       subb a, #1
0C87 600A       745       jz play_sound_100_S
0C89            746   
0C89 75F064     747       mov b, #100
0C8C E53B       748       mov a, Temp_oven
0C8E 84         749       div ab
0C8F 9402       750       subb a, #2
0C91 6065       751       jz play_sound_200_S
0C93            752      
0C93            753       play_sound_100_S: 
0C93            754       ; ***play audio***
0C93            754       ;cjne sound_flag, #0, $
0C93            754       
0C93 12177B     754       lcall Wait_Half_Second
0C96 C28E       754       clr TR1 ; Stop Timer 1 ISR from playing previous request
0C98 D2A5       754       setb FLASH_CE
0C9A            754       ;setb sound_flag ; sound starts
0C9A C2A6       754       clr SPEAKER ; Turn off speaker
0C9C C2A5       754       clr FLASH_CE ; Enable SPI Flash
0C9E 7403       754       mov a, #READ_BYTES
0CA0 12040D     754       lcall Send_SPI
0CA3            754       ; Set the initial position in memory where to start playing
0CA3            754       
0CA3 7401       754       mov a, #0x01 ; change initial position
0CA5 12040D     754       lcall Send_SPI
0CA8 7493       754       mov a, #0x93 ; next memory position
0CAA 12040D     754       lcall Send_SPI
0CAD 7484       754       mov a, #0x84 ; next memory position
0CAF 12040D     754       lcall Send_SPI
0CB2 7401       754       mov a, #0x01 ; request first byte to send to DAC
0CB4 12040D     754       lcall Send_SPI
0CB7            754       
0CB7            754       ; How many bytes to play?
0CB7 754E00     754       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0CBA 754D36     754       mov w+1, #0x36 ; Load the middle byte of the number of bytes to play
0CBD 754CB0     754       mov w+0, #0xb0 ; Load the low byte of the number of bytes to play
0CC0            754       
0CC0            754       
0CC0 D2A6       754       setb SPEAKER ;Turn on speaker
0CC2 D28E       754       setb TR1 ;Start playback by enabling Timer1
0CC4            754       ;clr sound_flag ; sound ends ;one
0CC4            755       ; ***play audio***
0CC4            755       ;cjne sound_flag, #0, $
0CC4            755       
0CC4 12177B     755       lcall Wait_Half_Second
0CC7 C28E       755       clr TR1 ; Stop Timer 1 ISR from playing previous request
0CC9 D2A5       755       setb FLASH_CE
0CCB            755       ;setb sound_flag ; sound starts
0CCB C2A6       755       clr SPEAKER ; Turn off speaker
0CCD C2A5       755       clr FLASH_CE ; Enable SPI Flash
0CCF 7403       755       mov a, #READ_BYTES
0CD1 12040D     755       lcall Send_SPI
0CD4            755       ; Set the initial position in memory where to start playing
0CD4            755       
0CD4 7405       755       mov a, #0x05 ; change initial position
0CD6 12040D     755       lcall Send_SPI
0CD9 7409       755       mov a, #0x09 ; next memory position
0CDB 12040D     755       lcall Send_SPI
0CDE 7410       755       mov a, #0x10 ; next memory position
0CE0 12040D     755       lcall Send_SPI
0CE3 7405       755       mov a, #0x05 ; request first byte to send to DAC
0CE5 12040D     755       lcall Send_SPI
0CE8            755       
0CE8            755       ; How many bytes to play?
0CE8 754E00     755       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0CEB 754D27     755       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
0CEE 754C10     755       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
0CF1            755       
0CF1            755       
0CF1 D2A6       755       setb SPEAKER ;Turn on speaker
0CF3 D28E       755       setb TR1 ;Start playback by enabling Timer1
0CF5            755       ;clr sound_flag ; sound ends ;hundred
0CF5 020D5D     756           ljmp state_3_sound_S
0CF8            757   
0CF8            758       play_sound_200_S:
0CF8            759       ; ***play audio***
0CF8            759       ;cjne sound_flag, #0, $
0CF8            759       
0CF8 12177B     759       lcall Wait_Half_Second
0CFB C28E       759       clr TR1 ; Stop Timer 1 ISR from playing previous request
0CFD D2A5       759       setb FLASH_CE
0CFF            759       ;setb sound_flag ; sound starts
0CFF C2A6       759       clr SPEAKER ; Turn off speaker
0D01 C2A5       759       clr FLASH_CE ; Enable SPI Flash
0D03 7403       759       mov a, #READ_BYTES
0D05 12040D     759       lcall Send_SPI
0D08            759       ; Set the initial position in memory where to start playing
0D08            759       
0D08 7401       759       mov a, #0x01 ; change initial position
0D0A 12040D     759       lcall Send_SPI
0D0D 74C7       759       mov a, #0xc7 ; next memory position
0D0F 12040D     759       lcall Send_SPI
0D12 7414       759       mov a, #0x14 ; next memory position
0D14 12040D     759       lcall Send_SPI
0D17 7401       759       mov a, #0x01 ; request first byte to send to DAC
0D19 12040D     759       lcall Send_SPI
0D1C            759       
0D1C            759       ; How many bytes to play?
0D1C 754E00     759       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0D1F 754D13     759       mov w+1, #0x13 ; Load the middle byte of the number of bytes to play
0D22 754C88     759       mov w+0, #0x88 ; Load the low byte of the number of bytes to play
0D25            759       
0D25            759       
0D25 D2A6       759       setb SPEAKER ;Turn on speaker
0D27 D28E       759       setb TR1 ;Start playback by enabling Timer1
0D29            759       ;clr sound_flag ; sound ends ;two
0D29            760       ; ***play audio***
0D29            760       ;cjne sound_flag, #0, $
0D29            760       
0D29 12177B     760       lcall Wait_Half_Second
0D2C C28E       760       clr TR1 ; Stop Timer 1 ISR from playing previous request
0D2E D2A5       760       setb FLASH_CE
0D30            760       ;setb sound_flag ; sound starts
0D30 C2A6       760       clr SPEAKER ; Turn off speaker
0D32 C2A5       760       clr FLASH_CE ; Enable SPI Flash
0D34 7403       760       mov a, #READ_BYTES
0D36 12040D     760       lcall Send_SPI
0D39            760       ; Set the initial position in memory where to start playing
0D39            760       
0D39 7405       760       mov a, #0x05 ; change initial position
0D3B 12040D     760       lcall Send_SPI
0D3E 7409       760       mov a, #0x09 ; next memory position
0D40 12040D     760       lcall Send_SPI
0D43 7410       760       mov a, #0x10 ; next memory position
0D45 12040D     760       lcall Send_SPI
0D48 7405       760       mov a, #0x05 ; request first byte to send to DAC
0D4A 12040D     760       lcall Send_SPI
0D4D            760       
0D4D            760       ; How many bytes to play?
0D4D 754E00     760       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0D50 754D27     760       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
0D53 754C10     760       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
0D56            760       
0D56            760       
0D56 D2A6       760       setb SPEAKER ;Turn on speaker
0D58 D28E       760       setb TR1 ;Start playback by enabling Timer1
0D5A            760       ;clr sound_flag ; sound ends ;hundred
0D5A 020D5D     761           ljmp state_3_sound_S
0D5D            762   
0D5D            763   state_3_sound_S:
0D5D            764   ; check remainder of temp, if it is 0, exit
0D5D            765   ; if not 0, go to state_4_sound
0D5D            766   
0D5D            767   
0D5D 75F064     768       mov b, #100
0D60 E53B       769       mov a, Temp_oven
0D62 95F0       770       subb a, b
0D64 E5F0       771       mov a, b
0D66 600D       772       jz state_3_sound_hop_S
0D68            773       
0D68 75F0C8     774       mov b, #200
0D6B E53B       775       mov a, Temp_oven
0D6D 95F0       776       subb a, b
0D6F E5F0       777       mov a, b
0D71 6002       778       jz state_3_sound_hop_S
0D73            779   
0D73 8003       780       sjmp state_4_sound_S
0D75            781   
0D75            782       state_3_sound_hop_S:
0D75 020C71     783           ljmp Sound_ret_S
0D78            784   
0D78            785   state_4_sound_S:
0D78            786   ; if T % 100 greater or equal to 20, go to state_5_sound,
0D78 75F064     787       mov b, #100
0D7B E53B       788       mov a, Temp_oven
0D7D 84         789       div ab
0D7E            790       ;mov R0, b
0D7E E5F0       791       mov a, b 
0D80            792   
0D80            793   
0D80 9414       794       subb a, #20
0D82 5027       795       jnc state_5_sound_S
0D84 6025       796       jz state_5_sound_S
0D86 E4         797       clr a
0D87            798   ; if T % 100 is less than 10, go to state_6_sound
0D87 75F064     799       mov b, #100
0D8A E53B       800       mov a, Temp_oven
0D8C 84         801       div ab
0D8D E5F0       802       mov a, b
0D8F 940A       803       subb a, #10
0D91 4015       804       jc state_6_sound_hop0_S
0D93            805       
0D93            806       ;mov a, b
0D93            807       
0D93            808       ; ubb a, #0
0D93            809       ;jc state_6_sound_hop0
0D93            810       ;clr a
0D93            811   ; if T % 100 is greater than or equal to 10 and less than 20, go to state_7_sound
0D93            812   
0D93 75F064     813       mov b, #100
0D96 E53B       814       mov a, Temp_oven
0D98 84         815       div ab
0D99 E5F0       816       mov a, b
0D9B 940A       817       subb a, #10
0D9D 6000       818       jz and_branch_S
0D9F            819   
0D9F            820       and_branch_S:
0D9F E5F0       821           mov a, b
0DA1 9414       822           subb a, #20
0DA3 4000       823           jc state_7_sound_hop0_S
0DA5            824       
0DA5            825       state_7_sound_hop0_S:
0DA5 02116C     826           ljmp state_7_sound_S
0DA8            827   
0DA8            828       state_6_sound_hop0_S:
0DA8 020F6C     829           ljmp state_6_sound_S
0DAB            830       
0DAB            831   
0DAB            832   state_5_sound_S:
0DAB            833   ; play number from 20 to 90 in decades (20, 30, 40, 50, 60, 70, 80, 90), based off remainder from temp divided by 100
0DAB            834   ; if (T % 100) % 10 is not equal to 0, go to state_6_sound
0DAB            835   ; if (T % 100) % 10 is equal to 0, go to state_8_sound
0DAB            836   
0DAB            837       play_sound_S:
0DAB            838           ;ljmp PLAYBACK_TEMP
0DAB E53B       839           mov a, Temp_oven
0DAD 75F064     840           mov b, #100
0DB0 84         841           div ab
0DB1 E5F0       842           mov a, b
0DB3 75F00A     843           mov b, #10
0DB6 84         844           div ab
0DB7 B40234     845           cjne a, #2, play_30_S
0DBA            846           ;mov    
0DBA            847   
0DBA            848           play_20_S:
0DBA            849       ; ***play audio***
0DBA            849       ;cjne sound_flag, #0, $
0DBA            849       
0DBA 12177B     849       lcall Wait_Half_Second
0DBD C28E       849       clr TR1 ; Stop Timer 1 ISR from playing previous request
0DBF D2A5       849       setb FLASH_CE
0DC1            849       ;setb sound_flag ; sound starts
0DC1 C2A6       849       clr SPEAKER ; Turn off speaker
0DC3 C2A5       849       clr FLASH_CE ; Enable SPI Flash
0DC5 7403       849       mov a, #READ_BYTES
0DC7 12040D     849       lcall Send_SPI
0DCA            849       ; Set the initial position in memory where to start playing
0DCA            849       
0DCA 7403       849       mov a, #0x03 ; change initial position
0DCC 12040D     849       lcall Send_SPI
0DCF 74EF       849       mov a, #0xef ; next memory position
0DD1 12040D     849       lcall Send_SPI
0DD4 74D0       849       mov a, #0xd0 ; next memory position
0DD6 12040D     849       lcall Send_SPI
0DD9 7403       849       mov a, #0x03 ; request first byte to send to DAC
0DDB 12040D     849       lcall Send_SPI
0DDE            849       
0DDE            849       ; How many bytes to play?
0DDE 754E00     849       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0DE1 754D27     849       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
0DE4 754C10     849       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
0DE7            849       
0DE7            849       
0DE7 D2A6       849       setb SPEAKER ;Turn on speaker
0DE9 D28E       849       setb TR1 ;Start playback by enabling Timer1
0DEB            849       ;clr sound_flag ; sound ends
0DEB            850               ;lcall Wait_One_Second
0DEB 020F69     851               ljmp state_6_sound_hop1_S
0DEE            852   
0DEE            853           play_30_S:
0DEE            854               
0DEE B40334     855               cjne a, #3, play_40_S   
0DF1            856       ; ***play audio***
0DF1            856       ;cjne sound_flag, #0, $
0DF1            856       
0DF1 12177B     856       lcall Wait_Half_Second
0DF4 C28E       856       clr TR1 ; Stop Timer 1 ISR from playing previous request
0DF6 D2A5       856       setb FLASH_CE
0DF8            856       ;setb sound_flag ; sound starts
0DF8 C2A6       856       clr SPEAKER ; Turn off speaker
0DFA C2A5       856       clr FLASH_CE ; Enable SPI Flash
0DFC 7403       856       mov a, #READ_BYTES
0DFE 12040D     856       lcall Send_SPI
0E01            856       ; Set the initial position in memory where to start playing
0E01            856       
0E01 7404       856       mov a, #0x04 ; change initial position
0E03 12040D     856       lcall Send_SPI
0E06 7416       856       mov a, #0x16 ; next memory position
0E08 12040D     856       lcall Send_SPI
0E0B 74E0       856       mov a, #0xe0 ; next memory position
0E0D 12040D     856       lcall Send_SPI
0E10 7404       856       mov a, #0x04 ; request first byte to send to DAC
0E12 12040D     856       lcall Send_SPI
0E15            856       
0E15            856       ; How many bytes to play?
0E15 754E00     856       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0E18 754D23     856       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
0E1B 754C28     856       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
0E1E            856       
0E1E            856       
0E1E D2A6       856       setb SPEAKER ;Turn on speaker
0E20 D28E       856       setb TR1 ;Start playback by enabling Timer1
0E22            856       ;clr sound_flag ; sound ends
0E22 020F69     857               ljmp state_6_sound_hop1_S
0E25            858   
0E25            859           play_40_S:
0E25            860               
0E25 B40434     861               cjne a, #4, play_50_S 
0E28            862       ; ***play audio***
0E28            862       ;cjne sound_flag, #0, $
0E28            862       
0E28 12177B     862       lcall Wait_Half_Second
0E2B C28E       862       clr TR1 ; Stop Timer 1 ISR from playing previous request
0E2D D2A5       862       setb FLASH_CE
0E2F            862       ;setb sound_flag ; sound starts
0E2F C2A6       862       clr SPEAKER ; Turn off speaker
0E31 C2A5       862       clr FLASH_CE ; Enable SPI Flash
0E33 7403       862       mov a, #READ_BYTES
0E35 12040D     862       lcall Send_SPI
0E38            862       ; Set the initial position in memory where to start playing
0E38            862       
0E38 7404       862       mov a, #0x04 ; change initial position
0E3A 12040D     862       lcall Send_SPI
0E3D 743D       862       mov a, #0x3d ; next memory position
0E3F 12040D     862       lcall Send_SPI
0E42 74F0       862       mov a, #0xf0 ; next memory position
0E44 12040D     862       lcall Send_SPI
0E47 7404       862       mov a, #0x04 ; request first byte to send to DAC
0E49 12040D     862       lcall Send_SPI
0E4C            862       
0E4C            862       ; How many bytes to play?
0E4C 754E00     862       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0E4F 754D1F     862       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
0E52 754C40     862       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
0E55            862       
0E55            862       
0E55 D2A6       862       setb SPEAKER ;Turn on speaker
0E57 D28E       862       setb TR1 ;Start playback by enabling Timer1
0E59            862       ;clr sound_flag ; sound ends
0E59 020F69     863               ljmp state_6_sound_hop1_S
0E5C            864   
0E5C            865           play_50_S:
0E5C            866              
0E5C B40534     867               cjne a, #5, play_60_S  
0E5F            868       ; ***play audio***
0E5F            868       ;cjne sound_flag, #0, $
0E5F            868       
0E5F 12177B     868       lcall Wait_Half_Second
0E62 C28E       868       clr TR1 ; Stop Timer 1 ISR from playing previous request
0E64 D2A5       868       setb FLASH_CE
0E66            868       ;setb sound_flag ; sound starts
0E66 C2A6       868       clr SPEAKER ; Turn off speaker
0E68 C2A5       868       clr FLASH_CE ; Enable SPI Flash
0E6A 7403       868       mov a, #READ_BYTES
0E6C 12040D     868       lcall Send_SPI
0E6F            868       ; Set the initial position in memory where to start playing
0E6F            868       
0E6F 7404       868       mov a, #0x04 ; change initial position
0E71 12040D     868       lcall Send_SPI
0E74 7451       868       mov a, #0x51 ; next memory position
0E76 12040D     868       lcall Send_SPI
0E79 7478       868       mov a, #0x78 ; next memory position
0E7B 12040D     868       lcall Send_SPI
0E7E 7404       868       mov a, #0x04 ; request first byte to send to DAC
0E80 12040D     868       lcall Send_SPI
0E83            868       
0E83            868       ; How many bytes to play?
0E83 754E00     868       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0E86 754D23     868       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
0E89 754C28     868       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
0E8C            868       
0E8C            868       
0E8C D2A6       868       setb SPEAKER ;Turn on speaker
0E8E D28E       868       setb TR1 ;Start playback by enabling Timer1
0E90            868       ;clr sound_flag ; sound ends
0E90 020F69     869               ljmp state_6_sound_hop1_S
0E93            870   
0E93            871           play_60_S:
0E93            872               
0E93 B40634     873               cjne a, #6, play_70_S  
0E96            874       ; ***play audio***
0E96            874       ;cjne sound_flag, #0, $
0E96            874       
0E96 12177B     874       lcall Wait_Half_Second
0E99 C28E       874       clr TR1 ; Stop Timer 1 ISR from playing previous request
0E9B D2A5       874       setb FLASH_CE
0E9D            874       ;setb sound_flag ; sound starts
0E9D C2A6       874       clr SPEAKER ; Turn off speaker
0E9F C2A5       874       clr FLASH_CE ; Enable SPI Flash
0EA1 7403       874       mov a, #READ_BYTES
0EA3 12040D     874       lcall Send_SPI
0EA6            874       ; Set the initial position in memory where to start playing
0EA6            874       
0EA6 7404       874       mov a, #0x04 ; change initial position
0EA8 12040D     874       lcall Send_SPI
0EAB 7474       874       mov a, #0x74 ; next memory position
0EAD 12040D     874       lcall Send_SPI
0EB0 74A0       874       mov a, #0xa0 ; next memory position
0EB2 12040D     874       lcall Send_SPI
0EB5 7404       874       mov a, #0x04 ; request first byte to send to DAC
0EB7 12040D     874       lcall Send_SPI
0EBA            874       
0EBA            874       ; How many bytes to play?
0EBA 754E00     874       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0EBD 754D27     874       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
0EC0 754C10     874       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
0EC3            874       
0EC3            874       
0EC3 D2A6       874       setb SPEAKER ;Turn on speaker
0EC5 D28E       874       setb TR1 ;Start playback by enabling Timer1
0EC7            874       ;clr sound_flag ; sound ends
0EC7 020F69     875               ljmp state_6_sound_hop1_S
0ECA            876   
0ECA            877           play_70_S:
0ECA            878              
0ECA B40734     879               cjne a, #7, play_80_S  
0ECD            880       ; ***play audio***
0ECD            880       ;cjne sound_flag, #0, $
0ECD            880       
0ECD 12177B     880       lcall Wait_Half_Second
0ED0 C28E       880       clr TR1 ; Stop Timer 1 ISR from playing previous request
0ED2 D2A5       880       setb FLASH_CE
0ED4            880       ;setb sound_flag ; sound starts
0ED4 C2A6       880       clr SPEAKER ; Turn off speaker
0ED6 C2A5       880       clr FLASH_CE ; Enable SPI Flash
0ED8 7403       880       mov a, #READ_BYTES
0EDA 12040D     880       lcall Send_SPI
0EDD            880       ; Set the initial position in memory where to start playing
0EDD            880       
0EDD 7404       880       mov a, #0x04 ; change initial position
0EDF 12040D     880       lcall Send_SPI
0EE2 749B       880       mov a, #0x9b ; next memory position
0EE4 12040D     880       lcall Send_SPI
0EE7 74B0       880       mov a, #0xb0 ; next memory position
0EE9 12040D     880       lcall Send_SPI
0EEC 7404       880       mov a, #0x04 ; request first byte to send to DAC
0EEE 12040D     880       lcall Send_SPI
0EF1            880       
0EF1            880       ; How many bytes to play?
0EF1 754E00     880       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0EF4 754D32     880       mov w+1, #0x32 ; Load the middle byte of the number of bytes to play
0EF7 754CC8     880       mov w+0, #0xc8 ; Load the low byte of the number of bytes to play
0EFA            880       
0EFA            880       
0EFA D2A6       880       setb SPEAKER ;Turn on speaker
0EFC D28E       880       setb TR1 ;Start playback by enabling Timer1
0EFE            880       ;clr sound_flag ; sound ends
0EFE 020F69     881               ljmp state_6_sound_hop1_S
0F01            882   
0F01            883           play_80_S:
0F01            884               
0F01 B40834     885               cjne a, #8, play_90_S  
0F04            886       ; ***play audio***
0F04            886       ;cjne sound_flag, #0, $
0F04            886       
0F04 12177B     886       lcall Wait_Half_Second
0F07 C28E       886       clr TR1 ; Stop Timer 1 ISR from playing previous request
0F09 D2A5       886       setb FLASH_CE
0F0B            886       ;setb sound_flag ; sound starts
0F0B C2A6       886       clr SPEAKER ; Turn off speaker
0F0D C2A5       886       clr FLASH_CE ; Enable SPI Flash
0F0F 7403       886       mov a, #READ_BYTES
0F11 12040D     886       lcall Send_SPI
0F14            886       ; Set the initial position in memory where to start playing
0F14            886       
0F14 7404       886       mov a, #0x04 ; change initial position
0F16 12040D     886       lcall Send_SPI
0F19 74C6       886       mov a, #0xc6 ; next memory position
0F1B 12040D     886       lcall Send_SPI
0F1E 74A8       886       mov a, #0xa8 ; next memory position
0F20 12040D     886       lcall Send_SPI
0F23 7404       886       mov a, #0x04 ; request first byte to send to DAC
0F25 12040D     886       lcall Send_SPI
0F28            886       
0F28            886       ; How many bytes to play?
0F28 754E00     886       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0F2B 754D23     886       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
0F2E 754C28     886       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
0F31            886       
0F31            886       
0F31 D2A6       886       setb SPEAKER ;Turn on speaker
0F33 D28E       886       setb TR1 ;Start playback by enabling Timer1
0F35            886       ;clr sound_flag ; sound ends
0F35 020F69     887               ljmp state_6_sound_hop1_S
0F38            888   
0F38            889           play_90_S:
0F38            890       ; ***play audio***
0F38            890       ;cjne sound_flag, #0, $
0F38            890       
0F38 12177B     890       lcall Wait_Half_Second
0F3B C28E       890       clr TR1 ; Stop Timer 1 ISR from playing previous request
0F3D D2A5       890       setb FLASH_CE
0F3F            890       ;setb sound_flag ; sound starts
0F3F C2A6       890       clr SPEAKER ; Turn off speaker
0F41 C2A5       890       clr FLASH_CE ; Enable SPI Flash
0F43 7403       890       mov a, #READ_BYTES
0F45 12040D     890       lcall Send_SPI
0F48            890       ; Set the initial position in memory where to start playing
0F48            890       
0F48 7404       890       mov a, #0x04 ; change initial position
0F4A 12040D     890       lcall Send_SPI
0F4D 74ED       890       mov a, #0xed ; next memory position
0F4F 12040D     890       lcall Send_SPI
0F52 74B8       890       mov a, #0xb8 ; next memory position
0F54 12040D     890       lcall Send_SPI
0F57 7404       890       mov a, #0x04 ; request first byte to send to DAC
0F59 12040D     890       lcall Send_SPI
0F5C            890       
0F5C            890       ; How many bytes to play?
0F5C 754E00     890       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0F5F 754D1F     890       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
0F62 754C40     890       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
0F65            890       
0F65            890       
0F65 D2A6       890       setb SPEAKER ;Turn on speaker
0F67 D28E       890       setb TR1 ;Start playback by enabling Timer1
0F69            890       ;clr sound_flag ; sound ends
0F69            891   
0F69            892   
0F69            893   
0F69            894   
0F69            895       state_6_sound_hop1_S:
0F69 020F6C     896           ljmp state_6_sound_S
0F6C            897           
0F6C            898       ;state_8_hop0:
0F6C            899           ;ljmp state_6_sound ;state_8_sound
0F6C            900   
0F6C            901   
0F6C            902   state_6_sound_S:
0F6C            903   ; play 1 - 9
0F6C            904       ;ljmp PLAYBACK_TEMP
0F6C 75F064     905       mov b, #100
0F6F E53B       906       mov a, Temp_oven
0F71 84         907       div ab
0F72 E5F0       908       mov a, b
0F74 75F00A     909       mov b, #10
0F77 84         910       div ab
0F78 E5F0       911       mov a, b
0F7A            912       
0F7A B40003     913       cjne a, #0x00, play_1_S
0F7D 021169     914       ljmp state_8_hop1_S
0F80            915   
0F80            916       play_1_S:
0F80 B40134     917           cjne a, #0x01, play_2_S
0F83            918       ; ***play audio***
0F83            918       ;cjne sound_flag, #0, $
0F83            918       
0F83 12177B     918       lcall Wait_Half_Second
0F86 C28E       918       clr TR1 ; Stop Timer 1 ISR from playing previous request
0F88 D2A5       918       setb FLASH_CE
0F8A            918       ;setb sound_flag ; sound starts
0F8A C2A6       918       clr SPEAKER ; Turn off speaker
0F8C C2A5       918       clr FLASH_CE ; Enable SPI Flash
0F8E 7403       918       mov a, #READ_BYTES
0F90 12040D     918       lcall Send_SPI
0F93            918       ; Set the initial position in memory where to start playing
0F93            918       
0F93 7401       918       mov a, #0x01 ; change initial position
0F95 12040D     918       lcall Send_SPI
0F98 7493       918       mov a, #0x93 ; next memory position
0F9A 12040D     918       lcall Send_SPI
0F9D 7484       918       mov a, #0x84 ; next memory position
0F9F 12040D     918       lcall Send_SPI
0FA2 7401       918       mov a, #0x01 ; request first byte to send to DAC
0FA4 12040D     918       lcall Send_SPI
0FA7            918       
0FA7            918       ; How many bytes to play?
0FA7 754E00     918       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0FAA 754D36     918       mov w+1, #0x36 ; Load the middle byte of the number of bytes to play
0FAD 754CB0     918       mov w+0, #0xb0 ; Load the low byte of the number of bytes to play
0FB0            918       
0FB0            918       
0FB0 D2A6       918       setb SPEAKER ;Turn on speaker
0FB2 D28E       918       setb TR1 ;Start playback by enabling Timer1
0FB4            918       ;clr sound_flag ; sound ends 
0FB4 021169     919           ljmp state_8_hop1_S
0FB7            920   
0FB7            921       play_2_S:
0FB7 B40234     922           cjne a, #0x02, play_3_S
0FBA            923       ; ***play audio***
0FBA            923       ;cjne sound_flag, #0, $
0FBA            923       
0FBA 12177B     923       lcall Wait_Half_Second
0FBD C28E       923       clr TR1 ; Stop Timer 1 ISR from playing previous request
0FBF D2A5       923       setb FLASH_CE
0FC1            923       ;setb sound_flag ; sound starts
0FC1 C2A6       923       clr SPEAKER ; Turn off speaker
0FC3 C2A5       923       clr FLASH_CE ; Enable SPI Flash
0FC5 7403       923       mov a, #READ_BYTES
0FC7 12040D     923       lcall Send_SPI
0FCA            923       ; Set the initial position in memory where to start playing
0FCA            923       
0FCA 7401       923       mov a, #0x01 ; change initial position
0FCC 12040D     923       lcall Send_SPI
0FCF 74C7       923       mov a, #0xc7 ; next memory position
0FD1 12040D     923       lcall Send_SPI
0FD4 7414       923       mov a, #0x14 ; next memory position
0FD6 12040D     923       lcall Send_SPI
0FD9 7401       923       mov a, #0x01 ; request first byte to send to DAC
0FDB 12040D     923       lcall Send_SPI
0FDE            923       
0FDE            923       ; How many bytes to play?
0FDE 754E00     923       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0FE1 754D13     923       mov w+1, #0x13 ; Load the middle byte of the number of bytes to play
0FE4 754C88     923       mov w+0, #0x88 ; Load the low byte of the number of bytes to play
0FE7            923       
0FE7            923       
0FE7 D2A6       923       setb SPEAKER ;Turn on speaker
0FE9 D28E       923       setb TR1 ;Start playback by enabling Timer1
0FEB            923       ;clr sound_flag ; sound ends
0FEB 021169     924           ljmp state_8_hop1_S
0FEE            925   
0FEE            926       play_3_S:
0FEE B40334     927           cjne a, #0x03, play_4_S
0FF1            928       ; ***play audio***
0FF1            928       ;cjne sound_flag, #0, $
0FF1            928       
0FF1 12177B     928       lcall Wait_Half_Second
0FF4 C28E       928       clr TR1 ; Stop Timer 1 ISR from playing previous request
0FF6 D2A5       928       setb FLASH_CE
0FF8            928       ;setb sound_flag ; sound starts
0FF8 C2A6       928       clr SPEAKER ; Turn off speaker
0FFA C2A5       928       clr FLASH_CE ; Enable SPI Flash
0FFC 7403       928       mov a, #READ_BYTES
0FFE 12040D     928       lcall Send_SPI
1001            928       ; Set the initial position in memory where to start playing
1001            928       
1001 7401       928       mov a, #0x01 ; change initial position
1003 12040D     928       lcall Send_SPI
1006 74D6       928       mov a, #0xd6 ; next memory position
1008 12040D     928       lcall Send_SPI
100B 7468       928       mov a, #0x68 ; next memory position
100D 12040D     928       lcall Send_SPI
1010 7401       928       mov a, #0x01 ; request first byte to send to DAC
1012 12040D     928       lcall Send_SPI
1015            928       
1015            928       ; How many bytes to play?
1015 754E00     928       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1018 754D23     928       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
101B 754C28     928       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
101E            928       
101E            928       
101E D2A6       928       setb SPEAKER ;Turn on speaker
1020 D28E       928       setb TR1 ;Start playback by enabling Timer1
1022            928       ;clr sound_flag ; sound ends
1022 021169     929           ljmp state_8_hop1_S
1025            930   
1025            931       play_4_S:
1025 B40434     932           cjne a, #0x04, play_5_S
1028            933       ; ***play audio***
1028            933       ;cjne sound_flag, #0, $
1028            933       
1028 12177B     933       lcall Wait_Half_Second
102B C28E       933       clr TR1 ; Stop Timer 1 ISR from playing previous request
102D D2A5       933       setb FLASH_CE
102F            933       ;setb sound_flag ; sound starts
102F C2A6       933       clr SPEAKER ; Turn off speaker
1031 C2A5       933       clr FLASH_CE ; Enable SPI Flash
1033 7403       933       mov a, #READ_BYTES
1035 12040D     933       lcall Send_SPI
1038            933       ; Set the initial position in memory where to start playing
1038            933       
1038 7401       933       mov a, #0x01 ; change initial position
103A 12040D     933       lcall Send_SPI
103D 74F4       933       mov a, #0xf4 ; next memory position
103F 12040D     933       lcall Send_SPI
1042 7400       933       mov a, #0x00 ; next memory position
1044 12040D     933       lcall Send_SPI
1047 7401       933       mov a, #0x01 ; request first byte to send to DAC
1049 12040D     933       lcall Send_SPI
104C            933       
104C            933       ; How many bytes to play?
104C 754E00     933       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
104F 754D1B     933       mov w+1, #0x1b ; Load the middle byte of the number of bytes to play
1052 754C58     933       mov w+0, #0x58 ; Load the low byte of the number of bytes to play
1055            933       
1055            933       
1055 D2A6       933       setb SPEAKER ;Turn on speaker
1057 D28E       933       setb TR1 ;Start playback by enabling Timer1
1059            933       ;clr sound_flag ; sound ends
1059 021169     934           ljmp state_8_hop1_S
105C            935   
105C            936       play_5_S:
105C B40534     937           cjne a, #0x05, play_6_S
105F            938       ; ***play audio***
105F            938       ;cjne sound_flag, #0, $
105F            938       
105F 12177B     938       lcall Wait_Half_Second
1062 C28E       938       clr TR1 ; Stop Timer 1 ISR from playing previous request
1064 D2A5       938       setb FLASH_CE
1066            938       ;setb sound_flag ; sound starts
1066 C2A6       938       clr SPEAKER ; Turn off speaker
1068 C2A5       938       clr FLASH_CE ; Enable SPI Flash
106A 7403       938       mov a, #READ_BYTES
106C 12040D     938       lcall Send_SPI
106F            938       ; Set the initial position in memory where to start playing
106F            938       
106F 7402       938       mov a, #0x02 ; change initial position
1071 12040D     938       lcall Send_SPI
1074 7407       938       mov a, #0x07 ; next memory position
1076 12040D     938       lcall Send_SPI
1079 7488       938       mov a, #0x88 ; next memory position
107B 12040D     938       lcall Send_SPI
107E 7402       938       mov a, #0x02 ; request first byte to send to DAC
1080 12040D     938       lcall Send_SPI
1083            938       
1083            938       ; How many bytes to play?
1083 754E00     938       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1086 754D1B     938       mov w+1, #0x1b ; Load the middle byte of the number of bytes to play
1089 754C58     938       mov w+0, #0x58 ; Load the low byte of the number of bytes to play
108C            938       
108C            938       
108C D2A6       938       setb SPEAKER ;Turn on speaker
108E D28E       938       setb TR1 ;Start playback by enabling Timer1
1090            938       ;clr sound_flag ; sound ends
1090 021169     939           ljmp state_8_hop1_S
1093            940   
1093            941       play_6_S:
1093 B40634     942           cjne a, #0x06, play_7_S
1096            943       ; ***play audio***
1096            943       ;cjne sound_flag, #0, $
1096            943       
1096 12177B     943       lcall Wait_Half_Second
1099 C28E       943       clr TR1 ; Stop Timer 1 ISR from playing previous request
109B D2A5       943       setb FLASH_CE
109D            943       ;setb sound_flag ; sound starts
109D C2A6       943       clr SPEAKER ; Turn off speaker
109F C2A5       943       clr FLASH_CE ; Enable SPI Flash
10A1 7403       943       mov a, #READ_BYTES
10A3 12040D     943       lcall Send_SPI
10A6            943       ; Set the initial position in memory where to start playing
10A6            943       
10A6 7402       943       mov a, #0x02 ; change initial position
10A8 12040D     943       lcall Send_SPI
10AB 7426       943       mov a, #0x26 ; next memory position
10AD 12040D     943       lcall Send_SPI
10B0 74C8       943       mov a, #0xc8 ; next memory position
10B2 12040D     943       lcall Send_SPI
10B5 7402       943       mov a, #0x02 ; request first byte to send to DAC
10B7 12040D     943       lcall Send_SPI
10BA            943       
10BA            943       ; How many bytes to play?
10BA 754E00     943       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
10BD 754D1F     943       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
10C0 754C40     943       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
10C3            943       
10C3            943       
10C3 D2A6       943       setb SPEAKER ;Turn on speaker
10C5 D28E       943       setb TR1 ;Start playback by enabling Timer1
10C7            943       ;clr sound_flag ; sound ends
10C7 021169     944           ljmp state_8_hop1_S
10CA            945   
10CA            946       play_7_S:
10CA B40734     947           cjne a, #0x07, play_8_S
10CD            948       ; ***play audio***
10CD            948       ;cjne sound_flag, #0, $
10CD            948       
10CD 12177B     948       lcall Wait_Half_Second
10D0 C28E       948       clr TR1 ; Stop Timer 1 ISR from playing previous request
10D2 D2A5       948       setb FLASH_CE
10D4            948       ;setb sound_flag ; sound starts
10D4 C2A6       948       clr SPEAKER ; Turn off speaker
10D6 C2A5       948       clr FLASH_CE ; Enable SPI Flash
10D8 7403       948       mov a, #READ_BYTES
10DA 12040D     948       lcall Send_SPI
10DD            948       ; Set the initial position in memory where to start playing
10DD            948       
10DD 7402       948       mov a, #0x02 ; change initial position
10DF 12040D     948       lcall Send_SPI
10E2 7436       948       mov a, #0x36 ; next memory position
10E4 12040D     948       lcall Send_SPI
10E7 7468       948       mov a, #0x68 ; next memory position
10E9 12040D     948       lcall Send_SPI
10EC 7402       948       mov a, #0x02 ; request first byte to send to DAC
10EE 12040D     948       lcall Send_SPI
10F1            948       
10F1            948       ; How many bytes to play?
10F1 754E00     948       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
10F4 754D23     948       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
10F7 754C28     948       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
10FA            948       
10FA            948       
10FA D2A6       948       setb SPEAKER ;Turn on speaker
10FC D28E       948       setb TR1 ;Start playback by enabling Timer1
10FE            948       ;clr sound_flag ; sound ends
10FE 021169     949           ljmp state_8_hop1_S
1101            950   
1101            951       play_8_S:
1101 B40834     952           cjne a, #0x08, play_9_S
1104            953       ; ***play audio***
1104            953       ;cjne sound_flag, #0, $
1104            953       
1104 12177B     953       lcall Wait_Half_Second
1107 C28E       953       clr TR1 ; Stop Timer 1 ISR from playing previous request
1109 D2A5       953       setb FLASH_CE
110B            953       ;setb sound_flag ; sound starts
110B C2A6       953       clr SPEAKER ; Turn off speaker
110D C2A5       953       clr FLASH_CE ; Enable SPI Flash
110F 7403       953       mov a, #READ_BYTES
1111 12040D     953       lcall Send_SPI
1114            953       ; Set the initial position in memory where to start playing
1114            953       
1114 7402       953       mov a, #0x02 ; change initial position
1116 12040D     953       lcall Send_SPI
1119 7457       953       mov a, #0x57 ; next memory position
111B 12040D     953       lcall Send_SPI
111E 749C       953       mov a, #0x9c ; next memory position
1120 12040D     953       lcall Send_SPI
1123 7402       953       mov a, #0x02 ; request first byte to send to DAC
1125 12040D     953       lcall Send_SPI
1128            953       
1128            953       ; How many bytes to play?
1128 754E00     953       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
112B 754D1B     953       mov w+1, #0x1b ; Load the middle byte of the number of bytes to play
112E 754C58     953       mov w+0, #0x58 ; Load the low byte of the number of bytes to play
1131            953       
1131            953       
1131 D2A6       953       setb SPEAKER ;Turn on speaker
1133 D28E       953       setb TR1 ;Start playback by enabling Timer1
1135            953       ;clr sound_flag ; sound ends
1135 021169     954           ljmp state_8_hop1_S
1138            955   
1138            956       play_9_S:
1138            957       ; ***play audio***
1138            957       ;cjne sound_flag, #0, $
1138            957       
1138 12177B     957       lcall Wait_Half_Second
113B C28E       957       clr TR1 ; Stop Timer 1 ISR from playing previous request
113D D2A5       957       setb FLASH_CE
113F            957       ;setb sound_flag ; sound starts
113F C2A6       957       clr SPEAKER ; Turn off speaker
1141 C2A5       957       clr FLASH_CE ; Enable SPI Flash
1143 7403       957       mov a, #READ_BYTES
1145 12040D     957       lcall Send_SPI
1148            957       ; Set the initial position in memory where to start playing
1148            957       
1148 7402       957       mov a, #0x02 ; change initial position
114A 12040D     957       lcall Send_SPI
114D 7469       957       mov a, #0x69 ; next memory position
114F 12040D     957       lcall Send_SPI
1152 7430       957       mov a, #0x30 ; next memory position
1154 12040D     957       lcall Send_SPI
1157 7402       957       mov a, #0x02 ; request first byte to send to DAC
1159 12040D     957       lcall Send_SPI
115C            957       
115C            957       ; How many bytes to play?
115C 754E00     957       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
115F 754D1F     957       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
1162 754C40     957       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
1165            957       
1165            957       
1165 D2A6       957       setb SPEAKER ;Turn on speaker
1167 D28E       957       setb TR1 ;Start playback by enabling Timer1
1169            957       ;clr sound_flag ; sound ends
1169            958   
1169            959   state_8_hop1_S:
1169            960   ; go to state_8_sound
1169 021397     961       ljmp state_8_sound_S
116C            962   
116C            963   
116C            964   state_7_sound_S:
116C            965   ; play 10 - 19
116C            966       ;ljmp PLAYBACK_TEMP
116C 75F064     967       mov b, #100
116F E53B       968       mov a, Temp_oven
1171 84         969       div ab
1172 E5F0       970       mov a, b
1174 B40A34     971       cjne a, #0x0a, play_11_S
1177            972       
1177            973       ; ***play audio***
1177            973       ;cjne sound_flag, #0, $
1177            973       
1177 12177B     973       lcall Wait_Half_Second
117A C28E       973       clr TR1 ; Stop Timer 1 ISR from playing previous request
117C D2A5       973       setb FLASH_CE
117E            973       ;setb sound_flag ; sound starts
117E C2A6       973       clr SPEAKER ; Turn off speaker
1180 C2A5       973       clr FLASH_CE ; Enable SPI Flash
1182 7403       973       mov a, #READ_BYTES
1184 12040D     973       lcall Send_SPI
1187            973       ; Set the initial position in memory where to start playing
1187            973       
1187 7402       973       mov a, #0x02 ; change initial position
1189 12040D     973       lcall Send_SPI
118C 7484       973       mov a, #0x84 ; next memory position
118E 12040D     973       lcall Send_SPI
1191 7488       973       mov a, #0x88 ; next memory position
1193 12040D     973       lcall Send_SPI
1196 7402       973       mov a, #0x02 ; request first byte to send to DAC
1198 12040D     973       lcall Send_SPI
119B            973       
119B            973       ; How many bytes to play?
119B 754E00     973       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
119E 754D17     973       mov w+1, #0x17 ; Load the middle byte of the number of bytes to play
11A1 754C70     973       mov w+0, #0x70 ; Load the low byte of the number of bytes to play
11A4            973       
11A4            973       
11A4 D2A6       973       setb SPEAKER ;Turn on speaker
11A6 D28E       973       setb TR1 ;Start playback by enabling Timer1
11A8            973       ;clr sound_flag ; sound ends
11A8 021394     974       ljmp state_8_hop2_S
11AB            975   
11AB            976       play_11_S:
11AB B40B34     977           cjne a, #0x0b, play_12_S
11AE            978       ; ***play audio***
11AE            978       ;cjne sound_flag, #0, $
11AE            978       
11AE 12177B     978       lcall Wait_Half_Second
11B1 C28E       978       clr TR1 ; Stop Timer 1 ISR from playing previous request
11B3 D2A5       978       setb FLASH_CE
11B5            978       ;setb sound_flag ; sound starts
11B5 C2A6       978       clr SPEAKER ; Turn off speaker
11B7 C2A5       978       clr FLASH_CE ; Enable SPI Flash
11B9 7403       978       mov a, #READ_BYTES
11BB 12040D     978       lcall Send_SPI
11BE            978       ; Set the initial position in memory where to start playing
11BE            978       
11BE 7402       978       mov a, #0x02 ; change initial position
11C0 12040D     978       lcall Send_SPI
11C3 749B       978       mov a, #0x9b ; next memory position
11C5 12040D     978       lcall Send_SPI
11C8 74F8       978       mov a, #0xf8 ; next memory position
11CA 12040D     978       lcall Send_SPI
11CD 7402       978       mov a, #0x02 ; request first byte to send to DAC
11CF 12040D     978       lcall Send_SPI
11D2            978       
11D2            978       ; How many bytes to play?
11D2 754E00     978       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
11D5 754D1F     978       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
11D8 754C40     978       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
11DB            978       
11DB            978       
11DB D2A6       978       setb SPEAKER ;Turn on speaker
11DD D28E       978       setb TR1 ;Start playback by enabling Timer1
11DF            978       ;clr sound_flag ; sound ends
11DF 021394     979           ljmp state_8_hop2_S
11E2            980   
11E2            981       play_12_S:
11E2 B40C34     982           cjne a, #0x0c, play_13_S
11E5            983       ; ***play audio***
11E5            983       ;cjne sound_flag, #0, $
11E5            983       
11E5 12177B     983       lcall Wait_Half_Second
11E8 C28E       983       clr TR1 ; Stop Timer 1 ISR from playing previous request
11EA D2A5       983       setb FLASH_CE
11EC            983       ;setb sound_flag ; sound starts
11EC C2A6       983       clr SPEAKER ; Turn off speaker
11EE C2A5       983       clr FLASH_CE ; Enable SPI Flash
11F0 7403       983       mov a, #READ_BYTES
11F2 12040D     983       lcall Send_SPI
11F5            983       ; Set the initial position in memory where to start playing
11F5            983       
11F5 7402       983       mov a, #0x02 ; change initial position
11F7 12040D     983       lcall Send_SPI
11FA 74B7       983       mov a, #0xb7 ; next memory position
11FC 12040D     983       lcall Send_SPI
11FF 7450       983       mov a, #0x50 ; next memory position
1201 12040D     983       lcall Send_SPI
1204 7402       983       mov a, #0x02 ; request first byte to send to DAC
1206 12040D     983       lcall Send_SPI
1209            983       
1209            983       ; How many bytes to play?
1209 754E00     983       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
120C 754D1F     983       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
120F 754C40     983       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
1212            983       
1212            983       
1212 D2A6       983       setb SPEAKER ;Turn on speaker
1214 D28E       983       setb TR1 ;Start playback by enabling Timer1
1216            983       ;clr sound_flag ; sound ends
1216 021394     984           ljmp state_8_hop2_S
1219            985   
1219            986       play_13_S:
1219 B40D34     987           cjne a, #0x0d, play_14_S
121C            988       ; ***play audio***
121C            988       ;cjne sound_flag, #0, $
121C            988       
121C 12177B     988       lcall Wait_Half_Second
121F C28E       988       clr TR1 ; Stop Timer 1 ISR from playing previous request
1221 D2A5       988       setb FLASH_CE
1223            988       ;setb sound_flag ; sound starts
1223 C2A6       988       clr SPEAKER ; Turn off speaker
1225 C2A5       988       clr FLASH_CE ; Enable SPI Flash
1227 7403       988       mov a, #READ_BYTES
1229 12040D     988       lcall Send_SPI
122C            988       ; Set the initial position in memory where to start playing
122C            988       
122C 7402       988       mov a, #0x02 ; change initial position
122E 12040D     988       lcall Send_SPI
1231 74CE       988       mov a, #0xce ; next memory position
1233 12040D     988       lcall Send_SPI
1236 74C0       988       mov a, #0xc0 ; next memory position
1238 12040D     988       lcall Send_SPI
123B 7402       988       mov a, #0x02 ; request first byte to send to DAC
123D 12040D     988       lcall Send_SPI
1240            988       
1240            988       ; How many bytes to play?
1240 754E00     988       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1243 754D2E     988       mov w+1, #0x2e ; Load the middle byte of the number of bytes to play
1246 754CE0     988       mov w+0, #0xe0 ; Load the low byte of the number of bytes to play
1249            988       
1249            988       
1249 D2A6       988       setb SPEAKER ;Turn on speaker
124B D28E       988       setb TR1 ;Start playback by enabling Timer1
124D            988       ;clr sound_flag ; sound ends
124D 021394     989           ljmp state_8_hop2_S
1250            990   
1250            991       play_14_S:
1250 B40E34     992           cjne a, #0x0e, play_15_S
1253            993       ; ***play audio***
1253            993       ;cjne sound_flag, #0, $
1253            993       
1253 12177B     993       lcall Wait_Half_Second
1256 C28E       993       clr TR1 ; Stop Timer 1 ISR from playing previous request
1258 D2A5       993       setb FLASH_CE
125A            993       ;setb sound_flag ; sound starts
125A C2A6       993       clr SPEAKER ; Turn off speaker
125C C2A5       993       clr FLASH_CE ; Enable SPI Flash
125E 7403       993       mov a, #READ_BYTES
1260 12040D     993       lcall Send_SPI
1263            993       ; Set the initial position in memory where to start playing
1263            993       
1263 7402       993       mov a, #0x02 ; change initial position
1265 12040D     993       lcall Send_SPI
1268 74F5       993       mov a, #0xf5 ; next memory position
126A 12040D     993       lcall Send_SPI
126D 74D0       993       mov a, #0xd0 ; next memory position
126F 12040D     993       lcall Send_SPI
1272 7402       993       mov a, #0x02 ; request first byte to send to DAC
1274 12040D     993       lcall Send_SPI
1277            993       
1277            993       ; How many bytes to play?
1277 754E00     993       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
127A 754D36     993       mov w+1, #0x36 ; Load the middle byte of the number of bytes to play
127D 754CB0     993       mov w+0, #0xb0 ; Load the low byte of the number of bytes to play
1280            993       
1280            993       
1280 D2A6       993       setb SPEAKER ;Turn on speaker
1282 D28E       993       setb TR1 ;Start playback by enabling Timer1
1284            993       ;clr sound_flag ; sound ends
1284 021394     994           ljmp state_8_hop2_S
1287            995   
1287            996       play_15_S:
1287 B40F34     997           cjne a, #0x0f, play_16_S
128A            998       ; ***play audio***
128A            998       ;cjne sound_flag, #0, $
128A            998       
128A 12177B     998       lcall Wait_Half_Second
128D C28E       998       clr TR1 ; Stop Timer 1 ISR from playing previous request
128F D2A5       998       setb FLASH_CE
1291            998       ;setb sound_flag ; sound starts
1291 C2A6       998       clr SPEAKER ; Turn off speaker
1293 C2A5       998       clr FLASH_CE ; Enable SPI Flash
1295 7403       998       mov a, #READ_BYTES
1297 12040D     998       lcall Send_SPI
129A            998       ; Set the initial position in memory where to start playing
129A            998       
129A 7403       998       mov a, #0x03 ; change initial position
129C 12040D     998       lcall Send_SPI
129F 7428       998       mov a, #0x28 ; next memory position
12A1 12040D     998       lcall Send_SPI
12A4 7498       998       mov a, #0x98 ; next memory position
12A6 12040D     998       lcall Send_SPI
12A9 7403       998       mov a, #0x03 ; request first byte to send to DAC
12AB 12040D     998       lcall Send_SPI
12AE            998       
12AE            998       ; How many bytes to play?
12AE 754E00     998       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
12B1 754D23     998       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
12B4 754C28     998       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
12B7            998       
12B7            998       
12B7 D2A6       998       setb SPEAKER ;Turn on speaker
12B9 D28E       998       setb TR1 ;Start playback by enabling Timer1
12BB            998       ;clr sound_flag ; sound ends
12BB 021394     999           ljmp state_8_hop2_S
12BE           1000   
12BE           1001       play_16_S:
12BE B41034    1002           cjne a, #0x10, play_17_S
12C1           1003       ; ***play audio***
12C1           1003       ;cjne sound_flag, #0, $
12C1           1003       
12C1 12177B    1003       lcall Wait_Half_Second
12C4 C28E      1003       clr TR1 ; Stop Timer 1 ISR from playing previous request
12C6 D2A5      1003       setb FLASH_CE
12C8           1003       ;setb sound_flag ; sound starts
12C8 C2A6      1003       clr SPEAKER ; Turn off speaker
12CA C2A5      1003       clr FLASH_CE ; Enable SPI Flash
12CC 7403      1003       mov a, #READ_BYTES
12CE 12040D    1003       lcall Send_SPI
12D1           1003       ; Set the initial position in memory where to start playing
12D1           1003       
12D1 7403      1003       mov a, #0x03 ; change initial position
12D3 12040D    1003       lcall Send_SPI
12D6 7447      1003       mov a, #0x47 ; next memory position
12D8 12040D    1003       lcall Send_SPI
12DB 74D8      1003       mov a, #0xd8 ; next memory position
12DD 12040D    1003       lcall Send_SPI
12E0 7403      1003       mov a, #0x03 ; request first byte to send to DAC
12E2 12040D    1003       lcall Send_SPI
12E5           1003       
12E5           1003       ; How many bytes to play?
12E5 754E00    1003       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
12E8 754D32    1003       mov w+1, #0x32 ; Load the middle byte of the number of bytes to play
12EB 754CC8    1003       mov w+0, #0xc8 ; Load the low byte of the number of bytes to play
12EE           1003       
12EE           1003       
12EE D2A6      1003       setb SPEAKER ;Turn on speaker
12F0 D28E      1003       setb TR1 ;Start playback by enabling Timer1
12F2           1003       ;clr sound_flag ; sound ends
12F2 021394    1004           ljmp state_8_hop2_S
12F5           1005   
12F5           1006       play_17_S:
12F5 B41134    1007           cjne a, #0x11, play_18_S
12F8           1008       ; ***play audio***
12F8           1008       ;cjne sound_flag, #0, $
12F8           1008       
12F8 12177B    1008       lcall Wait_Half_Second
12FB C28E      1008       clr TR1 ; Stop Timer 1 ISR from playing previous request
12FD D2A5      1008       setb FLASH_CE
12FF           1008       ;setb sound_flag ; sound starts
12FF C2A6      1008       clr SPEAKER ; Turn off speaker
1301 C2A5      1008       clr FLASH_CE ; Enable SPI Flash
1303 7403      1008       mov a, #READ_BYTES
1305 12040D    1008       lcall Send_SPI
1308           1008       ; Set the initial position in memory where to start playing
1308           1008       
1308 7403      1008       mov a, #0x03 ; change initial position
130A 12040D    1008       lcall Send_SPI
130D 7476      1008       mov a, #0x76 ; next memory position
130F 12040D    1008       lcall Send_SPI
1312 74B8      1008       mov a, #0xb8 ; next memory position
1314 12040D    1008       lcall Send_SPI
1317 7403      1008       mov a, #0x03 ; request first byte to send to DAC
1319 12040D    1008       lcall Send_SPI
131C           1008       
131C           1008       ; How many bytes to play?
131C 754E00    1008       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
131F 754D2E    1008       mov w+1, #0x2e ; Load the middle byte of the number of bytes to play
1322 754C20    1008       mov w+0, #0x20 ; Load the low byte of the number of bytes to play
1325           1008       
1325           1008       
1325 D2A6      1008       setb SPEAKER ;Turn on speaker
1327 D28E      1008       setb TR1 ;Start playback by enabling Timer1
1329           1008       ;clr sound_flag ; sound ends
1329 021394    1009           ljmp state_8_hop2_S
132C           1010   
132C           1011       play_18_S:
132C B41234    1012           cjne a, #0x12, play_19_S
132F           1013       ; ***play audio***
132F           1013       ;cjne sound_flag, #0, $
132F           1013       
132F 12177B    1013       lcall Wait_Half_Second
1332 C28E      1013       clr TR1 ; Stop Timer 1 ISR from playing previous request
1334 D2A5      1013       setb FLASH_CE
1336           1013       ;setb sound_flag ; sound starts
1336 C2A6      1013       clr SPEAKER ; Turn off speaker
1338 C2A5      1013       clr FLASH_CE ; Enable SPI Flash
133A 7403      1013       mov a, #READ_BYTES
133C 12040D    1013       lcall Send_SPI
133F           1013       ; Set the initial position in memory where to start playing
133F           1013       
133F 7403      1013       mov a, #0x03 ; change initial position
1341 12040D    1013       lcall Send_SPI
1344 74A1      1013       mov a, #0xa1 ; next memory position
1346 12040D    1013       lcall Send_SPI
1349 74B0      1013       mov a, #0xb0 ; next memory position
134B 12040D    1013       lcall Send_SPI
134E 7403      1013       mov a, #0x03 ; request first byte to send to DAC
1350 12040D    1013       lcall Send_SPI
1353           1013       
1353           1013       ; How many bytes to play?
1353 754E00    1013       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1356 754D27    1013       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
1359 754C10    1013       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
135C           1013       
135C           1013       
135C D2A6      1013       setb SPEAKER ;Turn on speaker
135E D28E      1013       setb TR1 ;Start playback by enabling Timer1
1360           1013       ;clr sound_flag ; sound ends
1360 021394    1014           ljmp state_8_hop2_S
1363           1015   
1363           1016       play_19_S:
1363           1017       ; ***play audio***
1363           1017       ;cjne sound_flag, #0, $
1363           1017       
1363 12177B    1017       lcall Wait_Half_Second
1366 C28E      1017       clr TR1 ; Stop Timer 1 ISR from playing previous request
1368 D2A5      1017       setb FLASH_CE
136A           1017       ;setb sound_flag ; sound starts
136A C2A6      1017       clr SPEAKER ; Turn off speaker
136C C2A5      1017       clr FLASH_CE ; Enable SPI Flash
136E 7403      1017       mov a, #READ_BYTES
1370 12040D    1017       lcall Send_SPI
1373           1017       ; Set the initial position in memory where to start playing
1373           1017       
1373 7403      1017       mov a, #0x03 ; change initial position
1375 12040D    1017       lcall Send_SPI
1378 74C8      1017       mov a, #0xc8 ; next memory position
137A 12040D    1017       lcall Send_SPI
137D 74C0      1017       mov a, #0xc0 ; next memory position
137F 12040D    1017       lcall Send_SPI
1382 7403      1017       mov a, #0x03 ; request first byte to send to DAC
1384 12040D    1017       lcall Send_SPI
1387           1017       
1387           1017       ; How many bytes to play?
1387 754E00    1017       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
138A 754D27    1017       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
138D 754C10    1017       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
1390           1017       
1390           1017       
1390 D2A6      1017       setb SPEAKER ;Turn on speaker
1392 D28E      1017       setb TR1 ;Start playback by enabling Timer1
1394           1017       ;clr sound_flag ; sound ends
1394           1018   
1394           1019       state_8_hop2_S:
1394           1020       ; go to state_8_sound
1394 021397    1021           ljmp state_8_sound_S
1397           1022   
1397           1023   state_8_sound_S:
1397           1024   ; go to state_0_sound
1397 020C71    1025       ljmp Sound_ret_S
139A           1026   
139A           1027   
139A           1028   
139A           1029   
139A           1030   INI_PLAYBACK_TEMP:
139A           1031       ; ****INITIALIZATION****
139A           1032       ; Configure SPI pins and turn off speaker
139A           1033            ;anl P2M0, #0b_1100_1110
139A 43CE90    1034       orl P2M0, #0b_1001_0000
139D           1035       ;orl P2M0, #0b_0011_0001
139D           1036            ;orl P2M1, #0b_0011_0001
139D 43CF90    1037       orl P2M1, #0b_1001_0000
13A0 D2A1      1038            setb MY_MISO_SOUND  ; Configured as input
13A2 D2A5      1039            setb FLASH_CE ; CS=1 for SPI flash memory
13A4 C2A0      1040            clr MY_SCLK_SOUND   ; Rest state of SCLK=0
13A6 C2A6      1041            clr SPEAKER   ; Turn off speaker.
13A8           1042            
13A8           1043            ; Configure timer 1
13A8 53890F    1044            anl     TMOD, #0x0F ; Clear the bits of timer 1 in TMOD
13AB 438910    1045            orl     TMOD, #0x10 ; Set timer 1 in 16-bit timer mode.  Don't change the bits of timer 0
13AE 758DFC    1046            mov TH1, #high(TIMER1_RELOAD)
13B1 758B8C    1047            mov TL1, #low(TIMER1_RELOAD)
13B4           1048            ; Set autoreload value
13B4 75F5FC    1049            mov RH1, #high(TIMER1_RELOAD)
13B7 75F38C    1050            mov RL1, #low(TIMER1_RELOAD)
13BA           1051   
13BA           1052            ;Enable the timer and interrupts
13BA D2AB      1053       setb ET1  ; Enable timer 1 interrupt
13BC D28E      1054            setb TR1 ; Timer 1 is only enabled to play stored sound
13BE           1055   
13BE           1056            ; Configure the DAC.  The DAC output we are using is P2.3, but P2.2 is also reserved.
13BE 75A5A0    1057            mov DADI, #0b_1010_0000 ; ACON=1
13C1 75A43A    1058            mov DADC, #0b_0011_1010 ; Enabled, DAC mode, Left adjusted, CLK/4
13C4 75AD80    1059            mov DADH, #0x80 ; Middle of scale
13C7 75AC00    1060            mov DADL, #0
13CA 43A440    1061            orl DADC, #0b_0100_0000 ; Start DAC by GO/BSY=1
13CD           1062       check_DAC_init:
13CD E5A4      1063            mov a, DADC
13CF 20E6FB    1064            jb acc.6, check_DAC_init ; Wait for DAC to finish
13D2           1065            
13D2 22        1066   ret
13D3           1067   
13D3           1068       
13D3           1069   ;-------------------------------------------------------------------------------------------------------------------------------
13D3           1070   ;***LCD FXNS
13D3           1071   
               1072   Display_lower_BCD mac
               1073       push ar0
               1074       mov r0, %0
               1075       lcall ?Display_lower_BCD
               1076       pop ar0
               1077   endmac
13D3           1078   
13D3           1079   ?Display_lower_BCD:
13D3 C0E0      1080       push acc
13D5           1081       ; write least significant digit
13D5 E8        1082       mov a, r0
13D6 540F      1083       anl a, #0fh
13D8 4430      1084       orl a, #30h
13DA 12007E    1085       lcall ?WriteData
13DD D0E0      1086       pop acc
13DF 22        1087   ret
13E0           1088   
13E0           1089   
13E0           1090   SendToLCD:
13E0 75F064    1091       mov b, #100
13E3 84        1092       div ab
13E4 4430      1093       orl a, #0x30h ; Convert hundreds to ASCII
13E6 12007E    1094       lcall ?WriteData ; Send to LCD
13E9 E5F0      1095       mov a, b    ; Remainder is in register b
13EB 75F00A    1096       mov b, #10
13EE 84        1097       div ab
13EF 4430      1098       orl a, #0x30h ; Convert tens to ASCII
13F1 12007E    1099       lcall ?WriteData; Send to LCD
13F4 E5F0      1100       mov a, b
13F6 4430      1101       orl a, #0x30h ; Convert units to ASCII
13F8 12007E    1102       lcall ?WriteData; Send to LCD
13FB 22        1103   ret
13FC           1104   
13FC           1105   Initialize_State_Display:
13FC           1106   
13FC           1107       ;***clear the screen and set new display***
13FC 7401      1108            mov a, #0x01
13FE 120083    1108            lcall ?WriteCommand
1401 C002      1109            push AR2
1403 7A02      1109            mov R2, #2
1405 120039    1109            lcall ?Wait_Milli_Seconds
1408 D002      1109            pop AR2
140A           1110       
140A C0E0      1111            push acc
140C 7401      1111            mov a, #1
140E 14        1111            dec a
140F 1200BF    1111            lcall ?Set_Cursor_1 ; Select column and row
1412 D0E0      1111            pop acc
1414 C083      1112            push dph
1416 C082      1112            push dpl
1418 C0E0      1112            push acc
141A 90037D    1112            mov dptr, #time
141D 1200B2    1112            lcall ?Send_Constant_String
1420 D0E0      1112            pop acc
1422 D082      1112            pop dpl
1424 D083      1112            pop dph
1426           1113            
1426 C0E0      1114            push acc
1428 7406      1114            mov a, #6
142A 14        1114            dec a
142B 1200BF    1114            lcall ?Set_Cursor_1 ; Select column and row
142E D0E0      1114            pop acc
1430 C083      1115            push dph
1432 C082      1115            push dpl
1434 C0E0      1115            push acc
1436 900382    1115            mov dptr, #colon
1439 1200B2    1115            lcall ?Send_Constant_String
143C D0E0      1115            pop acc
143E D082      1115            pop dpl
1440 D083      1115            pop dph
1442           1116      
1442 C0E0      1117            push acc
1444 740A      1117            mov a, #10
1446 14        1117            dec a
1447 1200BF    1117            lcall ?Set_Cursor_1 ; Select column and row
144A D0E0      1117            pop acc
144C C083      1118            push dph
144E C082      1118            push dpl
1450 C0E0      1118            push acc
1452 900384    1118            mov dptr, #temp
1455 1200B2    1118            lcall ?Send_Constant_String
1458 D0E0      1118            pop acc
145A D082      1118            pop dpl
145C D083      1118            pop dph
145E           1119       
145E C0E0      1120            push acc
1460 7401      1120            mov a, #1
1462 14        1120            dec a
1463 1200BD    1120            lcall ?Set_Cursor_2 ; Select column and row
1466 D0E0      1120            pop acc
1468 C083      1121            push dph
146A C082      1121            push dpl
146C C0E0      1121            push acc
146E 900376    1121            mov dptr, #state
1471 1200B2    1121            lcall ?Send_Constant_String
1474 D0E0      1121            pop acc
1476 D082      1121            pop dpl
1478 D083      1121            pop dph
147A 22        1122   ret
147B           1123   
147B           1124   Update_Display:
147B C0E0      1125            push acc
147D 7405      1125            mov a, #5
147F 14        1125            dec a
1480 1200BF    1125            lcall ?Set_Cursor_1 ; Select column and row
1483 D0E0      1125            pop acc
1485 C000      1126       push ar0
1487 A839      1126       mov r0, Run_time_minutes
1489 1213D3    1126       lcall ?Display_lower_BCD
148C D000      1126       pop ar0
148E C0E0      1127            push acc
1490 7407      1127            mov a, #7
1492 14        1127            dec a
1493 1200BF    1127            lcall ?Set_Cursor_1 ; Select column and row
1496 D0E0      1127            pop acc
1498 C000      1128            push ar0
149A A838      1128            mov r0, Run_time_seconds
149C 1200C4    1128            lcall ?Display_BCD
149F D000      1128            pop ar0
14A1           1129       ;Set_Cursor(1,14)
14A1           1130       ;mov a, Temp_oven
14A1           1131       ;SendToLCD(Temp_oven)
14A1 22        1132   ret
14A2           1133   
14A2           1134   State0_display:
14A2 C0E0      1135            push acc
14A4 7401      1135            mov a, #1
14A6 14        1135            dec a
14A7 1200BF    1135            lcall ?Set_Cursor_1 ; Select column and row
14AA D0E0      1135            pop acc
14AC C083      1136            push dph
14AE C082      1136            push dpl
14B0 C0E0      1136            push acc
14B2 900360    1136            mov dptr, #STemp
14B5 1200B2    1136            lcall ?Send_Constant_String
14B8 D0E0      1136            pop acc
14BA D082      1136            pop dpl
14BC D083      1136            pop dph
14BE C0E0      1137            push acc
14C0 7406      1137            mov a, #6
14C2 14        1137            dec a
14C3 1200BF    1137            lcall ?Set_Cursor_1 ; Select column and row
14C6 D0E0      1137            pop acc
14C8 E534      1138       mov a, Temp_soak
14CA 1213E0    1139       lcall SendToLCD
14CD           1140       
14CD C0E0      1141            push acc
14CF 740A      1141            mov a, #10
14D1 14        1141            dec a
14D2 1200BF    1141            lcall ?Set_Cursor_1 ; Select column and row
14D5 D0E0      1141            pop acc
14D7 C083      1142            push dph
14D9 C082      1142            push dpl
14DB C0E0      1142            push acc
14DD 900366    1142            mov dptr, #STime
14E0 1200B2    1142            lcall ?Send_Constant_String
14E3 D0E0      1142            pop acc
14E5 D082      1142            pop dpl
14E7 D083      1142            pop dph
14E9 C0E0      1143            push acc
14EB 740E      1143            mov a, #14
14ED 14        1143            dec a
14EE 1200BF    1143            lcall ?Set_Cursor_1 ; Select column and row
14F1 D0E0      1143            pop acc
14F3 E535      1144       mov a, Time_soak
14F5 1213E0    1145            lcall SendToLCD
14F8           1146       ;Display_BCD(Time_soak)
14F8           1147   
14F8           1148       ;Displays Reflow Temp and Time
14F8 C0E0      1149            push acc
14FA 7401      1149            mov a, #1
14FC 14        1149            dec a
14FD 1200BD    1149            lcall ?Set_Cursor_2 ; Select column and row
1500 D0E0      1149            pop acc
1502 C083      1150            push dph
1504 C082      1150            push dpl
1506 C0E0      1150            push acc
1508 90036B    1150            mov dptr, #RTemp
150B 1200B2    1150            lcall ?Send_Constant_String
150E D0E0      1150            pop acc
1510 D082      1150            pop dpl
1512 D083      1150            pop dph
1514 C0E0      1151            push acc
1516 7406      1151            mov a, #6
1518 14        1151            dec a
1519 1200BD    1151            lcall ?Set_Cursor_2 ; Select column and row
151C D0E0      1151            pop acc
151E E536      1152       mov a, Temp_refl
1520 1213E0    1153       lcall SendToLCD
1523           1154       
1523 C0E0      1155            push acc
1525 740A      1155            mov a, #10
1527 14        1155            dec a
1528 1200BD    1155            lcall ?Set_Cursor_2 ; Select column and row
152B D0E0      1155            pop acc
152D C083      1156            push dph
152F C082      1156            push dpl
1531 C0E0      1156            push acc
1533 900371    1156            mov dptr, #RTime
1536 1200B2    1156            lcall ?Send_Constant_String
1539 D0E0      1156            pop acc
153B D082      1156            pop dpl
153D D083      1156            pop dph
153F C0E0      1157            push acc
1541 740E      1157            mov a, #14
1543 14        1157            dec a
1544 1200BD    1157            lcall ?Set_Cursor_2 ; Select column and row
1547 D0E0      1157            pop acc
1549 E537      1158       mov a, Time_refl
154B 1213E0    1159            lcall SendToLCD
154E 22        1160   ret
154F           1161   
154F           1162   Display_3_digit_BCD:
154F C0E0      1163            push acc
1551 740E      1163            mov a, #14
1553 14        1163            dec a
1554 1200BF    1163            lcall ?Set_Cursor_1 ; Select column and row
1557 D0E0      1163            pop acc
1559 C000      1164       push ar0
155B A846      1164       mov r0, bcd+1
155D 1213D3    1164       lcall ?Display_lower_BCD
1560 D000      1164       pop ar0
1562 C000      1165            push ar0
1564 A845      1165            mov r0, bcd+0
1566 1200C4    1165            lcall ?Display_BCD
1569 D000      1165            pop ar0
156B 22        1166   ret
156C           1167   
156C           1168   Animation:
156C 740F      1169            mov a, #0x0f
156E 120083    1169            lcall ?WriteCommand ;display cursor
1571           1170   
1571           1171       ;name ; Move cursor to line 1 column 1
1571 7480      1172            mov a, #0x80
1573 120083    1172            lcall ?WriteCommand
1576 7457      1173            mov a, #'W'
1578 12007E    1173            lcall ?WriteData
157B C002      1174            push AR2
157D 7AFA      1174            mov R2, #250
157F 120039    1174            lcall ?Wait_Milli_Seconds
1582 D002      1174            pop AR2
1584 7465      1175            mov a, #'e'
1586 12007E    1175            lcall ?WriteData
1589 C002      1176            push AR2
158B 7AFA      1176            mov R2, #250
158D 120039    1176            lcall ?Wait_Milli_Seconds
1590 D002      1176            pop AR2
1592 746C      1177            mov a, #'l'
1594 12007E    1177            lcall ?WriteData
1597 C002      1178            push AR2
1599 7AFA      1178            mov R2, #250
159B 120039    1178            lcall ?Wait_Milli_Seconds
159E D002      1178            pop AR2
15A0 7463      1179            mov a, #'c'
15A2 12007E    1179            lcall ?WriteData
15A5 C002      1180            push AR2
15A7 7AFA      1180            mov R2, #250
15A9 120039    1180            lcall ?Wait_Milli_Seconds
15AC D002      1180            pop AR2
15AE 746F      1181            mov a, #'o'
15B0 12007E    1181            lcall ?WriteData
15B3 C002      1182            push AR2
15B5 7AFA      1182            mov R2, #250
15B7 120039    1182            lcall ?Wait_Milli_Seconds
15BA D002      1182            pop AR2
15BC 746D      1183            mov a, #'m'
15BE 12007E    1183            lcall ?WriteData
15C1 C002      1184            push AR2
15C3 7AFA      1184            mov R2, #250
15C5 120039    1184            lcall ?Wait_Milli_Seconds
15C8 D002      1184            pop AR2
15CA 7465      1185            mov a, #'e'
15CC 12007E    1185            lcall ?WriteData
15CF C002      1186            push AR2
15D1 7AFA      1186            mov R2, #250
15D3 120039    1186            lcall ?Wait_Milli_Seconds
15D6 D002      1186            pop AR2
15D8 7421      1187            mov a, #'!'
15DA 12007E    1187            lcall ?WriteData
15DD C002      1188            push AR2
15DF 7AFA      1188            mov R2, #250
15E1 120039    1188            lcall ?Wait_Milli_Seconds
15E4 D002      1188            pop AR2
15E6 7420      1189            mov a, #' '
15E8 12007E    1189            lcall ?WriteData
15EB C002      1190            push AR2
15ED 7AFA      1190            mov R2, #250
15EF 120039    1190            lcall ?Wait_Milli_Seconds
15F2 D002      1190            pop AR2
15F4 7460      1191            mov a, #96
15F6 12007E    1191            lcall ?WriteData
15F9 C002      1192            push AR2
15FB 7AFA      1192            mov R2, #250
15FD 120039    1192            lcall ?Wait_Milli_Seconds
1600 D002      1192            pop AR2
1602 74EF      1193            mov a, #239
1604 12007E    1193            lcall ?WriteData
1607 C002      1194            push AR2
1609 7AFA      1194            mov R2, #250
160B 120039    1194            lcall ?Wait_Milli_Seconds
160E D002      1194            pop AR2
1610 742F      1195            mov a, #47
1612 12007E    1195            lcall ?WriteData
1615 121756    1196       lcall Wait_One_Second
1618 121756    1197       lcall Wait_One_Second
161B 740C      1198            mov a, #0x0c
161D 120083    1198            lcall ?WriteCommand ;clear cursor
1620 22        1199   ret
1621           1200   
1621           1201   ;The following functions store and restore the values--------------------------------------------------------------------------
               1202   loadbyte mac
               1203       mov a, %0
               1204       movx @dptr, a
               1205       inc dptr
               1206   endmac
1621           1207   
1621           1208   Save_Configuration:
1621 C0A8      1209       push IE ; Save the current state of bit EA in the stack
1623 C2AF      1210       clr EA ; Disable interrupts
1625 75D108    1211       mov FCON, #0x08 ; Page Buffer Mapping Enabled (FPS = 1)
1628 907F80    1212       mov dptr, #0x7f80 ; Last page of flash memory
162B           1213       ; Save variables
162B E534      1214       mov a, temp_soak
162D F0        1214       movx @dptr, a
162E A3        1214       inc dptr ; @0x7f80
162F E535      1215       mov a, time_soak
1631 F0        1215       movx @dptr, a
1632 A3        1215       inc dptr ; @0x7f81
1633 E536      1216       mov a, temp_refl
1635 F0        1216       movx @dptr, a
1636 A3        1216       inc dptr ; @0x7f82
1637 E537      1217       mov a, time_refl
1639 F0        1217       movx @dptr, a
163A A3        1217       inc dptr ; @0x7f83
163B 7455      1218       mov a, #0x55
163D F0        1218       movx @dptr, a
163E A3        1218       inc dptr ; First key value @0x7f84
163F 74AA      1219       mov a, #0xAA
1641 F0        1219       movx @dptr, a
1642 A3        1219       inc dptr ; Second key value @0x7f85
1643 75D100    1220       mov FCON, #0x00 ; Page Buffer Mapping Disabled (FPS = 0) 
1646 43D240    1221       orl EECON, #0b01000000 ; Enable auto-erase on next write sequence  
1649 75D150    1222       mov FCON, #0x50 ; Write trigger first byte
164C 75D1A0    1223       mov FCON, #0xA0 ; Write trigger second byte
164F           1224       ; CPU idles until writing of flash completes.
164F 75D100    1225       mov FCON, #0x00 ; Page Buffer Mapping Disabled (FPS = 0)
1652 53D2BF    1226       anl EECON, #0b10111111 ; Disable auto-erase
1655 D0A8      1227       pop IE ; Restore the state of bit EA from the stack
1657 22        1228   ret
1658           1229   
               1230   getbyte mac
               1231       clr a
               1232       movc a, @a+dptr
               1233       mov %0, a
               1234       inc dptr
               1235   endmac
1658           1236   
1658           1237   Load_Configuration:
1658 907F84    1238       mov dptr, #0x7f84 ; First key value location.
165B E4        1239       clr a
165C 93        1239       movc a, @a+dptr
165D F8        1239       mov R0, a
165E A3        1239       inc dptr ; 0x7f84 should contain 0x55
165F B8551F    1240       cjne R0, #0x55, Load_Defaults
1662 E4        1241       clr a
1663 93        1241       movc a, @a+dptr
1664 F8        1241       mov R0, a
1665 A3        1241       inc dptr ; 0x7f85 should contain 0xAA
1666 B8AA18    1242       cjne R0, #0xAA, Load_Defaults
1669           1243   ; Keys are good.  Get stored values.
1669 907F80    1244       mov dptr, #0x7f80
166C E4        1245       clr a
166D 93        1245       movc a, @a+dptr
166E F534      1245       mov Temp_soak, a
1670 A3        1245       inc dptr ; 0x7f80
1671 E4        1246       clr a
1672 93        1246       movc a, @a+dptr
1673 F535      1246       mov Time_soak, a
1675 A3        1246       inc dptr ; 0x7f81
1676 E4        1247       clr a
1677 93        1247       movc a, @a+dptr
1678 F536      1247       mov Temp_refl, a
167A A3        1247       inc dptr ; 0x7f82
167B E4        1248       clr a
167C 93        1248       movc a, @a+dptr
167D F537      1248       mov Time_refl, a
167F A3        1248       inc dptr ; 0x7f83
1680 22        1249   ret
1681           1250   
1681           1251   Load_Defaults:
1681 753482    1252       mov Temp_soak, #130 ; Soak Tmp Range is 130-170
1684 75353C    1253       mov Time_soak, #0x3C ; Range 60-90 seconds
1687 7536DC    1254       mov Temp_refl, #220 ; Range 220-240
168A 75371E    1255       mov Time_refl, #0x1E ; Range 30-45 seconds
168D 22        1256       ret 
168E           1257   ;-------------------------------------------------------------------------------------------------------------------------------
168E           1258   ;off state
168E           1259   
168E           1260   OFF_STATE:
168E           1261       ;**CLEAR SCREEN**
168E 7401      1262            mov a, #0x01
1690 120083    1262            lcall ?WriteCommand
1693           1263       ;OFF_STATE1:
1693           1264       
1693 20C5FD    1265       jb POWER_BUTTON, $ ; loop while the button is not pressed
1696 C002      1266            push AR2
1698 7A32      1266            mov R2, #50
169A 120039    1266            lcall ?Wait_Milli_Seconds
169D D002      1266            pop AR2 ; debounce time
169F 20C5EC    1267            jb POWER_BUTTON, OFF_STATE ; it was a bounce, try again
16A2 30C5FD    1268            jnb POWER_BUTTON, $ ; loop while the button is pressed
16A5 02183F    1269       ljmp main
16A8 22        1270   ret
16A9           1271   ;-------------------------------------------------------------------------------------------------------------------------------
16A9           1272   
16A9           1273   ;***CHECK TEMPERATURE BY READING VOLTAGE AND CONVERTING
16A9           1274   Check_Temp:
16A9           1275       
16A9           1276       ;jnb one_seconds_flag, Check_Temp_done
16A9           1277       ;clr one_seconds_flag
16A9           1278       
16A9 C297      1279       clr CE_ADC
16AB 7801      1280            mov R0, #00000001B ; Start bit:1
16AD 1203F4    1281            lcall DO_SPI_G
16B0 7880      1282            mov R0, #10000000B ; Single ended, read channel 0
16B2 1203F4    1283            lcall DO_SPI_G
16B5 E9        1284            mov a, R1          ; R1 contains bits 8 and 9
16B6 5403      1285            anl a, #00000011B  ; We need only the two least significant bits
16B8 F54B      1286            mov Result+1, a    ; Save result high.
16BA 7855      1287            mov R0, #55H ; It doesn't matter what we transmit...
16BC 1203F4    1288            lcall DO_SPI_G
16BF 894A      1289            mov Result+0, R1     ; R1 contains bits 0 to 7.  Save result low.
16C1 D297      1290            setb CE_ADC
16C3           1291   
16C3 C002      1292            push AR2
16C5 7A0A      1292            mov R2, #10
16C7 120039    1292            lcall ?Wait_Milli_Seconds
16CA D002      1292            pop AR2
16CC           1293       ; Copy the 10-bits of the ADC conversion into the 32-bits of 'x'
16CC AE4A      1294            mov R6, Result+0
16CE AF4B      1295            mov R7, Result+1
16D0 22        1296   ret
16D1           1297   
16D1           1298       
16D1           1299       
16D1           1300   ;***CALCULATES THE TEMPERATURE
16D1           1301   Average_Temp:
16D1 753D00    1302            mov x+0, #low (0 % 0x10000) 
16D4 753E00    1302            mov x+1, #high(0 % 0x10000) 
16D7 753F00    1302            mov x+2, #low (0 / 0x10000) 
16DA 754000    1302            mov x+3, #high(0 / 0x10000) 
16DD 7D64      1303       mov R5, #100
16DF           1304   Ave_loop:
16DF 1216A9    1305       lcall Check_Temp
16E2 754400    1306       mov y+3, #0
16E5 754300    1307       mov y+2, #0
16E8 8F42      1308       mov y+1, R7
16EA 8E41      1309       mov y+0, R6
16EC 1201B5    1310       lcall add32
16EF 12178E    1311       lcall Wait10us
16F2 DDEB      1312       djnz R5, Ave_loop
16F4 754164    1313            mov y+0, #low (100 % 0x10000) 
16F7 754200    1313            mov y+1, #high(100 % 0x10000) 
16FA 754300    1313            mov y+2, #low (100 / 0x10000) 
16FD 754400    1313            mov y+3, #high(100 / 0x10000) 
1700 1202F7    1314       lcall div32
1703           1315   
1703           1316       ;**INSERT MATH FUNCTIONS
1703           1317   
1703 75414E    1318            mov y+0, #low (2894 % 0x10000) 
1706 75420B    1318            mov y+1, #high(2894 % 0x10000) 
1709 754300    1318            mov y+2, #low (2894 / 0x10000) 
170C 754400    1318            mov y+3, #high(2894 / 0x10000)  ;6078; 2026
170F 12026A    1319            lcall mul32
1712 754110    1320            mov y+0, #low (10000 % 0x10000) 
1715 754227    1320            mov y+1, #high(10000 % 0x10000) 
1718 754300    1320            mov y+2, #low (10000 / 0x10000) 
171B 754400    1320            mov y+3, #high(10000 / 0x10000)  ;14000; 7000
171E 1202F7    1321            lcall div32
1721 754116    1322            mov y+0, #low (22 % 0x10000) 
1724 754200    1322            mov y+1, #high(22 % 0x10000) 
1727 754300    1322            mov y+2, #low (22 / 0x10000) 
172A 754400    1322            mov y+3, #high(22 / 0x10000) 
172D 1201B5    1323       lcall add32
1730 853D3B    1324       mov Temp_oven, x+0
1733           1325       ;add KTemp_oven, Temp_oven, #273
1733           1326   
1733           1327   Display_Temp_BCD_Or_Kelvin:
1733 1200F0    1328            lcall hex2bcd ; converts binary in x to BCD in BCD
1736           1329       ;mov a, K_or_C
1736           1330       ;cjne a, #1, Display_3_digit_BCD
1736           1331       ;mov a, KTemp_oven
1736           1332       ;SendToLCD
1736           1333       ;sjmp Send_Temp_Port
1736           1334   
1736           1335   Display_Temp_BCD:    
1736 12154F    1336       lcall Display_3_digit_BCD
1739           1337   
1739           1338   Send_Temp_Port:
1739           1339       ;Send_BCD(bcd+4)
1739           1340       ;Send_BCD(bcd+3)
1739           1341       ;Send_BCD(bcd+2)
1739 C000      1342       push ar0
173B A846      1342       mov r0, bcd+1
173D 1200DA    1342       lcall ?Send_BCD
1740 D000      1342       pop ar0
1742           1342   
1742 C000      1343       push ar0
1744 A845      1343       mov r0, bcd+0
1746 1200DA    1343       lcall ?Send_BCD
1749 D000      1343       pop ar0
174B           1343   
174B 740D      1344            mov a, #'\r'
174D 12047E    1345            lcall putchar
1750 740A      1346            mov a, #'\n'
1752 12047E    1347            lcall putchar
1755           1348   Check_Temp_done:
1755 22        1349   ret    
1756           1350   
1756           1351   ;-------------------------------------------------------------------------------------------------------------------------------
1756           1352   
1756           1353   ;Time wait
1756           1354   
1756           1355   Wait_One_Second:
1756 C002      1356            push AR2
1758 7AFA      1356            mov R2, #250
175A 120039    1356            lcall ?Wait_Milli_Seconds
175D D002      1356            pop AR2
175F C002      1357            push AR2
1761 7AFA      1357            mov R2, #250
1763 120039    1357            lcall ?Wait_Milli_Seconds
1766 D002      1357            pop AR2
1768 C002      1358            push AR2
176A 7AFA      1358            mov R2, #250
176C 120039    1358            lcall ?Wait_Milli_Seconds
176F D002      1358            pop AR2
1771 C002      1359            push AR2
1773 7AFA      1359            mov R2, #250
1775 120039    1359            lcall ?Wait_Milli_Seconds
1778 D002      1359            pop AR2
177A 22        1360   ret
177B           1361   
177B           1362   Wait_Half_Second:
177B C002      1363            push AR2
177D 7AFA      1363            mov R2, #250
177F 120039    1363            lcall ?Wait_Milli_Seconds
1782 D002      1363            pop AR2
1784 C002      1364            push AR2
1786 7AFA      1364            mov R2, #250
1788 120039    1364            lcall ?Wait_Milli_Seconds
178B D002      1364            pop AR2
178D 22        1365   ret
178E           1366   
178E           1367   
178E           1368   
178E           1369   Wait10us:
178E 784A      1370       mov R0, #74
1790 D8FE      1371       djnz R0, $
1792 22        1372   ret
1793           1373   ; ==================================================================================================
1793           1374   
1793           1375   ;-------------------------------------;
1793           1376   ; ISR for Timer 1.  Used to playback  ;
1793           1377   ; the WAV file stored in the SPI      ;
1793           1378   ; flash memory.                       ;
1793           1379   ;-------------------------------------;
1793           1380   Timer1_ISR:
1793           1381            ; The registers used in the ISR must be saved in the stack
1793 C0E0      1382            push acc
1795 C0D0      1383            push psw
1797           1384            
1797           1385            ; Check if the play counter is zero.  If so, stop playing sound.
1797 E54C      1386            mov a, w+0
1799 454D      1387            orl a, w+1
179B 454E      1388            orl a, w+2
179D 601C      1389            jz stop_playing
179F           1390            
179F           1391            ; Decrement play counter 'w'.  In this implementation 'w' is a 24-bit counter.
179F 74FF      1392            mov a, #0xff
17A1 154C      1393            dec w+0
17A3 B54C07    1394            cjne a, w+0, keep_playing
17A6 154D      1395            dec w+1
17A8 B54D02    1396            cjne a, w+1, keep_playing
17AB 154E      1397            dec w+2
17AD           1398            
17AD           1399   keep_playing:
17AD D2A6      1400            setb SPEAKER
17AF 12040D    1401            lcall Send_SPI ; Read the next byte from the SPI Flash...
17B2           1402            ;mov P0, a ; WARNING: Remove this if not using an external DAC to use the pins of P0 as GPIO
17B2 2480      1403            add a, #0x80
17B4 F5AD      1404            mov DADH, a ; Output to DAC. DAC output is pin P2.3
17B6 43A440    1405            orl DADC, #0b_0100_0000 ; Start DAC by setting GO/BSY=1
17B9 800C      1406            sjmp Timer1_ISR_Done
17BB           1407   
17BB           1408   stop_playing:
17BB C28E      1409            clr TR1 ; Stop timer 1
17BD D2A5      1410            setb FLASH_CE  ; Disable SPI Flash
17BF C2A6      1411            clr SPEAKER ; Turn off speaker.  Removes hissing noise when not playing sound.
17C1 75AD80    1412            mov DADH, #0x80 ; middle of range
17C4 43A440    1413            orl DADC, #0b_0100_0000 ; Start DAC by setting GO/BSY=1
17C7           1414   
17C7           1415   Timer1_ISR_Done:         
17C7 D0D0      1416            pop psw
17C9 D0E0      1417            pop acc
17CB 32        1418            reti
17CC           1419   ; ==================================================================================================
17CC           1420   
17CC           1421   ;---------------------------------;
17CC           1422   ; Routine to initialize the ISR   ;
17CC           1423   ; for timer 2                     ;
17CC           1424   ;---------------------------------;
17CC           1425   Timer2_init:
17CC 75C800    1426       mov T2CON, #0
17CF 75CDA9    1427       mov TH2, #high(TIMER2_RELOAD)
17D2 75CC9A    1428       mov TL2, #low(TIMER2_RELOAD)
17D5           1429   
17D5 75CBA9    1430       mov RCAP2H, #high(TIMER2_RELOAD)
17D8 75CA9A    1431       mov RCAP2L, #low(TIMER2_RELOAD)
17DB           1432   
17DB E4        1433       clr a
17DC F530      1434       mov Count1ms+0, a
17DE F531      1435       mov Count1ms+1, a
17E0 F532      1436       mov Count5sec , a
17E2 D2AD      1437       setb ET2
17E4 D2CA      1438       setb TR2
17E6 C202      1439       clr enable_clk
17E8 22        1440       ret
17E9           1441   
17E9           1442   ;---------------------------------;
17E9           1443   ; ISR for timer 2                 ;
17E9           1444   ;---------------------------------;
17E9           1445   Timer2_ISR:
17E9 C2CF      1446       clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
17EB B290      1447       cpl P1.0 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
17ED           1448            
17ED           1449            ; The two registers used in the ISR must be saved in the stack
17ED C0E0      1450       push acc
17EF C0D0      1451       push psw
17F1           1452            
17F1           1453            ; Increment the 16-bit one mili second counter
17F1 0530      1454            inc Count1ms+0    ; Increment the low 8-bits first
17F3 E530      1455            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
17F5 7002      1456            jnz Inc_Done
17F7 0531      1457            inc Count1ms+1
17F9           1458   
17F9           1459   Inc_Done:
17F9           1460   
17F9           1461   ;**Oven Power Output-------------------
17F9           1462       ; Do the PWM thing
17F9           1463            ; Check if Count1ms > pwm_ratio (this is a 16-bit compare)
17F9 C3        1464            clr c
17FA E54F      1465            mov a, pwm_ratio+0
17FC 9530      1466            subb a, Count1ms+0
17FE E550      1467            mov a, pwm_ratio+1
1800 9531      1468            subb a, Count1ms+1
1802           1469            ; if Count1ms > pwm_ratio  the carry is set.  Just copy the carry to the pwm output pin:
1802 9290      1470            mov PWM_OUTPUT, c
1804           1471   ;**----------------------------------
1804           1472            ; Check if one second has passed
1804 E530      1473            mov a, Count1ms+0
1806 B4E831    1474            cjne a, #low(1000), Timer2_ISR_done ; Warning: this instruction changes the carry flag!
1809 E531      1475            mov a, Count1ms+1
180B B4032C    1476            cjne a, #high(1000), Timer2_ISR_done
180E           1477            
180E           1478            ; 1000 milliseconds have passed.  Set a flag so the main program knows
180E D200      1479            setb one_seconds_flag ; Let the main program know one second had passed
1810           1480       
1810 0532      1481       inc Count5sec
1812 E532      1482       mov a, Count5sec
1814 B40505    1483       cjne a, #5, Set_5sec_flag_done
1817 D201      1484       setb five_seconds_flag
1819 E4        1485       clr a
181A F532      1486       mov Count5sec, a
181C           1487       
181C           1488   Set_5sec_flag_done:
181C E4        1489            clr a
181D F530      1490            mov Count1ms+0, a
181F F531      1491            mov Count1ms+1, a
1821           1492   
1821 300216    1493       jnb enable_clk, Timer2_ISR_done ;if the clk is enabled, increment the second. Otherwise skip
1824           1494   ; Increment the run time counter and state time counter
1824 E538      1495            mov a, Run_time_seconds
1826 2401      1496            add a, #0x01
1828 D4        1497            da a
1829 F538      1498       mov Run_time_seconds, a
182B           1499       ;check sec overflow
182B B4600A    1500       cjne a, #0x60, Check_sec_overflow_done
182E 753800    1501       mov Run_time_seconds, #0x00
1831 E539      1502       mov a, Run_time_minutes ;inc min
1833 2401      1503       add a, #1
1835 D4        1504       da a
1836 F539      1505       mov Run_time_minutes, a
1838           1506   Check_sec_overflow_done:
1838 053A      1507       inc State_time
183A           1508   Timer2_ISR_done:
183A D0D0      1509            pop psw
183C D0E0      1510            pop acc
183E 32        1511            reti
183F           1512   
183F           1513   
183F           1514   ; ==================================================================================================
183F           1515   
183F           1516   main:
183F 75817F    1517       mov SP, #0x7F
1842 1217CC    1518       lcall Timer2_Init
1845           1519       ;lcall INI_SPI
1845 120088    1520       lcall LCD_4BIT
1848 120466    1521       lcall InitSerialPort
184B 12139A    1522       lcall INI_PLAYBACK_TEMP
184E           1523       ; In case you decide to use the pins of P0, configure the port in bidirectional mode. Can be ignored
184E 75E600    1524       mov P0M0, #0
1851 75E700    1525       mov P0M1, #0
1854 D2AF      1526       setb EA   ;Enable global enterupt
1856 C204      1527       clr SPAN_ENG
1858           1528   
1858 121658    1529       lcall Load_Configuration
185B           1530   
185B           1531       ;Set the default pwm output ratio to 0%.  That is 0ms of every second:
185B 754F00    1532            mov pwm_ratio+0, #low(0)
185E 755000    1533            mov pwm_ratio+1, #high(0)
1861 753300    1534       mov States, #0
1864           1535   
1864           1536       ; ***play audio***
1864           1536       ;cjne sound_flag, #0, $
1864           1536       
1864 12177B    1536       lcall Wait_Half_Second
1867 C28E      1536       clr TR1 ; Stop Timer 1 ISR from playing previous request
1869 D2A5      1536       setb FLASH_CE
186B           1536       ;setb sound_flag ; sound starts
186B C2A6      1536       clr SPEAKER ; Turn off speaker
186D C2A5      1536       clr FLASH_CE ; Enable SPI Flash
186F 7403      1536       mov a, #READ_BYTES
1871 12040D    1536       lcall Send_SPI
1874           1536       ; Set the initial position in memory where to start playing
1874           1536       
1874 7406      1536       mov a, #0x06 ; change initial position
1876 12040D    1536       lcall Send_SPI
1879 74B6      1536       mov a, #0xb6 ; next memory position
187B 12040D    1536       lcall Send_SPI
187E 74C0      1536       mov a, #0xc0 ; next memory position
1880 12040D    1536       lcall Send_SPI
1883 7406      1536       mov a, #0x06 ; request first byte to send to DAC
1885 12040D    1536       lcall Send_SPI
1888           1536       
1888           1536       ; How many bytes to play?
1888 754E00    1536       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
188B 754D75    1536       mov w+1, #0x75 ; Load the middle byte of the number of bytes to play
188E 754C30    1536       mov w+0, #0x30 ; Load the low byte of the number of bytes to play
1891           1536       
1891           1536       
1891 D2A6      1536       setb SPEAKER ;Turn on speaker
1893 D28E      1536       setb TR1 ;Start playback by enabling Timer1
1895           1536       ;clr sound_flag ; sound ends
1895           1537       ;setb FAN
1895 12156C    1538       lcall Animation 
1898           1539   
1898           1540       
1898           1541   state0: ; idle 
1898           1542   ;***initial parameters displayed***
1898 754F00    1543       mov pwm_ratio+0, #low(0)
189B 755000    1544            mov pwm_ratio+1, #high(0)
189E           1545       
189E           1546       ;Displays Soak Temp and Time
189E 1214A2    1547       lcall State0_display
18A1           1548       ;check power on
18A1 1204F6    1549       lcall CHECK_POWER
18A4           1550       ; check the parameters being pressed
18A4 120486    1551       lcall CHECK_STIME
18A7 1204A2    1552       lcall CHECK_STEMP
18AA 1204BE    1553       lcall CHECK_RTIME
18AD 1204DA    1554       lcall CHECK_RTEMP
18B0 121621    1555       lcall Save_Configuration
18B3           1556       
18B3 2085E2    1557       jb NEXT_STATE_BUTTON, state0
18B6 C002      1558            push AR2
18B8 7A32      1558            mov R2, #50
18BA 120039    1558            lcall ?Wait_Milli_Seconds
18BD D002      1558            pop AR2 ; debounce time
18BF 2085D6    1559            jb NEXT_STATE_BUTTON, state0 ; if button not pressed, loop
18C2 3085FD    1560            jnb NEXT_STATE_BUTTON, $
18C5           1561   state0_done:
18C5 753301    1562       mov States, #1
18C8 753A00    1563       mov State_time, #0
18CB D202      1564       setb enable_clk
18CD           1565       ; ***play audio***
18CD           1565       ;cjne sound_flag, #0, $
18CD           1565       
18CD C28E      1565       clr TR1 ; Stop Timer 1 ISR from playing previous request
18CF D2A5      1565       setb FLASH_CE
18D1           1565       ;setb sound_flag ; sound starts
18D1 C2A6      1565       clr SPEAKER ; Turn off speaker
18D3 C2A5      1565       clr FLASH_CE ; Enable SPI Flash
18D5 7403      1565       mov a, #READ_BYTES
18D7 12040D    1565       lcall Send_SPI
18DA           1565       ; Set the initial position in memory where to start playing
18DA           1565       
18DA 7418      1565       mov a, #0x18 ; change initial position
18DC 12040D    1565       lcall Send_SPI
18DF 74CB      1565       mov a, #0xcb ; next memory position
18E1 12040D    1565       lcall Send_SPI
18E4 74A8      1565       mov a, #0xa8 ; next memory position
18E6 12040D    1565       lcall Send_SPI
18E9 7418      1565       mov a, #0x18 ; request first byte to send to DAC
18EB 12040D    1565       lcall Send_SPI
18EE           1565       
18EE           1565       ; How many bytes to play?
18EE 754E02    1565       mov w+2, #0x02 ; Load the high byte of the number of bytes to play
18F1 754D0F    1565       mov w+1, #0x0f ; Load the middle byte of the number of bytes to play
18F4 754C58    1565       mov w+0, #0x58 ; Load the low byte of the number of bytes to play
18F7           1565       
18F7           1565       
18F7 D2A6      1565       setb SPEAKER ;Turn on speaker
18F9 D28E      1565       setb TR1 ;Start playback by enabling Timer1
18FB           1565       ;clr sound_flag ; sound ends
18FB 121756    1566       lcall Wait_One_Second
18FE           1567        
18FE           1568   
18FE           1569   state1_beginning:
18FE           1570   
18FE           1571       ;Start Run Time
18FE 753800    1572       mov Run_time_seconds, #0 ; time starts at 0:00
1901 753900    1573       mov Run_time_minutes, #0
1904 753A00    1574       mov State_time, #0
1907           1575   
1907           1576       ;***clear the screen and set new display***
1907 1213FC    1577       lcall Initialize_State_Display
190A C0E0      1578            push acc
190C 7407      1578            mov a, #7
190E 14        1578            dec a
190F 1200BD    1578            lcall ?Set_Cursor_2 ; Select column and row
1912 D0E0      1578            pop acc
1914 C083      1579            push dph
1916 C082      1579            push dpl
1918 C0E0      1579            push acc
191A 9003C7    1579            mov dptr, #Ramp2Soak
191D 1200B2    1579            lcall ?Send_Constant_String
1920 D0E0      1579            pop acc
1922 D082      1579            pop dpl
1924 D083      1579            pop dph; displays current state
1926           1580   
1926           1581       ;Set the default pwm output ratio to 100%.  That is 1000ms of every second:
1926 754FE8    1582            mov pwm_ratio+0, #low(1000)
1929 755003    1583            mov pwm_ratio+1, #high(1000)
192C           1584       ; ***play audio***
192C           1584       ;cjne sound_flag, #0, $
192C           1584       
192C 12177B    1584       lcall Wait_Half_Second
192F C28E      1584       clr TR1 ; Stop Timer 1 ISR from playing previous request
1931 D2A5      1584       setb FLASH_CE
1933           1584       ;setb sound_flag ; sound starts
1933 C2A6      1584       clr SPEAKER ; Turn off speaker
1935 C2A5      1584       clr FLASH_CE ; Enable SPI Flash
1937 7403      1584       mov a, #READ_BYTES
1939 12040D    1584       lcall Send_SPI
193C           1584       ; Set the initial position in memory where to start playing
193C           1584       
193C 7400      1584       mov a, #0x00 ; change initial position
193E 12040D    1584       lcall Send_SPI
1941 7400      1584       mov a, #0x00 ; next memory position
1943 12040D    1584       lcall Send_SPI
1946 742D      1584       mov a, #0x2d ; next memory position
1948 12040D    1584       lcall Send_SPI
194B 7400      1584       mov a, #0x00 ; request first byte to send to DAC
194D 12040D    1584       lcall Send_SPI
1950           1584       
1950           1584       ; How many bytes to play?
1950 754E00    1584       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1953 754D4E    1584       mov w+1, #0x4e ; Load the middle byte of the number of bytes to play
1956 754C20    1584       mov w+0, #0x20 ; Load the low byte of the number of bytes to play
1959           1584       
1959           1584       
1959 D2A6      1584       setb SPEAKER ;Turn on speaker
195B D28E      1584       setb TR1 ;Start playback by enabling Timer1
195D           1584       ;clr sound_flag ; sound ends
195D           1585       ;mov FAN, #1
195D 8003      1586       sjmp state1
195F           1587       
195F           1588   main_1:
195F 02183F    1589            ljmp main
1962           1590   
1962           1591   state1: ; ramp to soak
1962           1592       
1962           1593       ;PLAYBACK_TEMP(#0x00,#0x00,#0x2d, #0x4e,#0x20)
1962           1594       ;check power on
1962 1204F6    1595       lcall CHECK_POWER
1965           1596       ;Update Time and Temp
1965 12147B    1597       lcall Update_Display
1968 1216D1    1598       lcall Average_Temp
196B 120512    1599       lcall CHECK_SPAN_OR_ENGL
196E           1600       
196E           1601       ;Decides if going to Spanish or English
196E 200405    1602       jb SPAN_ENG, SPANISH1
1971 12053A    1603       lcall SOUND_FSM
1974 8003      1604       sjmp Check_Temp_done1
1976           1605   SPANISH1:
1976 120C6A    1606       lcall SOUND_FSM_S
1979           1607   
1979           1608   Check_Temp_done1:
1979           1609   
1979           1610       ;check if temp is below 150 
1979 E53B      1611       mov a, Temp_oven           
197B 9534      1612       subb a, Temp_soak
197D 5014      1613       jnc state1_done        ; if greater, jump to state 2
197F 6012      1614       jz state1_done         ; if equal to, jump to state 2
1981 4000      1615       jc Check_state1_safety ; if less than, check state time
1983           1616   Check_state1_safety:       ; safety
1983 E53B      1617       mov a, Temp_oven           
1985 9432      1618       subb a, #50
1987 50D9      1619       jnc state1             ; if greater, go back to state1
1989 E53A      1620       mov a, State_time      ; if less than 50C, check if state time is too long
198B 943C      1621       subb a, #60
198D 50D0      1622       jnc main_1             ; if greater, restart
198F 60CE      1623       jz main_1              ; if equal to, restart
1991 40CF      1624       jc state1              ; if less than, go back to state1
1993           1625   ;*Checking moving to states with buttons---- 
1993           1626   ;*Will remove after proper temperature reading----
1993           1627   
1993           1628       ;jb NEXT_STATE_BUTTON, state1
1993           1629       ;Wait_Milli_Seconds(#50) ; debounce time
1993           1630            ;jb NEXT_STATE_BUTTON, state1 ; if button not pressed, loop
1993           1631            ;jnb NEXT_STATE_BUTTON, $ 
1993           1632   
1993           1633   state1_done:
1993           1634       ;mov FAN, #0
1993 753302    1635       mov States, #2
1996           1636   
1996           1637   ; preheat/soak
1996           1638   state2_beginning: 
1996 753A00    1639       mov State_time, #0;x00 ;clear the state time
1999           1640       ;***clear the screen and set new display***
1999 1213FC    1641       lcall Initialize_State_Display
199C C0E0      1642            push acc
199E 7407      1642            mov a, #7
19A0 14        1642            dec a
19A1 1200BD    1642            lcall ?Set_Cursor_2 ; Select column and row
19A4 D0E0      1642            pop acc
19A6 C083      1643            push dph
19A8 C082      1643            push dpl
19AA C0E0      1643            push acc
19AC 9003D1    1643            mov dptr, #Soak
19AF 1200B2    1643            lcall ?Send_Constant_String
19B2 D0E0      1643            pop acc
19B4 D082      1643            pop dpl
19B6 D083      1643            pop dph ;displays current state
19B8           1644   
19B8           1645       ;Set the default pwm output ratio to 20%.  That is 200ms of every second:
19B8 754FC8    1646            mov pwm_ratio+0, #low(200)
19BB 755000    1647            mov pwm_ratio+1, #high(000)
19BE           1648       ; Produces SOAK on speaker
19BE           1649       ; ***play audio***
19BE           1649       ;cjne sound_flag, #0, $
19BE           1649       
19BE 12177B    1649       lcall Wait_Half_Second
19C1 C28E      1649       clr TR1 ; Stop Timer 1 ISR from playing previous request
19C3 D2A5      1649       setb FLASH_CE
19C5           1649       ;setb sound_flag ; sound starts
19C5 C2A6      1649       clr SPEAKER ; Turn off speaker
19C7 C2A5      1649       clr FLASH_CE ; Enable SPI Flash
19C9 7403      1649       mov a, #READ_BYTES
19CB 12040D    1649       lcall Send_SPI
19CE           1649       ; Set the initial position in memory where to start playing
19CE           1649       
19CE 7400      1649       mov a, #0x00 ; change initial position
19D0 12040D    1649       lcall Send_SPI
19D3 7444      1649       mov a, #0x44 ; next memory position
19D5 12040D    1649       lcall Send_SPI
19D8 74DD      1649       mov a, #0xdd ; next memory position
19DA 12040D    1649       lcall Send_SPI
19DD 7400      1649       mov a, #0x00 ; request first byte to send to DAC
19DF 12040D    1649       lcall Send_SPI
19E2           1649       
19E2           1649       ; How many bytes to play?
19E2 754E00    1649       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
19E5 754D4E    1649       mov w+1, #0x4e ; Load the middle byte of the number of bytes to play
19E8 754C20    1649       mov w+0, #0x20 ; Load the low byte of the number of bytes to play
19EB           1649       
19EB           1649       
19EB D2A6      1649       setb SPEAKER ;Turn on speaker
19ED D28E      1649       setb TR1 ;Start playback by enabling Timer1
19EF           1649       ;clr sound_flag ; sound ends
19EF           1650   
19EF           1651   state2:
19EF           1652       ;check power on
19EF 1204F6    1653       lcall CHECK_POWER 
19F2           1654       ;Update Time and Temp
19F2 12147B    1655       lcall Update_Display
19F5 1216D1    1656       lcall Average_Temp
19F8           1657   
19F8 200405    1658       jb SPAN_ENG, SPANISH2
19FB 12053A    1659       lcall SOUND_FSM
19FE 8003      1660       sjmp Check_Temp_done2
1A00           1661   SPANISH2:
1A00 120C6A    1662       lcall SOUND_FSM_S
1A03           1663       
1A03           1664       ; loop back to state2 if run time is less than soak time. If greater than jump to state3 cuz of overflow of time
1A03           1665   Check_Temp_done2:     
1A03 E53A      1666       mov a, State_time
1A05 9535      1667       subb a, Time_soak
1A07 5002      1668       jnc state2_done
1A09 40E4      1669       jc state2
1A0B           1670   
1A0B           1671   state2_done:
1A0B 753A03    1672       mov State_time, #3
1A0E           1673   
1A0E           1674   ; ramp to peak
1A0E           1675   state3_beginning:
1A0E           1676       ;setb OVEN_POWER ;turn power on 100%
1A0E           1677   
1A0E           1678       ;***clear the screen and set new display***
1A0E 1213FC    1679       lcall Initialize_State_Display
1A11 C0E0      1680            push acc
1A13 7407      1680            mov a, #7
1A15 14        1680            dec a
1A16 1200BD    1680            lcall ?Set_Cursor_2 ; Select column and row
1A19 D0E0      1680            pop acc
1A1B C083      1681            push dph
1A1D C082      1681            push dpl
1A1F C0E0      1681            push acc
1A21 9003D6    1681            mov dptr, #Ramp2Peak
1A24 1200B2    1681            lcall ?Send_Constant_String
1A27 D0E0      1681            pop acc
1A29 D082      1681            pop dpl
1A2B D083      1681            pop dph
1A2D           1682   
1A2D           1683       ;Set the default pwm output ratio to 100%.  That is 1000ms of every second:
1A2D 754FE8    1684            mov pwm_ratio+0, #low(1000)
1A30 755003    1685            mov pwm_ratio+1, #high(1000)
1A33           1686   
1A33           1687       ; Produces RAMP TO PEAK on speaker
1A33           1688       ; ***play audio***
1A33           1688       ;cjne sound_flag, #0, $
1A33           1688       
1A33 12177B    1688       lcall Wait_Half_Second
1A36 C28E      1688       clr TR1 ; Stop Timer 1 ISR from playing previous request
1A38 D2A5      1688       setb FLASH_CE
1A3A           1688       ;setb sound_flag ; sound starts
1A3A C2A6      1688       clr SPEAKER ; Turn off speaker
1A3C C2A5      1688       clr FLASH_CE ; Enable SPI Flash
1A3E 7403      1688       mov a, #READ_BYTES
1A40 12040D    1688       lcall Send_SPI
1A43           1688       ; Set the initial position in memory where to start playing
1A43           1688       
1A43 7400      1688       mov a, #0x00 ; change initial position
1A45 12040D    1688       lcall Send_SPI
1A48 748B      1688       mov a, #0x8b ; next memory position
1A4A 12040D    1688       lcall Send_SPI
1A4D 74CA      1688       mov a, #0xca ; next memory position
1A4F 12040D    1688       lcall Send_SPI
1A52 7400      1688       mov a, #0x00 ; request first byte to send to DAC
1A54 12040D    1688       lcall Send_SPI
1A57           1688       
1A57           1688       ; How many bytes to play?
1A57 754E00    1688       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1A5A 754D75    1688       mov w+1, #0x75 ; Load the middle byte of the number of bytes to play
1A5D 754C30    1688       mov w+0, #0x30 ; Load the low byte of the number of bytes to play
1A60           1688       
1A60           1688       
1A60 D2A6      1688       setb SPEAKER ;Turn on speaker
1A62 D28E      1688       setb TR1 ;Start playback by enabling Timer1
1A64           1688       ;clr sound_flag ; sound ends
1A64           1689   
1A64           1690   state3: 
1A64           1691       ;check power on
1A64 1204F6    1692       lcall CHECK_POWER
1A67 1216D1    1693       lcall Average_Temp
1A6A           1694       
1A6A           1695       
1A6A           1696       ;Update Time and Temp
1A6A 12147B    1697       lcall Update_Display
1A6D 200405    1698       jb SPAN_ENG, SPANISH3
1A70 12053A    1699       lcall SOUND_FSM
1A73 8003      1700       sjmp Check_Temp_done3
1A75           1701   SPANISH3:
1A75 120C6A    1702       lcall SOUND_FSM_S
1A78           1703       
1A78           1704   Check_Temp_done3:  
1A78           1705    
1A78 E53B      1706       mov a, Temp_oven           
1A7A 9536      1707       subb a, Temp_refl
1A7C 5004      1708       jnc state3_done    ; if greater, jump to state 4
1A7E 6002      1709       jz state3_done ; if equal to, jump to state 4
1A80 40E2      1710       jc state3 ; if less than, go back to state3
1A82           1711    
1A82           1712   state3_done:
1A82 753A04    1713       mov State_time, #4
1A85           1714   
1A85           1715   ; reflow 
1A85           1716   state4_beginning:
1A85           1717       
1A85 753A00    1718       mov State_time, #0;x00 clear the state time
1A88           1719       ;***clear the screen and set new display***
1A88 1213FC    1720       lcall Initialize_State_Display
1A8B C0E0      1721            push acc
1A8D 7407      1721            mov a, #7
1A8F 14        1721            dec a
1A90 1200BD    1721            lcall ?Set_Cursor_2 ; Select column and row
1A93 D0E0      1721            pop acc
1A95 C083      1722            push dph
1A97 C082      1722            push dpl
1A99 C0E0      1722            push acc
1A9B 9003E0    1722            mov dptr, #Reflow
1A9E 1200B2    1722            lcall ?Send_Constant_String
1AA1 D0E0      1722            pop acc
1AA3 D082      1722            pop dpl
1AA5 D083      1722            pop dph
1AA7           1723   
1AA7           1724       ;Set the default pwm output ratio to 20%.  That is 200ms of every second:
1AA7 754FC8    1725            mov pwm_ratio+0, #low(200)
1AAA 755000    1726            mov pwm_ratio+1, #high(000)
1AAD           1727   
1AAD           1728       ; Produces REFLOW on speaker
1AAD           1729       ; ***play audio***
1AAD           1729       ;cjne sound_flag, #0, $
1AAD           1729       
1AAD 12177B    1729       lcall Wait_Half_Second
1AB0 C28E      1729       clr TR1 ; Stop Timer 1 ISR from playing previous request
1AB2 D2A5      1729       setb FLASH_CE
1AB4           1729       ;setb sound_flag ; sound starts
1AB4 C2A6      1729       clr SPEAKER ; Turn off speaker
1AB6 C2A5      1729       clr FLASH_CE ; Enable SPI Flash
1AB8 7403      1729       mov a, #READ_BYTES
1ABA 12040D    1729       lcall Send_SPI
1ABD           1729       ; Set the initial position in memory where to start playing
1ABD           1729       
1ABD 7400      1729       mov a, #0x00 ; change initial position
1ABF 12040D    1729       lcall Send_SPI
1AC2 74F0      1729       mov a, #0xf0 ; next memory position
1AC4 12040D    1729       lcall Send_SPI
1AC7 7463      1729       mov a, #0x63 ; next memory position
1AC9 12040D    1729       lcall Send_SPI
1ACC 7400      1729       mov a, #0x00 ; request first byte to send to DAC
1ACE 12040D    1729       lcall Send_SPI
1AD1           1729       
1AD1           1729       ; How many bytes to play?
1AD1 754E00    1729       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1AD4 754D59    1729       mov w+1, #0x59 ; Load the middle byte of the number of bytes to play
1AD7 754CD8    1729       mov w+0, #0xd8 ; Load the low byte of the number of bytes to play
1ADA           1729       
1ADA           1729       
1ADA D2A6      1729       setb SPEAKER ;Turn on speaker
1ADC D28E      1729       setb TR1 ;Start playback by enabling Timer1
1ADE           1729       ;clr sound_flag ; sound ends
1ADE           1730   
1ADE           1731   
1ADE           1732   state4:
1ADE           1733       ;check power on
1ADE 1204F6    1734       lcall CHECK_POWER
1AE1           1735       ;Update Time and Temp
1AE1 12147B    1736       lcall Update_Display
1AE4 1216D1    1737       lcall Average_Temp
1AE7 200405    1738      jb SPAN_ENG, SPANISH4
1AEA 12053A    1739       lcall SOUND_FSM
1AED 8003      1740       sjmp Check_Temp_done4
1AEF           1741   SPANISH4:
1AEF 120C6A    1742       lcall SOUND_FSM_S
1AF2           1743       
1AF2           1744   Check_Temp_done4:  
1AF2           1745      
1AF2           1746       ; loop back to state2 if run time is less than soak time
1AF2 E53A      1747       mov a, State_time
1AF4 9537      1748       subb a, Time_refl
1AF6 5002      1749       jnc state4_done
1AF8 40E4      1750       jc state4
1AFA           1751   
1AFA           1752   state4_done: 
1AFA 753A00    1753       mov State_time, #0
1AFD 021B00    1754       ljmp state5_beginning 
1B00           1755   
1B00           1756   
1B00           1757   ; cooling
1B00           1758   state5_beginning: ; turn oven off
1B00 C287      1759       clr OVEN_POWER
1B02           1760   
1B02           1761   ;***clear the screen and set new display***
1B02 1213FC    1762       lcall Initialize_State_Display
1B05 C083      1763            push dph
1B07 C082      1763            push dpl
1B09 C0E0      1763            push acc
1B0B 9003E7    1763            mov dptr, #Cooling
1B0E 1200B2    1763            lcall ?Send_Constant_String
1B11 D0E0      1763            pop acc
1B13 D082      1763            pop dpl
1B15 D083      1763            pop dph
1B17           1764   
1B17           1765       ;Set the default pwm output ratio to 0%.  That is 0ms of every second:
1B17 754F00    1766            mov pwm_ratio+0, #low(0)
1B1A 755000    1767            mov pwm_ratio+1, #high(0)
1B1D           1768   
1B1D           1769       ; Produces COOLING on speaker
1B1D           1770       ; ***play audio***
1B1D           1770       ;cjne sound_flag, #0, $
1B1D           1770       
1B1D 12177B    1770       lcall Wait_Half_Second
1B20 C28E      1770       clr TR1 ; Stop Timer 1 ISR from playing previous request
1B22 D2A5      1770       setb FLASH_CE
1B24           1770       ;setb sound_flag ; sound starts
1B24 C2A6      1770       clr SPEAKER ; Turn off speaker
1B26 C2A5      1770       clr FLASH_CE ; Enable SPI Flash
1B28 7403      1770       mov a, #READ_BYTES
1B2A 12040D    1770       lcall Send_SPI
1B2D           1770       ; Set the initial position in memory where to start playing
1B2D           1770       
1B2D 7401      1770       mov a, #0x01 ; change initial position
1B2F 12040D    1770       lcall Send_SPI
1B32 7448      1770       mov a, #0x48 ; next memory position
1B34 12040D    1770       lcall Send_SPI
1B37 749A      1770       mov a, #0x9a ; next memory position
1B39 12040D    1770       lcall Send_SPI
1B3C 7401      1770       mov a, #0x01 ; request first byte to send to DAC
1B3E 12040D    1770       lcall Send_SPI
1B41           1770       
1B41           1770       ; How many bytes to play?
1B41 754E00    1770       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1B44 754D6B    1770       mov w+1, #0x6b ; Load the middle byte of the number of bytes to play
1B47 754C6C    1770       mov w+0, #0x6c ; Load the low byte of the number of bytes to play
1B4A           1770       
1B4A           1770       
1B4A D2A6      1770       setb SPEAKER ;Turn on speaker
1B4C D28E      1770       setb TR1 ;Start playback by enabling Timer1
1B4E           1770       ;clr sound_flag ; sound ends
1B4E B291      1771       cpl FAN
1B50           1772   
1B50           1773   state5:
1B50           1774       ;check power on
1B50 1204F6    1775       lcall CHECK_POWER
1B53           1776       
1B53           1777       ; update display
1B53 12147B    1778       lcall Update_Display
1B56 1216D1    1779       lcall Average_Temp
1B59           1780   
1B59 200405    1781       jb SPAN_ENG, SPANISH5
1B5C 12053A    1782       lcall SOUND_FSM
1B5F 8003      1783       sjmp Check_Temp_done5
1B61           1784   SPANISH5:
1B61 120C6A    1785       lcall SOUND_FSM_S
1B64           1786       
1B64           1787   Check_Temp_done5:  
1B64           1788   
1B64 E53B      1789       mov a, Temp_oven
1B66 943C      1790       subb a, #60
1B68 50E6      1791       JNC state5    ; if greater, jump back to state 5
1B6A 60E4      1792       JZ state5 ; if equal to, go back to state5
1B6C 4000      1793       JC state5_done ; if less than, go back to state 0
1B6E           1794   
1B6E           1795       ;*Checking moving to states with buttons---- 
1B6E           1796   ;*Will remove after proper temperature reading----
1B6E           1797   
1B6E           1798       ;jb NEXT_STATE_BUTTON, state5
1B6E           1799       ;Wait_Milli_Seconds(#50) ; debounce time
1B6E           1800            ;jb NEXT_STATE_BUTTON, state5 ; if button not pressed, loop
1B6E           1801            ;jnb NEXT_STATE_BUTTON, $ 
1B6E           1802   
1B6E           1803   state5_done:
1B6E           1804       ; ***play audio***
1B6E           1804       ;cjne sound_flag, #0, $
1B6E           1804       
1B6E C28E      1804       clr TR1 ; Stop Timer 1 ISR from playing previous request
1B70 D2A5      1804       setb FLASH_CE
1B72           1804       ;setb sound_flag ; sound starts
1B72 C2A6      1804       clr SPEAKER ; Turn off speaker
1B74 C2A5      1804       clr FLASH_CE ; Enable SPI Flash
1B76 7403      1804       mov a, #READ_BYTES
1B78 12040D    1804       lcall Send_SPI
1B7B           1804       ; Set the initial position in memory where to start playing
1B7B           1804       
1B7B 7416      1804       mov a, #0x16 ; change initial position
1B7D 12040D    1804       lcall Send_SPI
1B80 74BC      1804       mov a, #0xbc ; next memory position
1B82 12040D    1804       lcall Send_SPI
1B85 7450      1804       mov a, #0x50 ; next memory position
1B87 12040D    1804       lcall Send_SPI
1B8A 7416      1804       mov a, #0x16 ; request first byte to send to DAC
1B8C 12040D    1804       lcall Send_SPI
1B8F           1804       
1B8F           1804       ; How many bytes to play?
1B8F 754E02    1804       mov w+2, #0x02 ; Load the high byte of the number of bytes to play
1B92 754D0F    1804       mov w+1, #0x0f ; Load the middle byte of the number of bytes to play
1B95 754C58    1804       mov w+0, #0x58 ; Load the low byte of the number of bytes to play
1B98           1804       
1B98           1804       
1B98 D2A6      1804       setb SPEAKER ;Turn on speaker
1B9A D28E      1804       setb TR1 ;Start playback by enabling Timer1
1B9C           1804       ;clr sound_flag ; sound ends
1B9C 121756    1805       lcall Wait_One_Second
1B9F 753A00    1806       mov State_time, #0
1BA2 753300    1807       mov States, #0
1BA5 D291      1808       setb FAN
1BA7 02183F    1809       ljmp main
1BAA           1810   
1BAA           1811   EN
