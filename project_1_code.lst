                  2   $LIST
0000              4   
0000              5   
0000              6   ;-------------------------------------------------------------------------------------------------------------------------------
0000              7   ;These EQU must match the wiring between the microcontroller and ADC
0000              8   CLK  EQU 22118400
0000              9   TIMER1_RATE    EQU 25000 ;22050     ; 22050Hz is the sampling rate of the wav file we are playing
0000             10   TIMER1_RELOAD  EQU 0x10000-(CLK/TIMER1_RATE)
0000             11   BAUD equ 115200
0000             12   BRG_VAL equ (0x100-(CLK/(16*BAUD)))
0000             13   
0000             14   TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
0000             15   TIMER2_RELOAD EQU (65536-(CLK/TIMER2_RATE))
0000             16   
0000             17   ;shjfjdfs
0000             18   ;-------------------------------------------------------------------------------------------------------------------------------
0000             19   ;Button Pin Mapping
0000             20   NEXT_STATE_BUTTON  equ P0.5
0000             21   STIME_BUTTON    equ P0.2
0000             22   STEMP_BUTTON    equ P0.3
0000             23   RTIME_BUTTON    equ P0.4
0000             24   RTEMP_BUTTON    equ P0.6 ;0.6
0000             25   PROFILE_BUTTON  equ P0.0
0000             26   
0000             27   POWER_BUTTON    equ P4.5
0000             28   SHIFT_BUTTON    equ P0.1
0000             29   
0000             30   ;Output Pins
0000             31   SPEAKER         equ P2.6
0000             32   
0000             33   PWM_OUTPUT      equ P1.0 ; Attach an LED (with 1k resistor in series) to P1.0
0000             34   SPAN_ENG_BUTTON equ P0.7;0.7
0000             35   
0000             36   
0000             37   ;FLASH pins
0000             38   MY_MOSI_SOUND EQU P2.4
0000             39   MY_MISO_SOUND EQU P2.1
0000             40   MY_SCLK_SOUND EQU P2.0
0000             41   FLASH_CE      EQU P2.5
0000             42   
0000             43   ;Thermowire Pins
0000             44   CE_ADC    EQU  P1.7
0000             45   MY_MOSI   EQU  P1.6
0000             46   MY_MISO   EQU  P1.5
0000             47   MY_SCLK   EQU  P1.4 
0000             48   
0000             49   ; Commands supported by the SPI flash memory according to the datasheet
0000             50   WRITE_ENABLE     EQU 0x06  ; Address:0 Dummy:0 Num:0
0000             51   WRITE_DISABLE    EQU 0x04  ; Address:0 Dummy:0 Num:0
0000             52   READ_STATUS      EQU 0x05  ; Address:0 Dummy:0 Num:1 to infinite
0000             53   READ_BYTES       EQU 0x03  ; Address:3 Dummy:0 Num:1 to infinite
0000             54   READ_SILICON_ID  EQU 0xab  ; Address:0 Dummy:3 Num:1 to infinite
0000             55   FAST_READ        EQU 0x0b  ; Address:3 Dummy:1 Num:1 to infinite
0000             56   WRITE_STATUS     EQU 0x01  ; Address:0 Dummy:0 Num:1
0000             57   WRITE_BYTES      EQU 0x02  ; Address:3 Dummy:0 Num:1 to 256
0000             58   ERASE_ALL        EQU 0xc7  ; Address:0 Dummy:0 Num:0
0000             59   ERASE_BLOCK      EQU 0xd8  ; Address:3 Dummy:0 Num:0
0000             60   READ_DEVICE_ID   EQU 0x9f  ; Address:0 Dummy:2 Num:1 to infinite
0000             61   
0000             62   ; These 'equ' must match the hardware wiring
0000             63   LCD_RS equ P3.2
0000             64   ;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
0000             65   LCD_E  equ P3.3
0000             66   LCD_D4 equ P3.4
0000             67   LCD_D5 equ P3.5
0000             68   LCD_D6 equ P3.6
0000             69   LCD_D7 equ P3.7
0000             70   
0000             71   ;-------------------------------------------------------------------------------------------------------------------------------
0000             72   
0000             73   org 0x0000
0000 021924      74       ljmp main
0003             75   
0003             76   ; External interrupt 0 vector (not used in this code)
0003             77   org 0x0003
0003 32          78            reti
0004             79   
0004             80   ; Timer/Counter 0 overflow interrupt vector
000B             81   org 0x000B
000B 32          82            reti
000C             83   
000C             84   ; External interrupt 1 vector (not used in this code)
0013             85   org 0x0013
0013 32          86            reti
0014             87   
0014             88   ; Timer/Counter 1 overflow interrupt vector
001B             89   org 0x001B
001B 021878      90            ljmp Timer1_ISR
001E             91   
001E             92   ; Serial port receive/transmit interrupt vector (not used in this code)
0023             93   org 0x0023 
0023 32          94            reti
0024             95            
0024             96   ; Timer/Counter 2 overflow interrupt vector
002B             97   org 0x002B
002B 0218CE      98       ljmp Timer2_ISR
002E             99   ;-------------------------------------------------------------------------------------------------------------------------------
002E            100   ; Place our variables here
0030            101   DSEG at 0x30 ; Before the state machine!
0030            102   Count1ms:         ds 2 ; Used to determine when one second has passed
0032            103   Count5sec:        ds 1
0033            104   States:           ds 1
0034            105   Temp_soak:        ds 1
0035            106   Time_soak:        ds 1
0036            107   Temp_refl:        ds 1
0037            108   Time_refl:        ds 1
0038            109   Run_time_seconds: ds 1
0039            110   Run_time_minutes: ds 1
003A            111   State_time:       ds 1
003B            112   Temp_oven:        ds 1
003C            113   KTemp_oven:       ds 1
003D            114   x:                ds 4
0041            115   y:                ds 4
0045            116   bcd:              ds 5
004A            117   Result:           ds 2
004C            118   w:                ds 3
004F            119   pwm_ratio:        ds 2
0051            120   average_count:    ds 1
0052            121   K_or_C:           ds 1
0053            122   Profile:          ds 1 ; Select profile1 if equ 0, 2 if equ 1
0054            123   
                125   $LIST
00F0            127   
                546   $LIST
                129   $LIST
0360            131   
0360            132   ;$NOLIST
0360            133   ;$INCLUDE(sound_for_project1_index.asm)
0360            134   ;$LIST
0360            135   
0000            136   bseg
0000            137   one_seconds_flag:  dbit 1
0001            138   five_seconds_flag: dbit 1
0002            139   enable_clk:        dbit 1
0003            140   mf:                dbit 1
0004            141   SPAN_ENG:          dbit 1
0005            142   ;sound_flag: dbit 1
0005            143   
0360            144   cseg
0360            145   
0360            146   ;-------------------------------------------------------------------------------------------------------------------------------
0360            147   ;***Messages To Display*** 
0360            148   
0360            149   ;shortened labels
0360 53546D70   150   STemp:  db 'STmp:', 0
     3A00
0366 53546D3A   151   STime:  db 'STm:', 0
     00
036B 52546D70   152   RTemp:  db 'RTmp:', 0
     3A00
0371 52546D3A   153   RTime:  db 'RTm:', 0
     00
0376            154   
0376            155   ;lables for runnning oven
0376 53746174   156   state:     db 'State>' , 0
     653E00
037D 546D653E   157   time:      db 'Tme>' , 0
     00
0382 3A00       158   colon:     db ':', 0
0384 546D703E   159   temp:      db 'Tmp>', 0
     00
0389            160   
0389            161   ;labels for changin parameters
0389 5265666C   162   ReflowTemp:  db 'Reflow Temperature:', 0
     6F772054
     656D7065
     72617475
     72653A00
039D 5265666C   163   ReflowTime:  db 'Reflow Time:', 0
     6F772054
     696D653A
     00
03AA 536F616B   164   SoakTime:    db 'Soak Time:', 0
     2054696D
     653A00
03B5 536F616B   165   SoakTemp:    db 'Soak Temperature:', 0
     2054656D
     70657261
     74757265
     3A00
03C7            166   
03C7            167   
03C7            168   ;Current State in Oven
03C7 52616D70   169   Ramp2Soak: db 'Ramp-Soak' , 0
     2D536F61
     6B00
03D1 536F616B   170   Soak:      db 'Soak' , 0
     00
03D6 52616D70   171   Ramp2Peak: db 'Ramp-Peak' , 0
     2D506561
     6B00
03E0 5265666C   172   Reflow:    db 'Reflow' , 0
     6F7700
03E7 436F6F6C   173   Cooling:   db 'Cooling' , 0
     696E6700
03EF            174   
03EF            175   ;-------------------------------------------------------------------------------------------------------------------------------
03EF            176   ;FXNS FOR THERMOWIRE
03EF            177   
03EF            178   ;initialize SPI 
03EF            179   INI_SPI:
03EF D295       180            setb MY_MISO          ; Make MISO an input pin
03F1 C294       181            clr MY_SCLK           ; Mode 0,0 default
03F3 22         182            ret
03F4            183   DO_SPI_G:
03F4 C0E0       184            push acc
03F6 7900       185            mov R1, #0            ; Received byte stored in R1
03F8 7A08       186            mov R2, #8            ; Loop counter (8-bits)
03FA            187   DO_SPI_G_LOOP:
03FA E8         188            mov a, R0             ; Byte to write is in R0
03FB 33         189            rlc a                 ; Carry flag has bit to write
03FC F8         190            mov R0, a
03FD 9296       191            mov MY_MOSI, c
03FF D294       192            setb MY_SCLK          ; Transmit
0401 A295       193            mov c, MY_MISO        ; Read received bit
0403 E9         194            mov a, R1             ; Save received bit in R1
0404 33         195            rlc a
0405 F9         196            mov R1, a
0406 C294       197            clr MY_SCLK
0408 DAF0       198            djnz R2, DO_SPI_G_LOOP
040A D0E0       199            pop acc
040C 22         200   ret
040D            201   
040D            202   Send_SPI:
                203   	SPIBIT MAC
                204   	    ; Send/Receive bit %0
                205   		rlc a
                206   		mov MY_MOSI_SOUND, c
                207   		setb MY_SCLK_SOUND
                208   		mov c, MY_MISO_SOUND
                209   		clr MY_SCLK_SOUND
                210   		mov acc.0, c
                211   	ENDMAC
040D            212            
040D            213                ; Send/Receive bit 7
040D 33         213                    rlc a
040E 92A4       213                    mov MY_MOSI_SOUND, c
0410 D2A0       213                    setb MY_SCLK_SOUND
0412 A2A1       213                    mov c, MY_MISO_SOUND
0414 C2A0       213                    clr MY_SCLK_SOUND
0416 92E0       213                    mov acc.0, c
0418            214                ; Send/Receive bit 6
0418 33         214                    rlc a
0419 92A4       214                    mov MY_MOSI_SOUND, c
041B D2A0       214                    setb MY_SCLK_SOUND
041D A2A1       214                    mov c, MY_MISO_SOUND
041F C2A0       214                    clr MY_SCLK_SOUND
0421 92E0       214                    mov acc.0, c
0423            215                ; Send/Receive bit 5
0423 33         215                    rlc a
0424 92A4       215                    mov MY_MOSI_SOUND, c
0426 D2A0       215                    setb MY_SCLK_SOUND
0428 A2A1       215                    mov c, MY_MISO_SOUND
042A C2A0       215                    clr MY_SCLK_SOUND
042C 92E0       215                    mov acc.0, c
042E            216                ; Send/Receive bit 4
042E 33         216                    rlc a
042F 92A4       216                    mov MY_MOSI_SOUND, c
0431 D2A0       216                    setb MY_SCLK_SOUND
0433 A2A1       216                    mov c, MY_MISO_SOUND
0435 C2A0       216                    clr MY_SCLK_SOUND
0437 92E0       216                    mov acc.0, c
0439            217                ; Send/Receive bit 3
0439 33         217                    rlc a
043A 92A4       217                    mov MY_MOSI_SOUND, c
043C D2A0       217                    setb MY_SCLK_SOUND
043E A2A1       217                    mov c, MY_MISO_SOUND
0440 C2A0       217                    clr MY_SCLK_SOUND
0442 92E0       217                    mov acc.0, c
0444            218                ; Send/Receive bit 2
0444 33         218                    rlc a
0445 92A4       218                    mov MY_MOSI_SOUND, c
0447 D2A0       218                    setb MY_SCLK_SOUND
0449 A2A1       218                    mov c, MY_MISO_SOUND
044B C2A0       218                    clr MY_SCLK_SOUND
044D 92E0       218                    mov acc.0, c
044F            219                ; Send/Receive bit 1
044F 33         219                    rlc a
0450 92A4       219                    mov MY_MOSI_SOUND, c
0452 D2A0       219                    setb MY_SCLK_SOUND
0454 A2A1       219                    mov c, MY_MISO_SOUND
0456 C2A0       219                    clr MY_SCLK_SOUND
0458 92E0       219                    mov acc.0, c
045A            220                ; Send/Receive bit 0
045A 33         220                    rlc a
045B 92A4       220                    mov MY_MOSI_SOUND, c
045D D2A0       220                    setb MY_SCLK_SOUND
045F A2A1       220                    mov c, MY_MISO_SOUND
0461 C2A0       220                    clr MY_SCLK_SOUND
0463 92E0       220                    mov acc.0, c
0465            221   
0465 22         222   ret
0466            223   
                224   Change_8bit_Variable MAC
                225       jb %0, %2
                226       Wait_Milli_Seconds(#50) ; de-bounce
                227       jb %0, %2
                228       jnb %0, $
                229       jb SHIFT_BUTTON, skip%Mb
                230       dec %1
                231       sjmp skip%Ma
                232       skip%Mb:
                233       inc %1
                234       skip%Ma:
                235       mov a, Profile
                236       cjne a, #0, skip%Mc
                237       lcall Save_Configuration1
                238       sjmp skip%Md
                239       skip%Mc:
                240       lcall Save_Configuration2
                241       skip%Md:
                242   ENDMAC
0466            243   
0466            244   
0466            245   
0466            246   ;Change_8bit_Variable(MY_VARIABLE_BUTTON, my_variable, loop_c)
0466            247   ;    Set_Cursor(2, 14)
0466            248   ;    mov a, my_variable
0466            249   ;    lcall SendToLCD
0466            250   ;lcall Save_Configuration
0466            251   
0466            252   ;-------------------------------------------------------------------------------------------------------------------------------
0466            253   ;***FXNS For Serial Port
0466            254   
0466            255   ; Configure the serial port and baud rate
0466            256   InitSerialPort:
0466            257       ; Since the reset button bounces, we need to wait a bit before
0466            258       ; sending messages, otherwise we risk displaying gibberish!
0466 79DE       259       mov R1, #222
0468 78A6       260       mov R0, #166
046A D8FE       261       djnz R0, $   ; 3 cycles->3*45.21123ns*166=22.51519us
046C D9FA       262       djnz R1, $-4 ; 22.51519us*222=4.998ms
046E            263       ; Now we can proceed with the configuration
046E 438780     264            orl     PCON,#0x80
0471 759852     265            mov     SCON,#0x52
0474 759B00     266            mov     BDRCON,#0x00
0477 759AF4     267            mov     BRL,#BRG_VAL
047A 759B1E     268            mov     BDRCON,#0x1E ; BDRCON=BRR|TBCK|RBCK|SPD;
047D 22         269   ret
047E            270   
047E            271   
047E            272   putchar:
047E 3099FD     273       jnb TI, putchar
0481 C299       274       clr TI
0483 F599       275       mov SBUF, a
0485 22         276   ret
0486            277   
0486            278   ;-------------------------------------------------------------------------------------------------------------------------------
0486            279   ;***FXNS to CHECK BUTTONS
0486            280   
0486            281   CHECK_STIME:
0486            282   
0486 208225     283       jb STIME_BUTTON, CHECK_STIME_END
0489 C002       283            push AR2
048B 7A32       283            mov R2, #50
048D 120039     283            lcall ?Wait_Milli_Seconds
0490 D002       283            pop AR2 ; de-bounce
0492 208219     283       jb STIME_BUTTON, CHECK_STIME_END
0495 3082FD     283       jnb STIME_BUTTON, $
0498 208104     283       jb SHIFT_BUTTON, skip16b
049B 1535       283       dec Time_soak
049D 8002       283       sjmp skip16a
049F            283       skip16b:
049F 0535       283       inc Time_soak
04A1            283       skip16a:
04A1 E553       283       mov a, Profile
04A3 B40005     283       cjne a, #0, skip16c
04A6 121699     283       lcall Save_Configuration1
04A9 8003       283       sjmp skip16d
04AB            283       skip16c:
04AB 1216D0     283       lcall Save_Configuration2
04AE            283       skip16d:
04AE            284            
04AE            285   CHECK_STIME_END:
04AE 22         286   ret
04AF            287   
04AF            288   CHECK_STEMP:
04AF 208325     289       jb STEMP_BUTTON, CHECK_STEMP_END
04B2 C002       289            push AR2
04B4 7A32       289            mov R2, #50
04B6 120039     289            lcall ?Wait_Milli_Seconds
04B9 D002       289            pop AR2 ; de-bounce
04BB 208319     289       jb STEMP_BUTTON, CHECK_STEMP_END
04BE 3083FD     289       jnb STEMP_BUTTON, $
04C1 208104     289       jb SHIFT_BUTTON, skip18b
04C4 1534       289       dec Temp_soak
04C6 8002       289       sjmp skip18a
04C8            289       skip18b:
04C8 0534       289       inc Temp_soak
04CA            289       skip18a:
04CA E553       289       mov a, Profile
04CC B40005     289       cjne a, #0, skip18c
04CF 121699     289       lcall Save_Configuration1
04D2 8003       289       sjmp skip18d
04D4            289       skip18c:
04D4 1216D0     289       lcall Save_Configuration2
04D7            289       skip18d:
04D7            290       ;lcall Save_Configuration
04D7            291            
04D7            292   CHECK_STEMP_END:
04D7 22         293   ret
04D8            294   
04D8            295   CHECK_RTIME:
04D8 208425     296       jb RTIME_BUTTON, CHECK_RTIME_END
04DB C002       296            push AR2
04DD 7A32       296            mov R2, #50
04DF 120039     296            lcall ?Wait_Milli_Seconds
04E2 D002       296            pop AR2 ; de-bounce
04E4 208419     296       jb RTIME_BUTTON, CHECK_RTIME_END
04E7 3084FD     296       jnb RTIME_BUTTON, $
04EA 208104     296       jb SHIFT_BUTTON, skip20b
04ED 1537       296       dec Time_refl
04EF 8002       296       sjmp skip20a
04F1            296       skip20b:
04F1 0537       296       inc Time_refl
04F3            296       skip20a:
04F3 E553       296       mov a, Profile
04F5 B40005     296       cjne a, #0, skip20c
04F8 121699     296       lcall Save_Configuration1
04FB 8003       296       sjmp skip20d
04FD            296       skip20c:
04FD 1216D0     296       lcall Save_Configuration2
0500            296       skip20d:
0500            297   CHECK_RTIME_END:
0500 22         298   ret
0501            299   
0501            300   CHECK_RTEMP:
0501 208625     301       jb RTEMP_BUTTON, CHECK_RTEMP_END
0504 C002       301            push AR2
0506 7A32       301            mov R2, #50
0508 120039     301            lcall ?Wait_Milli_Seconds
050B D002       301            pop AR2 ; de-bounce
050D 208619     301       jb RTEMP_BUTTON, CHECK_RTEMP_END
0510 3086FD     301       jnb RTEMP_BUTTON, $
0513 208104     301       jb SHIFT_BUTTON, skip22b
0516 1536       301       dec Temp_refl
0518 8002       301       sjmp skip22a
051A            301       skip22b:
051A 0536       301       inc Temp_refl
051C            301       skip22a:
051C E553       301       mov a, Profile
051E B40005     301       cjne a, #0, skip22c
0521 121699     301       lcall Save_Configuration1
0524 8003       301       sjmp skip22d
0526            301       skip22c:
0526 1216D0     301       lcall Save_Configuration2
0529            301       skip22d:
0529            302   CHECK_RTEMP_END:
0529 22         303   ret
052A            304   
052A            305   CHECK_POWER:
052A 20C518     306       jb POWER_BUTTON, CHECK_POWER_END ; if button not pressed, stop checking
052D C002       307            push AR2
052F 7A32       307            mov R2, #50
0531 120039     307            lcall ?Wait_Milli_Seconds
0534 D002       307            pop AR2 ; debounce time
0536 20C50C     308            jb POWER_BUTTON, CHECK_POWER_END ; if button not pressed, stop checking
0539 30C5FD     309            jnb POWER_BUTTON, $ ; loop while the button is pressed
053C 754F00     310       mov pwm_ratio+0, #low(0)
053F 755000     311            mov pwm_ratio+1, #high(0)
0542 121773     312       lcall OFF_STATE
0545            313   CHECK_POWER_END:
0545 22         314   ret
0546            315   
0546            316   CHECK_PROFILE:
0546 208022     317       jb PROFILE_BUTTON, CHECK_PROFILE_END
0549 C002       318            push AR2
054B 7A32       318            mov R2, #50
054D 120039     318            lcall ?Wait_Milli_Seconds
0550 D002       318            pop AR2 ; de-bounce
0552 208016     319       jb PROFILE_BUTTON, CHECK_PROFILE_END
0555 3080FD     320       jnb PROFILE_BUTTON, $
0558 E553       321       mov a, Profile
055A B40008     322       cjne a, #0, To_Profile1
055D 121730     323       lcall Load_Configuration2
0560 755301     324       mov Profile, #1
0563 8006       325       sjmp CHECK_PROFILE_END
0565            326   To_Profile1:
0565 121707     327       lcall Load_Configuration1
0568 755300     328       mov Profile, #0
056B            329   CHECK_PROFILE_END:
056B 22         330   ret
056C            331   
056C            332   
056C            333   ; Playback MACRO for sound --------------------------------------------------
056C            334   
                335   PLAYBACK_TEMP MAC
                336       ; ***play audio***
                337       ;cjne sound_flag, #0, $
                338       lcall Wait_Half_Second
                339       clr TR1 ; Stop Timer 1 ISR from playing previous request
                340       setb FLASH_CE
                341       ;setb sound_flag ; sound starts
                342       clr SPEAKER ; Turn off speaker
                343       clr FLASH_CE ; Enable SPI Flash
                344       mov a, #READ_BYTES
                345       lcall Send_SPI
                346       ; Set the initial position in memory where to start playing
                347       
                348       mov a, %0 ; change initial position
                349       lcall Send_SPI
                350       mov a, %1 ; next memory position
                351       lcall Send_SPI
                352       mov a, %2 ; next memory position
                353       lcall Send_SPI
                354       mov a, %0 ; request first byte to send to DAC
                355       lcall Send_SPI
                356       
                357       ; How many bytes to play?
                358       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
                359       mov w+1, %3 ; Load the middle byte of the number of bytes to play
                360       mov w+0, %4 ; Load the low byte of the number of bytes to play
                361       
                362       
                363       setb SPEAKER ;Turn on speaker
                364       setb TR1 ;Start playback by enabling Timer1
                365       ;clr sound_flag ; sound ends
                366   ENDMAC
056C            367   
056C            368   
                369   PLAYBACK_MUSIC MAC
                370       ; ***play audio***
                371       ;cjne sound_flag, #0, $
                372       
                373       clr TR1 ; Stop Timer 1 ISR from playing previous request
                374       setb FLASH_CE
                375       ;setb sound_flag ; sound starts
                376       clr SPEAKER ; Turn off speaker
                377       clr FLASH_CE ; Enable SPI Flash
                378       mov a, #READ_BYTES
                379       lcall Send_SPI
                380       ; Set the initial position in memory where to start playing
                381       
                382       mov a, %0 ; change initial position
                383       lcall Send_SPI
                384       mov a, %1 ; next memory position
                385       lcall Send_SPI
                386       mov a, %2 ; next memory position
                387       lcall Send_SPI
                388       mov a, %0 ; request first byte to send to DAC
                389       lcall Send_SPI
                390       
                391       ; How many bytes to play?
                392       mov w+2, #0x02 ; Load the high byte of the number of bytes to play
                393       mov w+1, %3 ; Load the middle byte of the number of bytes to play
                394       mov w+0, %4 ; Load the low byte of the number of bytes to play
                395       
                396       
                397       setb SPEAKER ;Turn on speaker
                398       setb TR1 ;Start playback by enabling Timer1
                399       ;clr sound_flag ; sound ends
                400   ENDMAC
056C            401   
056C            402   CHECK_SPAN_OR_ENGL:
056C            403   
056C 208742     404       jb SPAN_ENG_BUTTON, CHECK_SPAN_OR_ENGL_END ; if button not pressed, stop checking
056F C002       405            push AR2
0571 7A32       405            mov R2, #50
0573 120039     405            lcall ?Wait_Milli_Seconds
0576 D002       405            pop AR2 ; debounce time
0578 208736     406            jb SPAN_ENG_BUTTON, CHECK_SPAN_OR_ENGL_END ; if button not pressed, stop checking
057B 3087FD     407            jnb SPAN_ENG_BUTTON, $ ; loop while the button is pressed
057E            408       
057E            409       ; ***play audio***
057E            409       ;cjne sound_flag, #0, $
057E 121860     409       lcall Wait_Half_Second
0581 C28E       409       clr TR1 ; Stop Timer 1 ISR from playing previous request
0583 D2A5       409       setb FLASH_CE
0585            409       ;setb sound_flag ; sound starts
0585 C2A6       409       clr SPEAKER ; Turn off speaker
0587 C2A5       409       clr FLASH_CE ; Enable SPI Flash
0589 7403       409       mov a, #READ_BYTES
058B 12040D     409       lcall Send_SPI
058E            409       ; Set the initial position in memory where to start playing
058E            409       
058E 7401       409       mov a, #0x01 ; change initial position
0590 12040D     409       lcall Send_SPI
0593 7493       409       mov a, #0x93 ; next memory position
0595 12040D     409       lcall Send_SPI
0598 7484       409       mov a, #0x84 ; next memory position
059A 12040D     409       lcall Send_SPI
059D 7401       409       mov a, #0x01 ; request first byte to send to DAC
059F 12040D     409       lcall Send_SPI
05A2            409       
05A2            409       ; How many bytes to play?
05A2 754E00     409       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
05A5 754D17     409       mov w+1, #0x17 ; Load the middle byte of the number of bytes to play
05A8 754C70     409       mov w+0, #0x70 ; Load the low byte of the number of bytes to play
05AB            409       
05AB            409       
05AB D2A6       409       setb SPEAKER ;Turn on speaker
05AD D28E       409       setb TR1 ;Start playback by enabling Timer1
05AF            409       ;clr sound_flag ; sound ends ;one
05AF B204       410       cpl SPAN_ENG
05B1            411       ;mov a, K_or_C
05B1            412       ;anl a,
05B1            413       ;anl a, #00000001B  ; We need only the two least significant bits
05B1            414   
05B1            415   
05B1            416   CHECK_SPAN_OR_ENGL_END:
05B1 22         417   ret
05B2            418   ;****ENGLISH SOUND FSM--------------------------------------------------------
05B2            419   
05B2            420   SOUND_FSM:
05B2            421   state_0_sound:
05B2            422   ;check if 5 seconds has passed, if yes go to state 1, if no exit function 
05B2 300104     423       jnb five_seconds_flag, Sound_ret
05B5 C201       424       clr five_seconds_flag
05B7 8001       425       sjmp state_1_sound
05B9            426   Sound_ret:
05B9 22         427       ret
05BA            428   
05BA            429   state_1_sound:
05BA            430   ; check if temp is greater than or equal to 100, if yes go to state 2
05BA            431   ; check if temp is less than 100, if yes go to state 4
05BA E53B       432       mov a, Temp_oven
05BC 9464       433       subb a, #100
05BE 5002       434       jnc state_2_sound_hop
05C0 4002       435       jc state_4_sound_hop
05C2            436   
05C2            437       state_2_sound_hop:
05C2 8003       438           sjmp state_2_sound
05C4            439   
05C4            440       state_4_sound_hop:
05C4 0206C0     441           ljmp state_4_sound
05C7            442   
05C7            443   state_2_sound:
05C7            444   ;divide temp by 100, if it is 1 play sound: "100", if it is 2 play sound: "200"
05C7            445   ; go to state_3_sound
05C7 75F064     446       mov b, #100
05CA E53B       447       mov a, Temp_oven
05CC 84         448       div ab
05CD 9401       449       subb a, #1
05CF 600A       450       jz play_sound_100
05D1            451   
05D1 75F064     452       mov b, #100
05D4 E53B       453       mov a, Temp_oven
05D6 84         454       div ab
05D7 9402       455       subb a, #2
05D9 6065       456       jz play_sound_200
05DB            457      
05DB            458       play_sound_100: 
05DB            459       ; ***play audio***
05DB            459       ;cjne sound_flag, #0, $
05DB 121860     459       lcall Wait_Half_Second
05DE C28E       459       clr TR1 ; Stop Timer 1 ISR from playing previous request
05E0 D2A5       459       setb FLASH_CE
05E2            459       ;setb sound_flag ; sound starts
05E2 C2A6       459       clr SPEAKER ; Turn off speaker
05E4 C2A5       459       clr FLASH_CE ; Enable SPI Flash
05E6 7403       459       mov a, #READ_BYTES
05E8 12040D     459       lcall Send_SPI
05EB            459       ; Set the initial position in memory where to start playing
05EB            459       
05EB 7401       459       mov a, #0x01 ; change initial position
05ED 12040D     459       lcall Send_SPI
05F0 7493       459       mov a, #0x93 ; next memory position
05F2 12040D     459       lcall Send_SPI
05F5 7484       459       mov a, #0x84 ; next memory position
05F7 12040D     459       lcall Send_SPI
05FA 7401       459       mov a, #0x01 ; request first byte to send to DAC
05FC 12040D     459       lcall Send_SPI
05FF            459       
05FF            459       ; How many bytes to play?
05FF 754E00     459       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0602 754D36     459       mov w+1, #0x36 ; Load the middle byte of the number of bytes to play
0605 754CB0     459       mov w+0, #0xb0 ; Load the low byte of the number of bytes to play
0608            459       
0608            459       
0608 D2A6       459       setb SPEAKER ;Turn on speaker
060A D28E       459       setb TR1 ;Start playback by enabling Timer1
060C            459       ;clr sound_flag ; sound ends ;one
060C            460       ; ***play audio***
060C            460       ;cjne sound_flag, #0, $
060C 121860     460       lcall Wait_Half_Second
060F C28E       460       clr TR1 ; Stop Timer 1 ISR from playing previous request
0611 D2A5       460       setb FLASH_CE
0613            460       ;setb sound_flag ; sound starts
0613 C2A6       460       clr SPEAKER ; Turn off speaker
0615 C2A5       460       clr FLASH_CE ; Enable SPI Flash
0617 7403       460       mov a, #READ_BYTES
0619 12040D     460       lcall Send_SPI
061C            460       ; Set the initial position in memory where to start playing
061C            460       
061C 7405       460       mov a, #0x05 ; change initial position
061E 12040D     460       lcall Send_SPI
0621 7409       460       mov a, #0x09 ; next memory position
0623 12040D     460       lcall Send_SPI
0626 7410       460       mov a, #0x10 ; next memory position
0628 12040D     460       lcall Send_SPI
062B 7405       460       mov a, #0x05 ; request first byte to send to DAC
062D 12040D     460       lcall Send_SPI
0630            460       
0630            460       ; How many bytes to play?
0630 754E00     460       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0633 754D27     460       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
0636 754C10     460       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
0639            460       
0639            460       
0639 D2A6       460       setb SPEAKER ;Turn on speaker
063B D28E       460       setb TR1 ;Start playback by enabling Timer1
063D            460       ;clr sound_flag ; sound ends ;hundred
063D 0206A5     461           ljmp state_3_sound
0640            462   
0640            463       play_sound_200:
0640            464       ; ***play audio***
0640            464       ;cjne sound_flag, #0, $
0640 121860     464       lcall Wait_Half_Second
0643 C28E       464       clr TR1 ; Stop Timer 1 ISR from playing previous request
0645 D2A5       464       setb FLASH_CE
0647            464       ;setb sound_flag ; sound starts
0647 C2A6       464       clr SPEAKER ; Turn off speaker
0649 C2A5       464       clr FLASH_CE ; Enable SPI Flash
064B 7403       464       mov a, #READ_BYTES
064D 12040D     464       lcall Send_SPI
0650            464       ; Set the initial position in memory where to start playing
0650            464       
0650 7401       464       mov a, #0x01 ; change initial position
0652 12040D     464       lcall Send_SPI
0655 74C7       464       mov a, #0xc7 ; next memory position
0657 12040D     464       lcall Send_SPI
065A 7414       464       mov a, #0x14 ; next memory position
065C 12040D     464       lcall Send_SPI
065F 7401       464       mov a, #0x01 ; request first byte to send to DAC
0661 12040D     464       lcall Send_SPI
0664            464       
0664            464       ; How many bytes to play?
0664 754E00     464       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0667 754D13     464       mov w+1, #0x13 ; Load the middle byte of the number of bytes to play
066A 754C88     464       mov w+0, #0x88 ; Load the low byte of the number of bytes to play
066D            464       
066D            464       
066D D2A6       464       setb SPEAKER ;Turn on speaker
066F D28E       464       setb TR1 ;Start playback by enabling Timer1
0671            464       ;clr sound_flag ; sound ends ;two
0671            465       ; ***play audio***
0671            465       ;cjne sound_flag, #0, $
0671 121860     465       lcall Wait_Half_Second
0674 C28E       465       clr TR1 ; Stop Timer 1 ISR from playing previous request
0676 D2A5       465       setb FLASH_CE
0678            465       ;setb sound_flag ; sound starts
0678 C2A6       465       clr SPEAKER ; Turn off speaker
067A C2A5       465       clr FLASH_CE ; Enable SPI Flash
067C 7403       465       mov a, #READ_BYTES
067E 12040D     465       lcall Send_SPI
0681            465       ; Set the initial position in memory where to start playing
0681            465       
0681 7405       465       mov a, #0x05 ; change initial position
0683 12040D     465       lcall Send_SPI
0686 7409       465       mov a, #0x09 ; next memory position
0688 12040D     465       lcall Send_SPI
068B 7410       465       mov a, #0x10 ; next memory position
068D 12040D     465       lcall Send_SPI
0690 7405       465       mov a, #0x05 ; request first byte to send to DAC
0692 12040D     465       lcall Send_SPI
0695            465       
0695            465       ; How many bytes to play?
0695 754E00     465       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0698 754D27     465       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
069B 754C10     465       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
069E            465       
069E            465       
069E D2A6       465       setb SPEAKER ;Turn on speaker
06A0 D28E       465       setb TR1 ;Start playback by enabling Timer1
06A2            465       ;clr sound_flag ; sound ends ;hundred
06A2 0206A5     466           ljmp state_3_sound
06A5            467   
06A5            468   state_3_sound:
06A5            469   ; check remainder of temp, if it is 0, exit
06A5            470   ; if not 0, go to state_4_sound
06A5            471   
06A5            472   
06A5 75F064     473       mov b, #100
06A8 E53B       474       mov a, Temp_oven
06AA 95F0       475       subb a, b
06AC E5F0       476       mov a, b
06AE 600D       477       jz state_3_sound_hop
06B0            478       
06B0 75F0C8     479       mov b, #200
06B3 E53B       480       mov a, Temp_oven
06B5 95F0       481       subb a, b
06B7 E5F0       482       mov a, b
06B9 6002       483       jz state_3_sound_hop
06BB            484   
06BB 8003       485       sjmp state_4_sound
06BD            486   
06BD            487       state_3_sound_hop:
06BD 0205B9     488           ljmp Sound_ret
06C0            489   
06C0            490   state_4_sound:
06C0            491   ; if T % 100 greater or equal to 20, go to state_5_sound,
06C0 75F064     492       mov b, #100
06C3 E53B       493       mov a, Temp_oven
06C5 84         494       div ab
06C6            495       ;mov R0, b
06C6 E5F0       496       mov a, b 
06C8            497   
06C8            498   
06C8 9414       499       subb a, #20
06CA 5027       500       jnc state_5_sound
06CC 6025       501       jz state_5_sound
06CE E4         502       clr a
06CF            503   ; if T % 100 is less than 10, go to state_6_sound
06CF 75F064     504       mov b, #100
06D2 E53B       505       mov a, Temp_oven
06D4 84         506       div ab
06D5 E5F0       507       mov a, b
06D7 940A       508       subb a, #10
06D9 4015       509       jc state_6_sound_hop0
06DB            510       
06DB            511       ;mov a, b
06DB            512       
06DB            513       ; ubb a, #0
06DB            514       ;jc state_6_sound_hop0
06DB            515       ;clr a
06DB            516   ; if T % 100 is greater than or equal to 10 and less than 20, go to state_7_sound
06DB            517   
06DB 75F064     518       mov b, #100
06DE E53B       519       mov a, Temp_oven
06E0 84         520       div ab
06E1 E5F0       521       mov a, b
06E3 940A       522       subb a, #10
06E5 6000       523       jz and_branch
06E7            524   
06E7            525       and_branch:
06E7 E5F0       526           mov a, b
06E9 9414       527           subb a, #20
06EB 4000       528           jc state_7_sound_hop0
06ED            529       
06ED            530       state_7_sound_hop0:
06ED 020AB4     531           ljmp state_7_sound
06F0            532   
06F0            533       state_6_sound_hop0:
06F0 0208B4     534           ljmp state_6_sound
06F3            535       
06F3            536   
06F3            537   state_5_sound:
06F3            538   ; play number from 20 to 90 in decades (20, 30, 40, 50, 60, 70, 80, 90), based off remainder from temp divided by 100
06F3            539   ; if (T % 100) % 10 is not equal to 0, go to state_6_sound
06F3            540   ; if (T % 100) % 10 is equal to 0, go to state_8_sound
06F3            541   
06F3            542       play_sound:
06F3            543           ;ljmp PLAYBACK_TEMP
06F3 E53B       544           mov a, Temp_oven
06F5 75F064     545           mov b, #100
06F8 84         546           div ab
06F9 E5F0       547           mov a, b
06FB 75F00A     548           mov b, #10
06FE 84         549           div ab
06FF B40234     550           cjne a, #2, play_30
0702            551           ;mov    
0702            552   
0702            553           play_20:
0702            554       ; ***play audio***
0702            554       ;cjne sound_flag, #0, $
0702 121860     554       lcall Wait_Half_Second
0705 C28E       554       clr TR1 ; Stop Timer 1 ISR from playing previous request
0707 D2A5       554       setb FLASH_CE
0709            554       ;setb sound_flag ; sound starts
0709 C2A6       554       clr SPEAKER ; Turn off speaker
070B C2A5       554       clr FLASH_CE ; Enable SPI Flash
070D 7403       554       mov a, #READ_BYTES
070F 12040D     554       lcall Send_SPI
0712            554       ; Set the initial position in memory where to start playing
0712            554       
0712 7403       554       mov a, #0x03 ; change initial position
0714 12040D     554       lcall Send_SPI
0717 74EF       554       mov a, #0xef ; next memory position
0719 12040D     554       lcall Send_SPI
071C 74D0       554       mov a, #0xd0 ; next memory position
071E 12040D     554       lcall Send_SPI
0721 7403       554       mov a, #0x03 ; request first byte to send to DAC
0723 12040D     554       lcall Send_SPI
0726            554       
0726            554       ; How many bytes to play?
0726 754E00     554       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0729 754D27     554       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
072C 754C10     554       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
072F            554       
072F            554       
072F D2A6       554       setb SPEAKER ;Turn on speaker
0731 D28E       554       setb TR1 ;Start playback by enabling Timer1
0733            554       ;clr sound_flag ; sound ends
0733            555               ;lcall Wait_One_Second
0733 0208B1     556               ljmp state_6_sound_hop1
0736            557   
0736            558           play_30:
0736            559               
0736 B40334     560               cjne a, #3, play_40   
0739            561       ; ***play audio***
0739            561       ;cjne sound_flag, #0, $
0739 121860     561       lcall Wait_Half_Second
073C C28E       561       clr TR1 ; Stop Timer 1 ISR from playing previous request
073E D2A5       561       setb FLASH_CE
0740            561       ;setb sound_flag ; sound starts
0740 C2A6       561       clr SPEAKER ; Turn off speaker
0742 C2A5       561       clr FLASH_CE ; Enable SPI Flash
0744 7403       561       mov a, #READ_BYTES
0746 12040D     561       lcall Send_SPI
0749            561       ; Set the initial position in memory where to start playing
0749            561       
0749 7404       561       mov a, #0x04 ; change initial position
074B 12040D     561       lcall Send_SPI
074E 7416       561       mov a, #0x16 ; next memory position
0750 12040D     561       lcall Send_SPI
0753 74E0       561       mov a, #0xe0 ; next memory position
0755 12040D     561       lcall Send_SPI
0758 7404       561       mov a, #0x04 ; request first byte to send to DAC
075A 12040D     561       lcall Send_SPI
075D            561       
075D            561       ; How many bytes to play?
075D 754E00     561       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0760 754D23     561       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
0763 754C28     561       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
0766            561       
0766            561       
0766 D2A6       561       setb SPEAKER ;Turn on speaker
0768 D28E       561       setb TR1 ;Start playback by enabling Timer1
076A            561       ;clr sound_flag ; sound ends
076A 0208B1     562               ljmp state_6_sound_hop1
076D            563   
076D            564           play_40:
076D            565               
076D B40434     566               cjne a, #4, play_50  
0770            567       ; ***play audio***
0770            567       ;cjne sound_flag, #0, $
0770 121860     567       lcall Wait_Half_Second
0773 C28E       567       clr TR1 ; Stop Timer 1 ISR from playing previous request
0775 D2A5       567       setb FLASH_CE
0777            567       ;setb sound_flag ; sound starts
0777 C2A6       567       clr SPEAKER ; Turn off speaker
0779 C2A5       567       clr FLASH_CE ; Enable SPI Flash
077B 7403       567       mov a, #READ_BYTES
077D 12040D     567       lcall Send_SPI
0780            567       ; Set the initial position in memory where to start playing
0780            567       
0780 7404       567       mov a, #0x04 ; change initial position
0782 12040D     567       lcall Send_SPI
0785 743D       567       mov a, #0x3d ; next memory position
0787 12040D     567       lcall Send_SPI
078A 74F0       567       mov a, #0xf0 ; next memory position
078C 12040D     567       lcall Send_SPI
078F 7404       567       mov a, #0x04 ; request first byte to send to DAC
0791 12040D     567       lcall Send_SPI
0794            567       
0794            567       ; How many bytes to play?
0794 754E00     567       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0797 754D1F     567       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
079A 754C40     567       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
079D            567       
079D            567       
079D D2A6       567       setb SPEAKER ;Turn on speaker
079F D28E       567       setb TR1 ;Start playback by enabling Timer1
07A1            567       ;clr sound_flag ; sound ends
07A1 0208B1     568               ljmp state_6_sound_hop1
07A4            569   
07A4            570           play_50:
07A4            571              
07A4 B40534     572               cjne a, #5, play_60  
07A7            573       ; ***play audio***
07A7            573       ;cjne sound_flag, #0, $
07A7 121860     573       lcall Wait_Half_Second
07AA C28E       573       clr TR1 ; Stop Timer 1 ISR from playing previous request
07AC D2A5       573       setb FLASH_CE
07AE            573       ;setb sound_flag ; sound starts
07AE C2A6       573       clr SPEAKER ; Turn off speaker
07B0 C2A5       573       clr FLASH_CE ; Enable SPI Flash
07B2 7403       573       mov a, #READ_BYTES
07B4 12040D     573       lcall Send_SPI
07B7            573       ; Set the initial position in memory where to start playing
07B7            573       
07B7 7404       573       mov a, #0x04 ; change initial position
07B9 12040D     573       lcall Send_SPI
07BC 7451       573       mov a, #0x51 ; next memory position
07BE 12040D     573       lcall Send_SPI
07C1 7478       573       mov a, #0x78 ; next memory position
07C3 12040D     573       lcall Send_SPI
07C6 7404       573       mov a, #0x04 ; request first byte to send to DAC
07C8 12040D     573       lcall Send_SPI
07CB            573       
07CB            573       ; How many bytes to play?
07CB 754E00     573       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
07CE 754D23     573       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
07D1 754C28     573       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
07D4            573       
07D4            573       
07D4 D2A6       573       setb SPEAKER ;Turn on speaker
07D6 D28E       573       setb TR1 ;Start playback by enabling Timer1
07D8            573       ;clr sound_flag ; sound ends
07D8 0208B1     574               ljmp state_6_sound_hop1
07DB            575   
07DB            576           play_60:
07DB            577               
07DB B40634     578               cjne a, #6, play_70  
07DE            579       ; ***play audio***
07DE            579       ;cjne sound_flag, #0, $
07DE 121860     579       lcall Wait_Half_Second
07E1 C28E       579       clr TR1 ; Stop Timer 1 ISR from playing previous request
07E3 D2A5       579       setb FLASH_CE
07E5            579       ;setb sound_flag ; sound starts
07E5 C2A6       579       clr SPEAKER ; Turn off speaker
07E7 C2A5       579       clr FLASH_CE ; Enable SPI Flash
07E9 7403       579       mov a, #READ_BYTES
07EB 12040D     579       lcall Send_SPI
07EE            579       ; Set the initial position in memory where to start playing
07EE            579       
07EE 7404       579       mov a, #0x04 ; change initial position
07F0 12040D     579       lcall Send_SPI
07F3 7474       579       mov a, #0x74 ; next memory position
07F5 12040D     579       lcall Send_SPI
07F8 74A0       579       mov a, #0xa0 ; next memory position
07FA 12040D     579       lcall Send_SPI
07FD 7404       579       mov a, #0x04 ; request first byte to send to DAC
07FF 12040D     579       lcall Send_SPI
0802            579       
0802            579       ; How many bytes to play?
0802 754E00     579       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0805 754D27     579       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
0808 754C10     579       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
080B            579       
080B            579       
080B D2A6       579       setb SPEAKER ;Turn on speaker
080D D28E       579       setb TR1 ;Start playback by enabling Timer1
080F            579       ;clr sound_flag ; sound ends
080F 0208B1     580               ljmp state_6_sound_hop1
0812            581   
0812            582           play_70:
0812            583              
0812 B40734     584               cjne a, #7, play_80  
0815            585       ; ***play audio***
0815            585       ;cjne sound_flag, #0, $
0815 121860     585       lcall Wait_Half_Second
0818 C28E       585       clr TR1 ; Stop Timer 1 ISR from playing previous request
081A D2A5       585       setb FLASH_CE
081C            585       ;setb sound_flag ; sound starts
081C C2A6       585       clr SPEAKER ; Turn off speaker
081E C2A5       585       clr FLASH_CE ; Enable SPI Flash
0820 7403       585       mov a, #READ_BYTES
0822 12040D     585       lcall Send_SPI
0825            585       ; Set the initial position in memory where to start playing
0825            585       
0825 7404       585       mov a, #0x04 ; change initial position
0827 12040D     585       lcall Send_SPI
082A 749B       585       mov a, #0x9b ; next memory position
082C 12040D     585       lcall Send_SPI
082F 74B0       585       mov a, #0xb0 ; next memory position
0831 12040D     585       lcall Send_SPI
0834 7404       585       mov a, #0x04 ; request first byte to send to DAC
0836 12040D     585       lcall Send_SPI
0839            585       
0839            585       ; How many bytes to play?
0839 754E00     585       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
083C 754D32     585       mov w+1, #0x32 ; Load the middle byte of the number of bytes to play
083F 754CC8     585       mov w+0, #0xc8 ; Load the low byte of the number of bytes to play
0842            585       
0842            585       
0842 D2A6       585       setb SPEAKER ;Turn on speaker
0844 D28E       585       setb TR1 ;Start playback by enabling Timer1
0846            585       ;clr sound_flag ; sound ends
0846 0208B1     586               ljmp state_6_sound_hop1
0849            587   
0849            588           play_80:
0849            589               
0849 B40834     590               cjne a, #8, play_90  
084C            591       ; ***play audio***
084C            591       ;cjne sound_flag, #0, $
084C 121860     591       lcall Wait_Half_Second
084F C28E       591       clr TR1 ; Stop Timer 1 ISR from playing previous request
0851 D2A5       591       setb FLASH_CE
0853            591       ;setb sound_flag ; sound starts
0853 C2A6       591       clr SPEAKER ; Turn off speaker
0855 C2A5       591       clr FLASH_CE ; Enable SPI Flash
0857 7403       591       mov a, #READ_BYTES
0859 12040D     591       lcall Send_SPI
085C            591       ; Set the initial position in memory where to start playing
085C            591       
085C 7404       591       mov a, #0x04 ; change initial position
085E 12040D     591       lcall Send_SPI
0861 74C6       591       mov a, #0xc6 ; next memory position
0863 12040D     591       lcall Send_SPI
0866 74A8       591       mov a, #0xa8 ; next memory position
0868 12040D     591       lcall Send_SPI
086B 7404       591       mov a, #0x04 ; request first byte to send to DAC
086D 12040D     591       lcall Send_SPI
0870            591       
0870            591       ; How many bytes to play?
0870 754E00     591       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0873 754D23     591       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
0876 754C28     591       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
0879            591       
0879            591       
0879 D2A6       591       setb SPEAKER ;Turn on speaker
087B D28E       591       setb TR1 ;Start playback by enabling Timer1
087D            591       ;clr sound_flag ; sound ends
087D 0208B1     592               ljmp state_6_sound_hop1
0880            593   
0880            594           play_90:
0880            595       ; ***play audio***
0880            595       ;cjne sound_flag, #0, $
0880 121860     595       lcall Wait_Half_Second
0883 C28E       595       clr TR1 ; Stop Timer 1 ISR from playing previous request
0885 D2A5       595       setb FLASH_CE
0887            595       ;setb sound_flag ; sound starts
0887 C2A6       595       clr SPEAKER ; Turn off speaker
0889 C2A5       595       clr FLASH_CE ; Enable SPI Flash
088B 7403       595       mov a, #READ_BYTES
088D 12040D     595       lcall Send_SPI
0890            595       ; Set the initial position in memory where to start playing
0890            595       
0890 7404       595       mov a, #0x04 ; change initial position
0892 12040D     595       lcall Send_SPI
0895 74ED       595       mov a, #0xed ; next memory position
0897 12040D     595       lcall Send_SPI
089A 74B8       595       mov a, #0xb8 ; next memory position
089C 12040D     595       lcall Send_SPI
089F 7404       595       mov a, #0x04 ; request first byte to send to DAC
08A1 12040D     595       lcall Send_SPI
08A4            595       
08A4            595       ; How many bytes to play?
08A4 754E00     595       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
08A7 754D1F     595       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
08AA 754C40     595       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
08AD            595       
08AD            595       
08AD D2A6       595       setb SPEAKER ;Turn on speaker
08AF D28E       595       setb TR1 ;Start playback by enabling Timer1
08B1            595       ;clr sound_flag ; sound ends
08B1            596   
08B1            597       state_6_sound_hop1:
08B1 0208B4     598           ljmp state_6_sound
08B4            599           
08B4            600       ;state_8_hop0:
08B4            601           ;ljmp state_6_sound ;state_8_sound
08B4            602   
08B4            603   
08B4            604   state_6_sound:
08B4            605   ; play 1 - 9
08B4            606       ;ljmp PLAYBACK_TEMP
08B4 75F064     607       mov b, #100
08B7 E53B       608       mov a, Temp_oven
08B9 84         609       div ab
08BA E5F0       610       mov a, b
08BC 75F00A     611       mov b, #10
08BF 84         612       div ab
08C0 E5F0       613       mov a, b
08C2            614       
08C2 B40003     615       cjne a, #0x00, play_1
08C5 020AB1     616       ljmp state_8_hop1
08C8            617   
08C8            618       play_1:
08C8 B40134     619           cjne a, #0x01, play_2
08CB            620       ; ***play audio***
08CB            620       ;cjne sound_flag, #0, $
08CB 121860     620       lcall Wait_Half_Second
08CE C28E       620       clr TR1 ; Stop Timer 1 ISR from playing previous request
08D0 D2A5       620       setb FLASH_CE
08D2            620       ;setb sound_flag ; sound starts
08D2 C2A6       620       clr SPEAKER ; Turn off speaker
08D4 C2A5       620       clr FLASH_CE ; Enable SPI Flash
08D6 7403       620       mov a, #READ_BYTES
08D8 12040D     620       lcall Send_SPI
08DB            620       ; Set the initial position in memory where to start playing
08DB            620       
08DB 7401       620       mov a, #0x01 ; change initial position
08DD 12040D     620       lcall Send_SPI
08E0 7493       620       mov a, #0x93 ; next memory position
08E2 12040D     620       lcall Send_SPI
08E5 7484       620       mov a, #0x84 ; next memory position
08E7 12040D     620       lcall Send_SPI
08EA 7401       620       mov a, #0x01 ; request first byte to send to DAC
08EC 12040D     620       lcall Send_SPI
08EF            620       
08EF            620       ; How many bytes to play?
08EF 754E00     620       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
08F2 754D36     620       mov w+1, #0x36 ; Load the middle byte of the number of bytes to play
08F5 754CB0     620       mov w+0, #0xb0 ; Load the low byte of the number of bytes to play
08F8            620       
08F8            620       
08F8 D2A6       620       setb SPEAKER ;Turn on speaker
08FA D28E       620       setb TR1 ;Start playback by enabling Timer1
08FC            620       ;clr sound_flag ; sound ends 
08FC 020AB1     621           ljmp state_8_hop1
08FF            622   
08FF            623       play_2:
08FF B40234     624           cjne a, #0x02, play_3
0902            625       ; ***play audio***
0902            625       ;cjne sound_flag, #0, $
0902 121860     625       lcall Wait_Half_Second
0905 C28E       625       clr TR1 ; Stop Timer 1 ISR from playing previous request
0907 D2A5       625       setb FLASH_CE
0909            625       ;setb sound_flag ; sound starts
0909 C2A6       625       clr SPEAKER ; Turn off speaker
090B C2A5       625       clr FLASH_CE ; Enable SPI Flash
090D 7403       625       mov a, #READ_BYTES
090F 12040D     625       lcall Send_SPI
0912            625       ; Set the initial position in memory where to start playing
0912            625       
0912 7401       625       mov a, #0x01 ; change initial position
0914 12040D     625       lcall Send_SPI
0917 74C7       625       mov a, #0xc7 ; next memory position
0919 12040D     625       lcall Send_SPI
091C 7414       625       mov a, #0x14 ; next memory position
091E 12040D     625       lcall Send_SPI
0921 7401       625       mov a, #0x01 ; request first byte to send to DAC
0923 12040D     625       lcall Send_SPI
0926            625       
0926            625       ; How many bytes to play?
0926 754E00     625       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0929 754D13     625       mov w+1, #0x13 ; Load the middle byte of the number of bytes to play
092C 754C88     625       mov w+0, #0x88 ; Load the low byte of the number of bytes to play
092F            625       
092F            625       
092F D2A6       625       setb SPEAKER ;Turn on speaker
0931 D28E       625       setb TR1 ;Start playback by enabling Timer1
0933            625       ;clr sound_flag ; sound ends
0933 020AB1     626           ljmp state_8_hop1
0936            627   
0936            628       play_3:
0936 B40334     629           cjne a, #0x03, play_4
0939            630       ; ***play audio***
0939            630       ;cjne sound_flag, #0, $
0939 121860     630       lcall Wait_Half_Second
093C C28E       630       clr TR1 ; Stop Timer 1 ISR from playing previous request
093E D2A5       630       setb FLASH_CE
0940            630       ;setb sound_flag ; sound starts
0940 C2A6       630       clr SPEAKER ; Turn off speaker
0942 C2A5       630       clr FLASH_CE ; Enable SPI Flash
0944 7403       630       mov a, #READ_BYTES
0946 12040D     630       lcall Send_SPI
0949            630       ; Set the initial position in memory where to start playing
0949            630       
0949 7401       630       mov a, #0x01 ; change initial position
094B 12040D     630       lcall Send_SPI
094E 74D6       630       mov a, #0xd6 ; next memory position
0950 12040D     630       lcall Send_SPI
0953 7468       630       mov a, #0x68 ; next memory position
0955 12040D     630       lcall Send_SPI
0958 7401       630       mov a, #0x01 ; request first byte to send to DAC
095A 12040D     630       lcall Send_SPI
095D            630       
095D            630       ; How many bytes to play?
095D 754E00     630       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0960 754D23     630       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
0963 754C28     630       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
0966            630       
0966            630       
0966 D2A6       630       setb SPEAKER ;Turn on speaker
0968 D28E       630       setb TR1 ;Start playback by enabling Timer1
096A            630       ;clr sound_flag ; sound ends
096A 020AB1     631           ljmp state_8_hop1
096D            632   
096D            633       play_4:
096D B40434     634           cjne a, #0x04, play_5
0970            635       ; ***play audio***
0970            635       ;cjne sound_flag, #0, $
0970 121860     635       lcall Wait_Half_Second
0973 C28E       635       clr TR1 ; Stop Timer 1 ISR from playing previous request
0975 D2A5       635       setb FLASH_CE
0977            635       ;setb sound_flag ; sound starts
0977 C2A6       635       clr SPEAKER ; Turn off speaker
0979 C2A5       635       clr FLASH_CE ; Enable SPI Flash
097B 7403       635       mov a, #READ_BYTES
097D 12040D     635       lcall Send_SPI
0980            635       ; Set the initial position in memory where to start playing
0980            635       
0980 7401       635       mov a, #0x01 ; change initial position
0982 12040D     635       lcall Send_SPI
0985 74F4       635       mov a, #0xf4 ; next memory position
0987 12040D     635       lcall Send_SPI
098A 7400       635       mov a, #0x00 ; next memory position
098C 12040D     635       lcall Send_SPI
098F 7401       635       mov a, #0x01 ; request first byte to send to DAC
0991 12040D     635       lcall Send_SPI
0994            635       
0994            635       ; How many bytes to play?
0994 754E00     635       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0997 754D1B     635       mov w+1, #0x1b ; Load the middle byte of the number of bytes to play
099A 754C58     635       mov w+0, #0x58 ; Load the low byte of the number of bytes to play
099D            635       
099D            635       
099D D2A6       635       setb SPEAKER ;Turn on speaker
099F D28E       635       setb TR1 ;Start playback by enabling Timer1
09A1            635       ;clr sound_flag ; sound ends
09A1 020AB1     636           ljmp state_8_hop1
09A4            637   
09A4            638       play_5:
09A4 B40534     639           cjne a, #0x05, play_6
09A7            640       ; ***play audio***
09A7            640       ;cjne sound_flag, #0, $
09A7 121860     640       lcall Wait_Half_Second
09AA C28E       640       clr TR1 ; Stop Timer 1 ISR from playing previous request
09AC D2A5       640       setb FLASH_CE
09AE            640       ;setb sound_flag ; sound starts
09AE C2A6       640       clr SPEAKER ; Turn off speaker
09B0 C2A5       640       clr FLASH_CE ; Enable SPI Flash
09B2 7403       640       mov a, #READ_BYTES
09B4 12040D     640       lcall Send_SPI
09B7            640       ; Set the initial position in memory where to start playing
09B7            640       
09B7 7402       640       mov a, #0x02 ; change initial position
09B9 12040D     640       lcall Send_SPI
09BC 7407       640       mov a, #0x07 ; next memory position
09BE 12040D     640       lcall Send_SPI
09C1 7488       640       mov a, #0x88 ; next memory position
09C3 12040D     640       lcall Send_SPI
09C6 7402       640       mov a, #0x02 ; request first byte to send to DAC
09C8 12040D     640       lcall Send_SPI
09CB            640       
09CB            640       ; How many bytes to play?
09CB 754E00     640       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
09CE 754D1B     640       mov w+1, #0x1b ; Load the middle byte of the number of bytes to play
09D1 754C58     640       mov w+0, #0x58 ; Load the low byte of the number of bytes to play
09D4            640       
09D4            640       
09D4 D2A6       640       setb SPEAKER ;Turn on speaker
09D6 D28E       640       setb TR1 ;Start playback by enabling Timer1
09D8            640       ;clr sound_flag ; sound ends
09D8 020AB1     641           ljmp state_8_hop1
09DB            642   
09DB            643       play_6:
09DB B40634     644           cjne a, #0x06, play_7
09DE            645       ; ***play audio***
09DE            645       ;cjne sound_flag, #0, $
09DE 121860     645       lcall Wait_Half_Second
09E1 C28E       645       clr TR1 ; Stop Timer 1 ISR from playing previous request
09E3 D2A5       645       setb FLASH_CE
09E5            645       ;setb sound_flag ; sound starts
09E5 C2A6       645       clr SPEAKER ; Turn off speaker
09E7 C2A5       645       clr FLASH_CE ; Enable SPI Flash
09E9 7403       645       mov a, #READ_BYTES
09EB 12040D     645       lcall Send_SPI
09EE            645       ; Set the initial position in memory where to start playing
09EE            645       
09EE 7402       645       mov a, #0x02 ; change initial position
09F0 12040D     645       lcall Send_SPI
09F3 7426       645       mov a, #0x26 ; next memory position
09F5 12040D     645       lcall Send_SPI
09F8 74C8       645       mov a, #0xc8 ; next memory position
09FA 12040D     645       lcall Send_SPI
09FD 7402       645       mov a, #0x02 ; request first byte to send to DAC
09FF 12040D     645       lcall Send_SPI
0A02            645       
0A02            645       ; How many bytes to play?
0A02 754E00     645       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0A05 754D1F     645       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
0A08 754C40     645       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
0A0B            645       
0A0B            645       
0A0B D2A6       645       setb SPEAKER ;Turn on speaker
0A0D D28E       645       setb TR1 ;Start playback by enabling Timer1
0A0F            645       ;clr sound_flag ; sound ends
0A0F 020AB1     646           ljmp state_8_hop1
0A12            647   
0A12            648       play_7:
0A12 B40734     649           cjne a, #0x07, play_8
0A15            650       ; ***play audio***
0A15            650       ;cjne sound_flag, #0, $
0A15 121860     650       lcall Wait_Half_Second
0A18 C28E       650       clr TR1 ; Stop Timer 1 ISR from playing previous request
0A1A D2A5       650       setb FLASH_CE
0A1C            650       ;setb sound_flag ; sound starts
0A1C C2A6       650       clr SPEAKER ; Turn off speaker
0A1E C2A5       650       clr FLASH_CE ; Enable SPI Flash
0A20 7403       650       mov a, #READ_BYTES
0A22 12040D     650       lcall Send_SPI
0A25            650       ; Set the initial position in memory where to start playing
0A25            650       
0A25 7402       650       mov a, #0x02 ; change initial position
0A27 12040D     650       lcall Send_SPI
0A2A 7436       650       mov a, #0x36 ; next memory position
0A2C 12040D     650       lcall Send_SPI
0A2F 7468       650       mov a, #0x68 ; next memory position
0A31 12040D     650       lcall Send_SPI
0A34 7402       650       mov a, #0x02 ; request first byte to send to DAC
0A36 12040D     650       lcall Send_SPI
0A39            650       
0A39            650       ; How many bytes to play?
0A39 754E00     650       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0A3C 754D23     650       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
0A3F 754C28     650       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
0A42            650       
0A42            650       
0A42 D2A6       650       setb SPEAKER ;Turn on speaker
0A44 D28E       650       setb TR1 ;Start playback by enabling Timer1
0A46            650       ;clr sound_flag ; sound ends
0A46 020AB1     651           ljmp state_8_hop1
0A49            652   
0A49            653       play_8:
0A49 B40834     654           cjne a, #0x08, play_9
0A4C            655       ; ***play audio***
0A4C            655       ;cjne sound_flag, #0, $
0A4C 121860     655       lcall Wait_Half_Second
0A4F C28E       655       clr TR1 ; Stop Timer 1 ISR from playing previous request
0A51 D2A5       655       setb FLASH_CE
0A53            655       ;setb sound_flag ; sound starts
0A53 C2A6       655       clr SPEAKER ; Turn off speaker
0A55 C2A5       655       clr FLASH_CE ; Enable SPI Flash
0A57 7403       655       mov a, #READ_BYTES
0A59 12040D     655       lcall Send_SPI
0A5C            655       ; Set the initial position in memory where to start playing
0A5C            655       
0A5C 7402       655       mov a, #0x02 ; change initial position
0A5E 12040D     655       lcall Send_SPI
0A61 7457       655       mov a, #0x57 ; next memory position
0A63 12040D     655       lcall Send_SPI
0A66 749C       655       mov a, #0x9c ; next memory position
0A68 12040D     655       lcall Send_SPI
0A6B 7402       655       mov a, #0x02 ; request first byte to send to DAC
0A6D 12040D     655       lcall Send_SPI
0A70            655       
0A70            655       ; How many bytes to play?
0A70 754E00     655       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0A73 754D1B     655       mov w+1, #0x1b ; Load the middle byte of the number of bytes to play
0A76 754C58     655       mov w+0, #0x58 ; Load the low byte of the number of bytes to play
0A79            655       
0A79            655       
0A79 D2A6       655       setb SPEAKER ;Turn on speaker
0A7B D28E       655       setb TR1 ;Start playback by enabling Timer1
0A7D            655       ;clr sound_flag ; sound ends
0A7D 020AB1     656           ljmp state_8_hop1
0A80            657   
0A80            658       play_9:
0A80            659       ; ***play audio***
0A80            659       ;cjne sound_flag, #0, $
0A80 121860     659       lcall Wait_Half_Second
0A83 C28E       659       clr TR1 ; Stop Timer 1 ISR from playing previous request
0A85 D2A5       659       setb FLASH_CE
0A87            659       ;setb sound_flag ; sound starts
0A87 C2A6       659       clr SPEAKER ; Turn off speaker
0A89 C2A5       659       clr FLASH_CE ; Enable SPI Flash
0A8B 7403       659       mov a, #READ_BYTES
0A8D 12040D     659       lcall Send_SPI
0A90            659       ; Set the initial position in memory where to start playing
0A90            659       
0A90 7402       659       mov a, #0x02 ; change initial position
0A92 12040D     659       lcall Send_SPI
0A95 7469       659       mov a, #0x69 ; next memory position
0A97 12040D     659       lcall Send_SPI
0A9A 7430       659       mov a, #0x30 ; next memory position
0A9C 12040D     659       lcall Send_SPI
0A9F 7402       659       mov a, #0x02 ; request first byte to send to DAC
0AA1 12040D     659       lcall Send_SPI
0AA4            659       
0AA4            659       ; How many bytes to play?
0AA4 754E00     659       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0AA7 754D1F     659       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
0AAA 754C40     659       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
0AAD            659       
0AAD            659       
0AAD D2A6       659       setb SPEAKER ;Turn on speaker
0AAF D28E       659       setb TR1 ;Start playback by enabling Timer1
0AB1            659       ;clr sound_flag ; sound ends
0AB1            660   
0AB1            661   state_8_hop1:
0AB1            662   ; go to state_8_sound
0AB1 020CDF     663       ljmp state_8_sound
0AB4            664   
0AB4            665   
0AB4            666   state_7_sound:
0AB4            667   ; play 10 - 19
0AB4            668       ;ljmp PLAYBACK_TEMP
0AB4 75F064     669       mov b, #100
0AB7 E53B       670       mov a, Temp_oven
0AB9 84         671       div ab
0ABA E5F0       672       mov a, b
0ABC B40A34     673       cjne a, #0x0a, play_11
0ABF            674       
0ABF            675       ; ***play audio***
0ABF            675       ;cjne sound_flag, #0, $
0ABF 121860     675       lcall Wait_Half_Second
0AC2 C28E       675       clr TR1 ; Stop Timer 1 ISR from playing previous request
0AC4 D2A5       675       setb FLASH_CE
0AC6            675       ;setb sound_flag ; sound starts
0AC6 C2A6       675       clr SPEAKER ; Turn off speaker
0AC8 C2A5       675       clr FLASH_CE ; Enable SPI Flash
0ACA 7403       675       mov a, #READ_BYTES
0ACC 12040D     675       lcall Send_SPI
0ACF            675       ; Set the initial position in memory where to start playing
0ACF            675       
0ACF 7402       675       mov a, #0x02 ; change initial position
0AD1 12040D     675       lcall Send_SPI
0AD4 7484       675       mov a, #0x84 ; next memory position
0AD6 12040D     675       lcall Send_SPI
0AD9 7488       675       mov a, #0x88 ; next memory position
0ADB 12040D     675       lcall Send_SPI
0ADE 7402       675       mov a, #0x02 ; request first byte to send to DAC
0AE0 12040D     675       lcall Send_SPI
0AE3            675       
0AE3            675       ; How many bytes to play?
0AE3 754E00     675       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0AE6 754D17     675       mov w+1, #0x17 ; Load the middle byte of the number of bytes to play
0AE9 754C70     675       mov w+0, #0x70 ; Load the low byte of the number of bytes to play
0AEC            675       
0AEC            675       
0AEC D2A6       675       setb SPEAKER ;Turn on speaker
0AEE D28E       675       setb TR1 ;Start playback by enabling Timer1
0AF0            675       ;clr sound_flag ; sound ends
0AF0 020CDC     676       ljmp state_8_hop2
0AF3            677   
0AF3            678       play_11:
0AF3 B40B34     679           cjne a, #0x0b, play_12
0AF6            680       ; ***play audio***
0AF6            680       ;cjne sound_flag, #0, $
0AF6 121860     680       lcall Wait_Half_Second
0AF9 C28E       680       clr TR1 ; Stop Timer 1 ISR from playing previous request
0AFB D2A5       680       setb FLASH_CE
0AFD            680       ;setb sound_flag ; sound starts
0AFD C2A6       680       clr SPEAKER ; Turn off speaker
0AFF C2A5       680       clr FLASH_CE ; Enable SPI Flash
0B01 7403       680       mov a, #READ_BYTES
0B03 12040D     680       lcall Send_SPI
0B06            680       ; Set the initial position in memory where to start playing
0B06            680       
0B06 7402       680       mov a, #0x02 ; change initial position
0B08 12040D     680       lcall Send_SPI
0B0B 749B       680       mov a, #0x9b ; next memory position
0B0D 12040D     680       lcall Send_SPI
0B10 74F8       680       mov a, #0xf8 ; next memory position
0B12 12040D     680       lcall Send_SPI
0B15 7402       680       mov a, #0x02 ; request first byte to send to DAC
0B17 12040D     680       lcall Send_SPI
0B1A            680       
0B1A            680       ; How many bytes to play?
0B1A 754E00     680       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0B1D 754D1F     680       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
0B20 754C40     680       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
0B23            680       
0B23            680       
0B23 D2A6       680       setb SPEAKER ;Turn on speaker
0B25 D28E       680       setb TR1 ;Start playback by enabling Timer1
0B27            680       ;clr sound_flag ; sound ends
0B27 020CDC     681           ljmp state_8_hop2
0B2A            682   
0B2A            683       play_12:
0B2A B40C34     684           cjne a, #0x0c, play_13
0B2D            685       ; ***play audio***
0B2D            685       ;cjne sound_flag, #0, $
0B2D 121860     685       lcall Wait_Half_Second
0B30 C28E       685       clr TR1 ; Stop Timer 1 ISR from playing previous request
0B32 D2A5       685       setb FLASH_CE
0B34            685       ;setb sound_flag ; sound starts
0B34 C2A6       685       clr SPEAKER ; Turn off speaker
0B36 C2A5       685       clr FLASH_CE ; Enable SPI Flash
0B38 7403       685       mov a, #READ_BYTES
0B3A 12040D     685       lcall Send_SPI
0B3D            685       ; Set the initial position in memory where to start playing
0B3D            685       
0B3D 7402       685       mov a, #0x02 ; change initial position
0B3F 12040D     685       lcall Send_SPI
0B42 74B7       685       mov a, #0xb7 ; next memory position
0B44 12040D     685       lcall Send_SPI
0B47 7450       685       mov a, #0x50 ; next memory position
0B49 12040D     685       lcall Send_SPI
0B4C 7402       685       mov a, #0x02 ; request first byte to send to DAC
0B4E 12040D     685       lcall Send_SPI
0B51            685       
0B51            685       ; How many bytes to play?
0B51 754E00     685       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0B54 754D1F     685       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
0B57 754C40     685       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
0B5A            685       
0B5A            685       
0B5A D2A6       685       setb SPEAKER ;Turn on speaker
0B5C D28E       685       setb TR1 ;Start playback by enabling Timer1
0B5E            685       ;clr sound_flag ; sound ends
0B5E 020CDC     686           ljmp state_8_hop2
0B61            687   
0B61            688       play_13:
0B61 B40D34     689           cjne a, #0x0d, play_14
0B64            690       ; ***play audio***
0B64            690       ;cjne sound_flag, #0, $
0B64 121860     690       lcall Wait_Half_Second
0B67 C28E       690       clr TR1 ; Stop Timer 1 ISR from playing previous request
0B69 D2A5       690       setb FLASH_CE
0B6B            690       ;setb sound_flag ; sound starts
0B6B C2A6       690       clr SPEAKER ; Turn off speaker
0B6D C2A5       690       clr FLASH_CE ; Enable SPI Flash
0B6F 7403       690       mov a, #READ_BYTES
0B71 12040D     690       lcall Send_SPI
0B74            690       ; Set the initial position in memory where to start playing
0B74            690       
0B74 7402       690       mov a, #0x02 ; change initial position
0B76 12040D     690       lcall Send_SPI
0B79 74CE       690       mov a, #0xce ; next memory position
0B7B 12040D     690       lcall Send_SPI
0B7E 74C0       690       mov a, #0xc0 ; next memory position
0B80 12040D     690       lcall Send_SPI
0B83 7402       690       mov a, #0x02 ; request first byte to send to DAC
0B85 12040D     690       lcall Send_SPI
0B88            690       
0B88            690       ; How many bytes to play?
0B88 754E00     690       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0B8B 754D2E     690       mov w+1, #0x2e ; Load the middle byte of the number of bytes to play
0B8E 754CE0     690       mov w+0, #0xe0 ; Load the low byte of the number of bytes to play
0B91            690       
0B91            690       
0B91 D2A6       690       setb SPEAKER ;Turn on speaker
0B93 D28E       690       setb TR1 ;Start playback by enabling Timer1
0B95            690       ;clr sound_flag ; sound ends
0B95 020CDC     691           ljmp state_8_hop2
0B98            692   
0B98            693       play_14:
0B98 B40E34     694           cjne a, #0x0e, play_15
0B9B            695       ; ***play audio***
0B9B            695       ;cjne sound_flag, #0, $
0B9B 121860     695       lcall Wait_Half_Second
0B9E C28E       695       clr TR1 ; Stop Timer 1 ISR from playing previous request
0BA0 D2A5       695       setb FLASH_CE
0BA2            695       ;setb sound_flag ; sound starts
0BA2 C2A6       695       clr SPEAKER ; Turn off speaker
0BA4 C2A5       695       clr FLASH_CE ; Enable SPI Flash
0BA6 7403       695       mov a, #READ_BYTES
0BA8 12040D     695       lcall Send_SPI
0BAB            695       ; Set the initial position in memory where to start playing
0BAB            695       
0BAB 7402       695       mov a, #0x02 ; change initial position
0BAD 12040D     695       lcall Send_SPI
0BB0 74F5       695       mov a, #0xf5 ; next memory position
0BB2 12040D     695       lcall Send_SPI
0BB5 74D0       695       mov a, #0xd0 ; next memory position
0BB7 12040D     695       lcall Send_SPI
0BBA 7402       695       mov a, #0x02 ; request first byte to send to DAC
0BBC 12040D     695       lcall Send_SPI
0BBF            695       
0BBF            695       ; How many bytes to play?
0BBF 754E00     695       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0BC2 754D36     695       mov w+1, #0x36 ; Load the middle byte of the number of bytes to play
0BC5 754CB0     695       mov w+0, #0xb0 ; Load the low byte of the number of bytes to play
0BC8            695       
0BC8            695       
0BC8 D2A6       695       setb SPEAKER ;Turn on speaker
0BCA D28E       695       setb TR1 ;Start playback by enabling Timer1
0BCC            695       ;clr sound_flag ; sound ends
0BCC 020CDC     696           ljmp state_8_hop2
0BCF            697   
0BCF            698       play_15:
0BCF B40F34     699           cjne a, #0x0f, play_16
0BD2            700       ; ***play audio***
0BD2            700       ;cjne sound_flag, #0, $
0BD2 121860     700       lcall Wait_Half_Second
0BD5 C28E       700       clr TR1 ; Stop Timer 1 ISR from playing previous request
0BD7 D2A5       700       setb FLASH_CE
0BD9            700       ;setb sound_flag ; sound starts
0BD9 C2A6       700       clr SPEAKER ; Turn off speaker
0BDB C2A5       700       clr FLASH_CE ; Enable SPI Flash
0BDD 7403       700       mov a, #READ_BYTES
0BDF 12040D     700       lcall Send_SPI
0BE2            700       ; Set the initial position in memory where to start playing
0BE2            700       
0BE2 7403       700       mov a, #0x03 ; change initial position
0BE4 12040D     700       lcall Send_SPI
0BE7 7428       700       mov a, #0x28 ; next memory position
0BE9 12040D     700       lcall Send_SPI
0BEC 7498       700       mov a, #0x98 ; next memory position
0BEE 12040D     700       lcall Send_SPI
0BF1 7403       700       mov a, #0x03 ; request first byte to send to DAC
0BF3 12040D     700       lcall Send_SPI
0BF6            700       
0BF6            700       ; How many bytes to play?
0BF6 754E00     700       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0BF9 754D23     700       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
0BFC 754C28     700       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
0BFF            700       
0BFF            700       
0BFF D2A6       700       setb SPEAKER ;Turn on speaker
0C01 D28E       700       setb TR1 ;Start playback by enabling Timer1
0C03            700       ;clr sound_flag ; sound ends
0C03 020CDC     701           ljmp state_8_hop2
0C06            702   
0C06            703       play_16:
0C06 B41034     704           cjne a, #0x10, play_17
0C09            705       ; ***play audio***
0C09            705       ;cjne sound_flag, #0, $
0C09 121860     705       lcall Wait_Half_Second
0C0C C28E       705       clr TR1 ; Stop Timer 1 ISR from playing previous request
0C0E D2A5       705       setb FLASH_CE
0C10            705       ;setb sound_flag ; sound starts
0C10 C2A6       705       clr SPEAKER ; Turn off speaker
0C12 C2A5       705       clr FLASH_CE ; Enable SPI Flash
0C14 7403       705       mov a, #READ_BYTES
0C16 12040D     705       lcall Send_SPI
0C19            705       ; Set the initial position in memory where to start playing
0C19            705       
0C19 7403       705       mov a, #0x03 ; change initial position
0C1B 12040D     705       lcall Send_SPI
0C1E 7447       705       mov a, #0x47 ; next memory position
0C20 12040D     705       lcall Send_SPI
0C23 74D8       705       mov a, #0xd8 ; next memory position
0C25 12040D     705       lcall Send_SPI
0C28 7403       705       mov a, #0x03 ; request first byte to send to DAC
0C2A 12040D     705       lcall Send_SPI
0C2D            705       
0C2D            705       ; How many bytes to play?
0C2D 754E00     705       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0C30 754D32     705       mov w+1, #0x32 ; Load the middle byte of the number of bytes to play
0C33 754CC8     705       mov w+0, #0xc8 ; Load the low byte of the number of bytes to play
0C36            705       
0C36            705       
0C36 D2A6       705       setb SPEAKER ;Turn on speaker
0C38 D28E       705       setb TR1 ;Start playback by enabling Timer1
0C3A            705       ;clr sound_flag ; sound ends
0C3A 020CDC     706           ljmp state_8_hop2
0C3D            707   
0C3D            708       play_17:
0C3D B41134     709           cjne a, #0x11, play_18
0C40            710       ; ***play audio***
0C40            710       ;cjne sound_flag, #0, $
0C40 121860     710       lcall Wait_Half_Second
0C43 C28E       710       clr TR1 ; Stop Timer 1 ISR from playing previous request
0C45 D2A5       710       setb FLASH_CE
0C47            710       ;setb sound_flag ; sound starts
0C47 C2A6       710       clr SPEAKER ; Turn off speaker
0C49 C2A5       710       clr FLASH_CE ; Enable SPI Flash
0C4B 7403       710       mov a, #READ_BYTES
0C4D 12040D     710       lcall Send_SPI
0C50            710       ; Set the initial position in memory where to start playing
0C50            710       
0C50 7403       710       mov a, #0x03 ; change initial position
0C52 12040D     710       lcall Send_SPI
0C55 7476       710       mov a, #0x76 ; next memory position
0C57 12040D     710       lcall Send_SPI
0C5A 74B8       710       mov a, #0xb8 ; next memory position
0C5C 12040D     710       lcall Send_SPI
0C5F 7403       710       mov a, #0x03 ; request first byte to send to DAC
0C61 12040D     710       lcall Send_SPI
0C64            710       
0C64            710       ; How many bytes to play?
0C64 754E00     710       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0C67 754D2E     710       mov w+1, #0x2e ; Load the middle byte of the number of bytes to play
0C6A 754C20     710       mov w+0, #0x20 ; Load the low byte of the number of bytes to play
0C6D            710       
0C6D            710       
0C6D D2A6       710       setb SPEAKER ;Turn on speaker
0C6F D28E       710       setb TR1 ;Start playback by enabling Timer1
0C71            710       ;clr sound_flag ; sound ends
0C71 020CDC     711           ljmp state_8_hop2
0C74            712   
0C74            713       play_18:
0C74 B41234     714           cjne a, #0x12, play_19
0C77            715       ; ***play audio***
0C77            715       ;cjne sound_flag, #0, $
0C77 121860     715       lcall Wait_Half_Second
0C7A C28E       715       clr TR1 ; Stop Timer 1 ISR from playing previous request
0C7C D2A5       715       setb FLASH_CE
0C7E            715       ;setb sound_flag ; sound starts
0C7E C2A6       715       clr SPEAKER ; Turn off speaker
0C80 C2A5       715       clr FLASH_CE ; Enable SPI Flash
0C82 7403       715       mov a, #READ_BYTES
0C84 12040D     715       lcall Send_SPI
0C87            715       ; Set the initial position in memory where to start playing
0C87            715       
0C87 7403       715       mov a, #0x03 ; change initial position
0C89 12040D     715       lcall Send_SPI
0C8C 74A1       715       mov a, #0xa1 ; next memory position
0C8E 12040D     715       lcall Send_SPI
0C91 74B0       715       mov a, #0xb0 ; next memory position
0C93 12040D     715       lcall Send_SPI
0C96 7403       715       mov a, #0x03 ; request first byte to send to DAC
0C98 12040D     715       lcall Send_SPI
0C9B            715       
0C9B            715       ; How many bytes to play?
0C9B 754E00     715       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0C9E 754D27     715       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
0CA1 754C10     715       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
0CA4            715       
0CA4            715       
0CA4 D2A6       715       setb SPEAKER ;Turn on speaker
0CA6 D28E       715       setb TR1 ;Start playback by enabling Timer1
0CA8            715       ;clr sound_flag ; sound ends
0CA8 020CDC     716           ljmp state_8_hop2
0CAB            717   
0CAB            718       play_19:
0CAB            719       ; ***play audio***
0CAB            719       ;cjne sound_flag, #0, $
0CAB 121860     719       lcall Wait_Half_Second
0CAE C28E       719       clr TR1 ; Stop Timer 1 ISR from playing previous request
0CB0 D2A5       719       setb FLASH_CE
0CB2            719       ;setb sound_flag ; sound starts
0CB2 C2A6       719       clr SPEAKER ; Turn off speaker
0CB4 C2A5       719       clr FLASH_CE ; Enable SPI Flash
0CB6 7403       719       mov a, #READ_BYTES
0CB8 12040D     719       lcall Send_SPI
0CBB            719       ; Set the initial position in memory where to start playing
0CBB            719       
0CBB 7403       719       mov a, #0x03 ; change initial position
0CBD 12040D     719       lcall Send_SPI
0CC0 74C8       719       mov a, #0xc8 ; next memory position
0CC2 12040D     719       lcall Send_SPI
0CC5 74C0       719       mov a, #0xc0 ; next memory position
0CC7 12040D     719       lcall Send_SPI
0CCA 7403       719       mov a, #0x03 ; request first byte to send to DAC
0CCC 12040D     719       lcall Send_SPI
0CCF            719       
0CCF            719       ; How many bytes to play?
0CCF 754E00     719       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0CD2 754D27     719       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
0CD5 754C10     719       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
0CD8            719       
0CD8            719       
0CD8 D2A6       719       setb SPEAKER ;Turn on speaker
0CDA D28E       719       setb TR1 ;Start playback by enabling Timer1
0CDC            719       ;clr sound_flag ; sound ends
0CDC            720   
0CDC            721       state_8_hop2:
0CDC            722       ; go to state_8_sound
0CDC 020CDF     723           ljmp state_8_sound
0CDF            724   
0CDF            725   state_8_sound:
0CDF            726   ; go to state_0_sound
0CDF 0205B9     727       ljmp Sound_ret
0CE2            728   
0CE2            729   ;****SPANISH SOUND FSM--------------------------------------------------------
0CE2            730   SOUND_FSM_S:
0CE2            731   state_0_sound_S:
0CE2            732   ;check if 5 seconds has passed, if yes go to state 1, if no exit function 
0CE2 300104     733       jnb five_seconds_flag, Sound_ret_S
0CE5 C201       734       clr five_seconds_flag
0CE7 8001       735       sjmp state_1_sound_S
0CE9            736   Sound_ret_S:
0CE9 22         737       ret
0CEA            738   
0CEA            739   state_1_sound_S:
0CEA            740   ; check if temp is greater than or equal to 100, if yes go to state 2
0CEA            741   ; check if temp is less than 100, if yes go to state 4
0CEA E53B       742       mov a, Temp_oven
0CEC 9464       743       subb a, #100
0CEE 5002       744       jnc state_2_sound_hop_S
0CF0 4002       745       jc state_4_sound_hop_S
0CF2            746   
0CF2            747       state_2_sound_hop_S:
0CF2 8003       748           sjmp state_2_sound_S
0CF4            749   
0CF4            750       state_4_sound_hop_S:
0CF4 020DF0     751           ljmp state_4_sound_S
0CF7            752   
0CF7            753   state_2_sound_S:
0CF7            754   ;divide temp by 100, if it is 1 play sound: "100", if it is 2 play sound: "200"
0CF7            755   ; go to state_3_sound
0CF7 75F064     756       mov b, #100
0CFA E53B       757       mov a, Temp_oven
0CFC 84         758       div ab
0CFD 9401       759       subb a, #1
0CFF 600A       760       jz play_sound_100_S
0D01            761   
0D01 75F064     762       mov b, #100
0D04 E53B       763       mov a, Temp_oven
0D06 84         764       div ab
0D07 9402       765       subb a, #2
0D09 6065       766       jz play_sound_200_S
0D0B            767      
0D0B            768       play_sound_100_S: 
0D0B            769       ; ***play audio***
0D0B            769       ;cjne sound_flag, #0, $
0D0B 121860     769       lcall Wait_Half_Second
0D0E C28E       769       clr TR1 ; Stop Timer 1 ISR from playing previous request
0D10 D2A5       769       setb FLASH_CE
0D12            769       ;setb sound_flag ; sound starts
0D12 C2A6       769       clr SPEAKER ; Turn off speaker
0D14 C2A5       769       clr FLASH_CE ; Enable SPI Flash
0D16 7403       769       mov a, #READ_BYTES
0D18 12040D     769       lcall Send_SPI
0D1B            769       ; Set the initial position in memory where to start playing
0D1B            769       
0D1B 7401       769       mov a, #0x01 ; change initial position
0D1D 12040D     769       lcall Send_SPI
0D20 7493       769       mov a, #0x93 ; next memory position
0D22 12040D     769       lcall Send_SPI
0D25 7484       769       mov a, #0x84 ; next memory position
0D27 12040D     769       lcall Send_SPI
0D2A 7401       769       mov a, #0x01 ; request first byte to send to DAC
0D2C 12040D     769       lcall Send_SPI
0D2F            769       
0D2F            769       ; How many bytes to play?
0D2F 754E00     769       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0D32 754D36     769       mov w+1, #0x36 ; Load the middle byte of the number of bytes to play
0D35 754CB0     769       mov w+0, #0xb0 ; Load the low byte of the number of bytes to play
0D38            769       
0D38            769       
0D38 D2A6       769       setb SPEAKER ;Turn on speaker
0D3A D28E       769       setb TR1 ;Start playback by enabling Timer1
0D3C            769       ;clr sound_flag ; sound ends ;one
0D3C            770       ; ***play audio***
0D3C            770       ;cjne sound_flag, #0, $
0D3C 121860     770       lcall Wait_Half_Second
0D3F C28E       770       clr TR1 ; Stop Timer 1 ISR from playing previous request
0D41 D2A5       770       setb FLASH_CE
0D43            770       ;setb sound_flag ; sound starts
0D43 C2A6       770       clr SPEAKER ; Turn off speaker
0D45 C2A5       770       clr FLASH_CE ; Enable SPI Flash
0D47 7403       770       mov a, #READ_BYTES
0D49 12040D     770       lcall Send_SPI
0D4C            770       ; Set the initial position in memory where to start playing
0D4C            770       
0D4C 7405       770       mov a, #0x05 ; change initial position
0D4E 12040D     770       lcall Send_SPI
0D51 7409       770       mov a, #0x09 ; next memory position
0D53 12040D     770       lcall Send_SPI
0D56 7410       770       mov a, #0x10 ; next memory position
0D58 12040D     770       lcall Send_SPI
0D5B 7405       770       mov a, #0x05 ; request first byte to send to DAC
0D5D 12040D     770       lcall Send_SPI
0D60            770       
0D60            770       ; How many bytes to play?
0D60 754E00     770       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0D63 754D27     770       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
0D66 754C10     770       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
0D69            770       
0D69            770       
0D69 D2A6       770       setb SPEAKER ;Turn on speaker
0D6B D28E       770       setb TR1 ;Start playback by enabling Timer1
0D6D            770       ;clr sound_flag ; sound ends ;hundred
0D6D 020DD5     771           ljmp state_3_sound_S
0D70            772   
0D70            773       play_sound_200_S:
0D70            774       ; ***play audio***
0D70            774       ;cjne sound_flag, #0, $
0D70 121860     774       lcall Wait_Half_Second
0D73 C28E       774       clr TR1 ; Stop Timer 1 ISR from playing previous request
0D75 D2A5       774       setb FLASH_CE
0D77            774       ;setb sound_flag ; sound starts
0D77 C2A6       774       clr SPEAKER ; Turn off speaker
0D79 C2A5       774       clr FLASH_CE ; Enable SPI Flash
0D7B 7403       774       mov a, #READ_BYTES
0D7D 12040D     774       lcall Send_SPI
0D80            774       ; Set the initial position in memory where to start playing
0D80            774       
0D80 7401       774       mov a, #0x01 ; change initial position
0D82 12040D     774       lcall Send_SPI
0D85 74C7       774       mov a, #0xc7 ; next memory position
0D87 12040D     774       lcall Send_SPI
0D8A 7414       774       mov a, #0x14 ; next memory position
0D8C 12040D     774       lcall Send_SPI
0D8F 7401       774       mov a, #0x01 ; request first byte to send to DAC
0D91 12040D     774       lcall Send_SPI
0D94            774       
0D94            774       ; How many bytes to play?
0D94 754E00     774       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0D97 754D13     774       mov w+1, #0x13 ; Load the middle byte of the number of bytes to play
0D9A 754C88     774       mov w+0, #0x88 ; Load the low byte of the number of bytes to play
0D9D            774       
0D9D            774       
0D9D D2A6       774       setb SPEAKER ;Turn on speaker
0D9F D28E       774       setb TR1 ;Start playback by enabling Timer1
0DA1            774       ;clr sound_flag ; sound ends ;two
0DA1            775       ; ***play audio***
0DA1            775       ;cjne sound_flag, #0, $
0DA1 121860     775       lcall Wait_Half_Second
0DA4 C28E       775       clr TR1 ; Stop Timer 1 ISR from playing previous request
0DA6 D2A5       775       setb FLASH_CE
0DA8            775       ;setb sound_flag ; sound starts
0DA8 C2A6       775       clr SPEAKER ; Turn off speaker
0DAA C2A5       775       clr FLASH_CE ; Enable SPI Flash
0DAC 7403       775       mov a, #READ_BYTES
0DAE 12040D     775       lcall Send_SPI
0DB1            775       ; Set the initial position in memory where to start playing
0DB1            775       
0DB1 7405       775       mov a, #0x05 ; change initial position
0DB3 12040D     775       lcall Send_SPI
0DB6 7409       775       mov a, #0x09 ; next memory position
0DB8 12040D     775       lcall Send_SPI
0DBB 7410       775       mov a, #0x10 ; next memory position
0DBD 12040D     775       lcall Send_SPI
0DC0 7405       775       mov a, #0x05 ; request first byte to send to DAC
0DC2 12040D     775       lcall Send_SPI
0DC5            775       
0DC5            775       ; How many bytes to play?
0DC5 754E00     775       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0DC8 754D27     775       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
0DCB 754C10     775       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
0DCE            775       
0DCE            775       
0DCE D2A6       775       setb SPEAKER ;Turn on speaker
0DD0 D28E       775       setb TR1 ;Start playback by enabling Timer1
0DD2            775       ;clr sound_flag ; sound ends ;hundred
0DD2 020DD5     776           ljmp state_3_sound_S
0DD5            777   
0DD5            778   state_3_sound_S:
0DD5            779   ; check remainder of temp, if it is 0, exit
0DD5            780   ; if not 0, go to state_4_sound
0DD5            781   
0DD5            782   
0DD5 75F064     783       mov b, #100
0DD8 E53B       784       mov a, Temp_oven
0DDA 95F0       785       subb a, b
0DDC E5F0       786       mov a, b
0DDE 600D       787       jz state_3_sound_hop_S
0DE0            788       
0DE0 75F0C8     789       mov b, #200
0DE3 E53B       790       mov a, Temp_oven
0DE5 95F0       791       subb a, b
0DE7 E5F0       792       mov a, b
0DE9 6002       793       jz state_3_sound_hop_S
0DEB            794   
0DEB 8003       795       sjmp state_4_sound_S
0DED            796   
0DED            797       state_3_sound_hop_S:
0DED 020CE9     798           ljmp Sound_ret_S
0DF0            799   
0DF0            800   state_4_sound_S:
0DF0            801   ; if T % 100 greater or equal to 20, go to state_5_sound,
0DF0 75F064     802       mov b, #100
0DF3 E53B       803       mov a, Temp_oven
0DF5 84         804       div ab
0DF6            805       ;mov R0, b
0DF6 E5F0       806       mov a, b 
0DF8            807   
0DF8            808   
0DF8 9414       809       subb a, #20
0DFA 5027       810       jnc state_5_sound_S
0DFC 6025       811       jz state_5_sound_S
0DFE E4         812       clr a
0DFF            813   ; if T % 100 is less than 10, go to state_6_sound
0DFF 75F064     814       mov b, #100
0E02 E53B       815       mov a, Temp_oven
0E04 84         816       div ab
0E05 E5F0       817       mov a, b
0E07 940A       818       subb a, #10
0E09 4015       819       jc state_6_sound_hop0_S
0E0B            820       
0E0B            821       ;mov a, b
0E0B            822       
0E0B            823       ; ubb a, #0
0E0B            824       ;jc state_6_sound_hop0
0E0B            825       ;clr a
0E0B            826   ; if T % 100 is greater than or equal to 10 and less than 20, go to state_7_sound
0E0B            827   
0E0B 75F064     828       mov b, #100
0E0E E53B       829       mov a, Temp_oven
0E10 84         830       div ab
0E11 E5F0       831       mov a, b
0E13 940A       832       subb a, #10
0E15 6000       833       jz and_branch_S
0E17            834   
0E17            835       and_branch_S:
0E17 E5F0       836           mov a, b
0E19 9414       837           subb a, #20
0E1B 4000       838           jc state_7_sound_hop0_S
0E1D            839       
0E1D            840       state_7_sound_hop0_S:
0E1D 0211E4     841           ljmp state_7_sound_S
0E20            842   
0E20            843       state_6_sound_hop0_S:
0E20 020FE4     844           ljmp state_6_sound_S
0E23            845       
0E23            846   
0E23            847   state_5_sound_S:
0E23            848   ; play number from 20 to 90 in decades (20, 30, 40, 50, 60, 70, 80, 90), based off remainder from temp divided by 100
0E23            849   ; if (T % 100) % 10 is not equal to 0, go to state_6_sound
0E23            850   ; if (T % 100) % 10 is equal to 0, go to state_8_sound
0E23            851   
0E23            852       play_sound_S:
0E23            853           ;ljmp PLAYBACK_TEMP
0E23 E53B       854           mov a, Temp_oven
0E25 75F064     855           mov b, #100
0E28 84         856           div ab
0E29 E5F0       857           mov a, b
0E2B 75F00A     858           mov b, #10
0E2E 84         859           div ab
0E2F B40234     860           cjne a, #2, play_30_S
0E32            861           ;mov    
0E32            862   
0E32            863           play_20_S:
0E32            864       ; ***play audio***
0E32            864       ;cjne sound_flag, #0, $
0E32 121860     864       lcall Wait_Half_Second
0E35 C28E       864       clr TR1 ; Stop Timer 1 ISR from playing previous request
0E37 D2A5       864       setb FLASH_CE
0E39            864       ;setb sound_flag ; sound starts
0E39 C2A6       864       clr SPEAKER ; Turn off speaker
0E3B C2A5       864       clr FLASH_CE ; Enable SPI Flash
0E3D 7403       864       mov a, #READ_BYTES
0E3F 12040D     864       lcall Send_SPI
0E42            864       ; Set the initial position in memory where to start playing
0E42            864       
0E42 7403       864       mov a, #0x03 ; change initial position
0E44 12040D     864       lcall Send_SPI
0E47 74EF       864       mov a, #0xef ; next memory position
0E49 12040D     864       lcall Send_SPI
0E4C 74D0       864       mov a, #0xd0 ; next memory position
0E4E 12040D     864       lcall Send_SPI
0E51 7403       864       mov a, #0x03 ; request first byte to send to DAC
0E53 12040D     864       lcall Send_SPI
0E56            864       
0E56            864       ; How many bytes to play?
0E56 754E00     864       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0E59 754D27     864       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
0E5C 754C10     864       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
0E5F            864       
0E5F            864       
0E5F D2A6       864       setb SPEAKER ;Turn on speaker
0E61 D28E       864       setb TR1 ;Start playback by enabling Timer1
0E63            864       ;clr sound_flag ; sound ends
0E63            865               ;lcall Wait_One_Second
0E63 020FE1     866               ljmp state_6_sound_hop1_S
0E66            867   
0E66            868           play_30_S:
0E66            869               
0E66 B40334     870               cjne a, #3, play_40_S   
0E69            871       ; ***play audio***
0E69            871       ;cjne sound_flag, #0, $
0E69 121860     871       lcall Wait_Half_Second
0E6C C28E       871       clr TR1 ; Stop Timer 1 ISR from playing previous request
0E6E D2A5       871       setb FLASH_CE
0E70            871       ;setb sound_flag ; sound starts
0E70 C2A6       871       clr SPEAKER ; Turn off speaker
0E72 C2A5       871       clr FLASH_CE ; Enable SPI Flash
0E74 7403       871       mov a, #READ_BYTES
0E76 12040D     871       lcall Send_SPI
0E79            871       ; Set the initial position in memory where to start playing
0E79            871       
0E79 7404       871       mov a, #0x04 ; change initial position
0E7B 12040D     871       lcall Send_SPI
0E7E 7416       871       mov a, #0x16 ; next memory position
0E80 12040D     871       lcall Send_SPI
0E83 74E0       871       mov a, #0xe0 ; next memory position
0E85 12040D     871       lcall Send_SPI
0E88 7404       871       mov a, #0x04 ; request first byte to send to DAC
0E8A 12040D     871       lcall Send_SPI
0E8D            871       
0E8D            871       ; How many bytes to play?
0E8D 754E00     871       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0E90 754D23     871       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
0E93 754C28     871       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
0E96            871       
0E96            871       
0E96 D2A6       871       setb SPEAKER ;Turn on speaker
0E98 D28E       871       setb TR1 ;Start playback by enabling Timer1
0E9A            871       ;clr sound_flag ; sound ends
0E9A 020FE1     872               ljmp state_6_sound_hop1_S
0E9D            873   
0E9D            874           play_40_S:
0E9D            875               
0E9D B40434     876               cjne a, #4, play_50_S 
0EA0            877       ; ***play audio***
0EA0            877       ;cjne sound_flag, #0, $
0EA0 121860     877       lcall Wait_Half_Second
0EA3 C28E       877       clr TR1 ; Stop Timer 1 ISR from playing previous request
0EA5 D2A5       877       setb FLASH_CE
0EA7            877       ;setb sound_flag ; sound starts
0EA7 C2A6       877       clr SPEAKER ; Turn off speaker
0EA9 C2A5       877       clr FLASH_CE ; Enable SPI Flash
0EAB 7403       877       mov a, #READ_BYTES
0EAD 12040D     877       lcall Send_SPI
0EB0            877       ; Set the initial position in memory where to start playing
0EB0            877       
0EB0 7404       877       mov a, #0x04 ; change initial position
0EB2 12040D     877       lcall Send_SPI
0EB5 743D       877       mov a, #0x3d ; next memory position
0EB7 12040D     877       lcall Send_SPI
0EBA 74F0       877       mov a, #0xf0 ; next memory position
0EBC 12040D     877       lcall Send_SPI
0EBF 7404       877       mov a, #0x04 ; request first byte to send to DAC
0EC1 12040D     877       lcall Send_SPI
0EC4            877       
0EC4            877       ; How many bytes to play?
0EC4 754E00     877       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0EC7 754D1F     877       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
0ECA 754C40     877       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
0ECD            877       
0ECD            877       
0ECD D2A6       877       setb SPEAKER ;Turn on speaker
0ECF D28E       877       setb TR1 ;Start playback by enabling Timer1
0ED1            877       ;clr sound_flag ; sound ends
0ED1 020FE1     878               ljmp state_6_sound_hop1_S
0ED4            879   
0ED4            880           play_50_S:
0ED4            881              
0ED4 B40534     882               cjne a, #5, play_60_S  
0ED7            883       ; ***play audio***
0ED7            883       ;cjne sound_flag, #0, $
0ED7 121860     883       lcall Wait_Half_Second
0EDA C28E       883       clr TR1 ; Stop Timer 1 ISR from playing previous request
0EDC D2A5       883       setb FLASH_CE
0EDE            883       ;setb sound_flag ; sound starts
0EDE C2A6       883       clr SPEAKER ; Turn off speaker
0EE0 C2A5       883       clr FLASH_CE ; Enable SPI Flash
0EE2 7403       883       mov a, #READ_BYTES
0EE4 12040D     883       lcall Send_SPI
0EE7            883       ; Set the initial position in memory where to start playing
0EE7            883       
0EE7 7404       883       mov a, #0x04 ; change initial position
0EE9 12040D     883       lcall Send_SPI
0EEC 7451       883       mov a, #0x51 ; next memory position
0EEE 12040D     883       lcall Send_SPI
0EF1 7478       883       mov a, #0x78 ; next memory position
0EF3 12040D     883       lcall Send_SPI
0EF6 7404       883       mov a, #0x04 ; request first byte to send to DAC
0EF8 12040D     883       lcall Send_SPI
0EFB            883       
0EFB            883       ; How many bytes to play?
0EFB 754E00     883       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0EFE 754D23     883       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
0F01 754C28     883       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
0F04            883       
0F04            883       
0F04 D2A6       883       setb SPEAKER ;Turn on speaker
0F06 D28E       883       setb TR1 ;Start playback by enabling Timer1
0F08            883       ;clr sound_flag ; sound ends
0F08 020FE1     884               ljmp state_6_sound_hop1_S
0F0B            885   
0F0B            886           play_60_S:
0F0B            887               
0F0B B40634     888               cjne a, #6, play_70_S  
0F0E            889       ; ***play audio***
0F0E            889       ;cjne sound_flag, #0, $
0F0E 121860     889       lcall Wait_Half_Second
0F11 C28E       889       clr TR1 ; Stop Timer 1 ISR from playing previous request
0F13 D2A5       889       setb FLASH_CE
0F15            889       ;setb sound_flag ; sound starts
0F15 C2A6       889       clr SPEAKER ; Turn off speaker
0F17 C2A5       889       clr FLASH_CE ; Enable SPI Flash
0F19 7403       889       mov a, #READ_BYTES
0F1B 12040D     889       lcall Send_SPI
0F1E            889       ; Set the initial position in memory where to start playing
0F1E            889       
0F1E 7404       889       mov a, #0x04 ; change initial position
0F20 12040D     889       lcall Send_SPI
0F23 7474       889       mov a, #0x74 ; next memory position
0F25 12040D     889       lcall Send_SPI
0F28 74A0       889       mov a, #0xa0 ; next memory position
0F2A 12040D     889       lcall Send_SPI
0F2D 7404       889       mov a, #0x04 ; request first byte to send to DAC
0F2F 12040D     889       lcall Send_SPI
0F32            889       
0F32            889       ; How many bytes to play?
0F32 754E00     889       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0F35 754D27     889       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
0F38 754C10     889       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
0F3B            889       
0F3B            889       
0F3B D2A6       889       setb SPEAKER ;Turn on speaker
0F3D D28E       889       setb TR1 ;Start playback by enabling Timer1
0F3F            889       ;clr sound_flag ; sound ends
0F3F 020FE1     890               ljmp state_6_sound_hop1_S
0F42            891   
0F42            892           play_70_S:
0F42            893              
0F42 B40734     894               cjne a, #7, play_80_S  
0F45            895       ; ***play audio***
0F45            895       ;cjne sound_flag, #0, $
0F45 121860     895       lcall Wait_Half_Second
0F48 C28E       895       clr TR1 ; Stop Timer 1 ISR from playing previous request
0F4A D2A5       895       setb FLASH_CE
0F4C            895       ;setb sound_flag ; sound starts
0F4C C2A6       895       clr SPEAKER ; Turn off speaker
0F4E C2A5       895       clr FLASH_CE ; Enable SPI Flash
0F50 7403       895       mov a, #READ_BYTES
0F52 12040D     895       lcall Send_SPI
0F55            895       ; Set the initial position in memory where to start playing
0F55            895       
0F55 7404       895       mov a, #0x04 ; change initial position
0F57 12040D     895       lcall Send_SPI
0F5A 749B       895       mov a, #0x9b ; next memory position
0F5C 12040D     895       lcall Send_SPI
0F5F 74B0       895       mov a, #0xb0 ; next memory position
0F61 12040D     895       lcall Send_SPI
0F64 7404       895       mov a, #0x04 ; request first byte to send to DAC
0F66 12040D     895       lcall Send_SPI
0F69            895       
0F69            895       ; How many bytes to play?
0F69 754E00     895       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0F6C 754D32     895       mov w+1, #0x32 ; Load the middle byte of the number of bytes to play
0F6F 754CC8     895       mov w+0, #0xc8 ; Load the low byte of the number of bytes to play
0F72            895       
0F72            895       
0F72 D2A6       895       setb SPEAKER ;Turn on speaker
0F74 D28E       895       setb TR1 ;Start playback by enabling Timer1
0F76            895       ;clr sound_flag ; sound ends
0F76 020FE1     896               ljmp state_6_sound_hop1_S
0F79            897   
0F79            898           play_80_S:
0F79            899               
0F79 B40834     900               cjne a, #8, play_90_S  
0F7C            901       ; ***play audio***
0F7C            901       ;cjne sound_flag, #0, $
0F7C 121860     901       lcall Wait_Half_Second
0F7F C28E       901       clr TR1 ; Stop Timer 1 ISR from playing previous request
0F81 D2A5       901       setb FLASH_CE
0F83            901       ;setb sound_flag ; sound starts
0F83 C2A6       901       clr SPEAKER ; Turn off speaker
0F85 C2A5       901       clr FLASH_CE ; Enable SPI Flash
0F87 7403       901       mov a, #READ_BYTES
0F89 12040D     901       lcall Send_SPI
0F8C            901       ; Set the initial position in memory where to start playing
0F8C            901       
0F8C 7404       901       mov a, #0x04 ; change initial position
0F8E 12040D     901       lcall Send_SPI
0F91 74C6       901       mov a, #0xc6 ; next memory position
0F93 12040D     901       lcall Send_SPI
0F96 74A8       901       mov a, #0xa8 ; next memory position
0F98 12040D     901       lcall Send_SPI
0F9B 7404       901       mov a, #0x04 ; request first byte to send to DAC
0F9D 12040D     901       lcall Send_SPI
0FA0            901       
0FA0            901       ; How many bytes to play?
0FA0 754E00     901       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0FA3 754D23     901       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
0FA6 754C28     901       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
0FA9            901       
0FA9            901       
0FA9 D2A6       901       setb SPEAKER ;Turn on speaker
0FAB D28E       901       setb TR1 ;Start playback by enabling Timer1
0FAD            901       ;clr sound_flag ; sound ends
0FAD 020FE1     902               ljmp state_6_sound_hop1_S
0FB0            903   
0FB0            904           play_90_S:
0FB0            905       ; ***play audio***
0FB0            905       ;cjne sound_flag, #0, $
0FB0 121860     905       lcall Wait_Half_Second
0FB3 C28E       905       clr TR1 ; Stop Timer 1 ISR from playing previous request
0FB5 D2A5       905       setb FLASH_CE
0FB7            905       ;setb sound_flag ; sound starts
0FB7 C2A6       905       clr SPEAKER ; Turn off speaker
0FB9 C2A5       905       clr FLASH_CE ; Enable SPI Flash
0FBB 7403       905       mov a, #READ_BYTES
0FBD 12040D     905       lcall Send_SPI
0FC0            905       ; Set the initial position in memory where to start playing
0FC0            905       
0FC0 7404       905       mov a, #0x04 ; change initial position
0FC2 12040D     905       lcall Send_SPI
0FC5 74ED       905       mov a, #0xed ; next memory position
0FC7 12040D     905       lcall Send_SPI
0FCA 74B8       905       mov a, #0xb8 ; next memory position
0FCC 12040D     905       lcall Send_SPI
0FCF 7404       905       mov a, #0x04 ; request first byte to send to DAC
0FD1 12040D     905       lcall Send_SPI
0FD4            905       
0FD4            905       ; How many bytes to play?
0FD4 754E00     905       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0FD7 754D1F     905       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
0FDA 754C40     905       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
0FDD            905       
0FDD            905       
0FDD D2A6       905       setb SPEAKER ;Turn on speaker
0FDF D28E       905       setb TR1 ;Start playback by enabling Timer1
0FE1            905       ;clr sound_flag ; sound ends
0FE1            906   
0FE1            907   
0FE1            908   
0FE1            909   
0FE1            910       state_6_sound_hop1_S:
0FE1 020FE4     911           ljmp state_6_sound_S
0FE4            912           
0FE4            913       ;state_8_hop0:
0FE4            914           ;ljmp state_6_sound ;state_8_sound
0FE4            915   
0FE4            916   
0FE4            917   state_6_sound_S:
0FE4            918   ; play 1 - 9
0FE4            919       ;ljmp PLAYBACK_TEMP
0FE4 75F064     920       mov b, #100
0FE7 E53B       921       mov a, Temp_oven
0FE9 84         922       div ab
0FEA E5F0       923       mov a, b
0FEC 75F00A     924       mov b, #10
0FEF 84         925       div ab
0FF0 E5F0       926       mov a, b
0FF2            927       
0FF2 B40003     928       cjne a, #0x00, play_1_S
0FF5 0211E1     929       ljmp state_8_hop1_S
0FF8            930   
0FF8            931       play_1_S:
0FF8 B40134     932           cjne a, #0x01, play_2_S
0FFB            933       ; ***play audio***
0FFB            933       ;cjne sound_flag, #0, $
0FFB 121860     933       lcall Wait_Half_Second
0FFE C28E       933       clr TR1 ; Stop Timer 1 ISR from playing previous request
1000 D2A5       933       setb FLASH_CE
1002            933       ;setb sound_flag ; sound starts
1002 C2A6       933       clr SPEAKER ; Turn off speaker
1004 C2A5       933       clr FLASH_CE ; Enable SPI Flash
1006 7403       933       mov a, #READ_BYTES
1008 12040D     933       lcall Send_SPI
100B            933       ; Set the initial position in memory where to start playing
100B            933       
100B 7401       933       mov a, #0x01 ; change initial position
100D 12040D     933       lcall Send_SPI
1010 7493       933       mov a, #0x93 ; next memory position
1012 12040D     933       lcall Send_SPI
1015 7484       933       mov a, #0x84 ; next memory position
1017 12040D     933       lcall Send_SPI
101A 7401       933       mov a, #0x01 ; request first byte to send to DAC
101C 12040D     933       lcall Send_SPI
101F            933       
101F            933       ; How many bytes to play?
101F 754E00     933       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1022 754D36     933       mov w+1, #0x36 ; Load the middle byte of the number of bytes to play
1025 754CB0     933       mov w+0, #0xb0 ; Load the low byte of the number of bytes to play
1028            933       
1028            933       
1028 D2A6       933       setb SPEAKER ;Turn on speaker
102A D28E       933       setb TR1 ;Start playback by enabling Timer1
102C            933       ;clr sound_flag ; sound ends 
102C 0211E1     934           ljmp state_8_hop1_S
102F            935   
102F            936       play_2_S:
102F B40234     937           cjne a, #0x02, play_3_S
1032            938       ; ***play audio***
1032            938       ;cjne sound_flag, #0, $
1032 121860     938       lcall Wait_Half_Second
1035 C28E       938       clr TR1 ; Stop Timer 1 ISR from playing previous request
1037 D2A5       938       setb FLASH_CE
1039            938       ;setb sound_flag ; sound starts
1039 C2A6       938       clr SPEAKER ; Turn off speaker
103B C2A5       938       clr FLASH_CE ; Enable SPI Flash
103D 7403       938       mov a, #READ_BYTES
103F 12040D     938       lcall Send_SPI
1042            938       ; Set the initial position in memory where to start playing
1042            938       
1042 7401       938       mov a, #0x01 ; change initial position
1044 12040D     938       lcall Send_SPI
1047 74C7       938       mov a, #0xc7 ; next memory position
1049 12040D     938       lcall Send_SPI
104C 7414       938       mov a, #0x14 ; next memory position
104E 12040D     938       lcall Send_SPI
1051 7401       938       mov a, #0x01 ; request first byte to send to DAC
1053 12040D     938       lcall Send_SPI
1056            938       
1056            938       ; How many bytes to play?
1056 754E00     938       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1059 754D13     938       mov w+1, #0x13 ; Load the middle byte of the number of bytes to play
105C 754C88     938       mov w+0, #0x88 ; Load the low byte of the number of bytes to play
105F            938       
105F            938       
105F D2A6       938       setb SPEAKER ;Turn on speaker
1061 D28E       938       setb TR1 ;Start playback by enabling Timer1
1063            938       ;clr sound_flag ; sound ends
1063 0211E1     939           ljmp state_8_hop1_S
1066            940   
1066            941       play_3_S:
1066 B40334     942           cjne a, #0x03, play_4_S
1069            943       ; ***play audio***
1069            943       ;cjne sound_flag, #0, $
1069 121860     943       lcall Wait_Half_Second
106C C28E       943       clr TR1 ; Stop Timer 1 ISR from playing previous request
106E D2A5       943       setb FLASH_CE
1070            943       ;setb sound_flag ; sound starts
1070 C2A6       943       clr SPEAKER ; Turn off speaker
1072 C2A5       943       clr FLASH_CE ; Enable SPI Flash
1074 7403       943       mov a, #READ_BYTES
1076 12040D     943       lcall Send_SPI
1079            943       ; Set the initial position in memory where to start playing
1079            943       
1079 7401       943       mov a, #0x01 ; change initial position
107B 12040D     943       lcall Send_SPI
107E 74D6       943       mov a, #0xd6 ; next memory position
1080 12040D     943       lcall Send_SPI
1083 7468       943       mov a, #0x68 ; next memory position
1085 12040D     943       lcall Send_SPI
1088 7401       943       mov a, #0x01 ; request first byte to send to DAC
108A 12040D     943       lcall Send_SPI
108D            943       
108D            943       ; How many bytes to play?
108D 754E00     943       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1090 754D23     943       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
1093 754C28     943       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
1096            943       
1096            943       
1096 D2A6       943       setb SPEAKER ;Turn on speaker
1098 D28E       943       setb TR1 ;Start playback by enabling Timer1
109A            943       ;clr sound_flag ; sound ends
109A 0211E1     944           ljmp state_8_hop1_S
109D            945   
109D            946       play_4_S:
109D B40434     947           cjne a, #0x04, play_5_S
10A0            948       ; ***play audio***
10A0            948       ;cjne sound_flag, #0, $
10A0 121860     948       lcall Wait_Half_Second
10A3 C28E       948       clr TR1 ; Stop Timer 1 ISR from playing previous request
10A5 D2A5       948       setb FLASH_CE
10A7            948       ;setb sound_flag ; sound starts
10A7 C2A6       948       clr SPEAKER ; Turn off speaker
10A9 C2A5       948       clr FLASH_CE ; Enable SPI Flash
10AB 7403       948       mov a, #READ_BYTES
10AD 12040D     948       lcall Send_SPI
10B0            948       ; Set the initial position in memory where to start playing
10B0            948       
10B0 7401       948       mov a, #0x01 ; change initial position
10B2 12040D     948       lcall Send_SPI
10B5 74F4       948       mov a, #0xf4 ; next memory position
10B7 12040D     948       lcall Send_SPI
10BA 7400       948       mov a, #0x00 ; next memory position
10BC 12040D     948       lcall Send_SPI
10BF 7401       948       mov a, #0x01 ; request first byte to send to DAC
10C1 12040D     948       lcall Send_SPI
10C4            948       
10C4            948       ; How many bytes to play?
10C4 754E00     948       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
10C7 754D1B     948       mov w+1, #0x1b ; Load the middle byte of the number of bytes to play
10CA 754C58     948       mov w+0, #0x58 ; Load the low byte of the number of bytes to play
10CD            948       
10CD            948       
10CD D2A6       948       setb SPEAKER ;Turn on speaker
10CF D28E       948       setb TR1 ;Start playback by enabling Timer1
10D1            948       ;clr sound_flag ; sound ends
10D1 0211E1     949           ljmp state_8_hop1_S
10D4            950   
10D4            951       play_5_S:
10D4 B40534     952           cjne a, #0x05, play_6_S
10D7            953       ; ***play audio***
10D7            953       ;cjne sound_flag, #0, $
10D7 121860     953       lcall Wait_Half_Second
10DA C28E       953       clr TR1 ; Stop Timer 1 ISR from playing previous request
10DC D2A5       953       setb FLASH_CE
10DE            953       ;setb sound_flag ; sound starts
10DE C2A6       953       clr SPEAKER ; Turn off speaker
10E0 C2A5       953       clr FLASH_CE ; Enable SPI Flash
10E2 7403       953       mov a, #READ_BYTES
10E4 12040D     953       lcall Send_SPI
10E7            953       ; Set the initial position in memory where to start playing
10E7            953       
10E7 7402       953       mov a, #0x02 ; change initial position
10E9 12040D     953       lcall Send_SPI
10EC 7407       953       mov a, #0x07 ; next memory position
10EE 12040D     953       lcall Send_SPI
10F1 7488       953       mov a, #0x88 ; next memory position
10F3 12040D     953       lcall Send_SPI
10F6 7402       953       mov a, #0x02 ; request first byte to send to DAC
10F8 12040D     953       lcall Send_SPI
10FB            953       
10FB            953       ; How many bytes to play?
10FB 754E00     953       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
10FE 754D1B     953       mov w+1, #0x1b ; Load the middle byte of the number of bytes to play
1101 754C58     953       mov w+0, #0x58 ; Load the low byte of the number of bytes to play
1104            953       
1104            953       
1104 D2A6       953       setb SPEAKER ;Turn on speaker
1106 D28E       953       setb TR1 ;Start playback by enabling Timer1
1108            953       ;clr sound_flag ; sound ends
1108 0211E1     954           ljmp state_8_hop1_S
110B            955   
110B            956       play_6_S:
110B B40634     957           cjne a, #0x06, play_7_S
110E            958       ; ***play audio***
110E            958       ;cjne sound_flag, #0, $
110E 121860     958       lcall Wait_Half_Second
1111 C28E       958       clr TR1 ; Stop Timer 1 ISR from playing previous request
1113 D2A5       958       setb FLASH_CE
1115            958       ;setb sound_flag ; sound starts
1115 C2A6       958       clr SPEAKER ; Turn off speaker
1117 C2A5       958       clr FLASH_CE ; Enable SPI Flash
1119 7403       958       mov a, #READ_BYTES
111B 12040D     958       lcall Send_SPI
111E            958       ; Set the initial position in memory where to start playing
111E            958       
111E 7402       958       mov a, #0x02 ; change initial position
1120 12040D     958       lcall Send_SPI
1123 7426       958       mov a, #0x26 ; next memory position
1125 12040D     958       lcall Send_SPI
1128 74C8       958       mov a, #0xc8 ; next memory position
112A 12040D     958       lcall Send_SPI
112D 7402       958       mov a, #0x02 ; request first byte to send to DAC
112F 12040D     958       lcall Send_SPI
1132            958       
1132            958       ; How many bytes to play?
1132 754E00     958       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1135 754D1F     958       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
1138 754C40     958       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
113B            958       
113B            958       
113B D2A6       958       setb SPEAKER ;Turn on speaker
113D D28E       958       setb TR1 ;Start playback by enabling Timer1
113F            958       ;clr sound_flag ; sound ends
113F 0211E1     959           ljmp state_8_hop1_S
1142            960   
1142            961       play_7_S:
1142 B40734     962           cjne a, #0x07, play_8_S
1145            963       ; ***play audio***
1145            963       ;cjne sound_flag, #0, $
1145 121860     963       lcall Wait_Half_Second
1148 C28E       963       clr TR1 ; Stop Timer 1 ISR from playing previous request
114A D2A5       963       setb FLASH_CE
114C            963       ;setb sound_flag ; sound starts
114C C2A6       963       clr SPEAKER ; Turn off speaker
114E C2A5       963       clr FLASH_CE ; Enable SPI Flash
1150 7403       963       mov a, #READ_BYTES
1152 12040D     963       lcall Send_SPI
1155            963       ; Set the initial position in memory where to start playing
1155            963       
1155 7402       963       mov a, #0x02 ; change initial position
1157 12040D     963       lcall Send_SPI
115A 7436       963       mov a, #0x36 ; next memory position
115C 12040D     963       lcall Send_SPI
115F 7468       963       mov a, #0x68 ; next memory position
1161 12040D     963       lcall Send_SPI
1164 7402       963       mov a, #0x02 ; request first byte to send to DAC
1166 12040D     963       lcall Send_SPI
1169            963       
1169            963       ; How many bytes to play?
1169 754E00     963       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
116C 754D23     963       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
116F 754C28     963       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
1172            963       
1172            963       
1172 D2A6       963       setb SPEAKER ;Turn on speaker
1174 D28E       963       setb TR1 ;Start playback by enabling Timer1
1176            963       ;clr sound_flag ; sound ends
1176 0211E1     964           ljmp state_8_hop1_S
1179            965   
1179            966       play_8_S:
1179 B40834     967           cjne a, #0x08, play_9_S
117C            968       ; ***play audio***
117C            968       ;cjne sound_flag, #0, $
117C 121860     968       lcall Wait_Half_Second
117F C28E       968       clr TR1 ; Stop Timer 1 ISR from playing previous request
1181 D2A5       968       setb FLASH_CE
1183            968       ;setb sound_flag ; sound starts
1183 C2A6       968       clr SPEAKER ; Turn off speaker
1185 C2A5       968       clr FLASH_CE ; Enable SPI Flash
1187 7403       968       mov a, #READ_BYTES
1189 12040D     968       lcall Send_SPI
118C            968       ; Set the initial position in memory where to start playing
118C            968       
118C 7402       968       mov a, #0x02 ; change initial position
118E 12040D     968       lcall Send_SPI
1191 7457       968       mov a, #0x57 ; next memory position
1193 12040D     968       lcall Send_SPI
1196 749C       968       mov a, #0x9c ; next memory position
1198 12040D     968       lcall Send_SPI
119B 7402       968       mov a, #0x02 ; request first byte to send to DAC
119D 12040D     968       lcall Send_SPI
11A0            968       
11A0            968       ; How many bytes to play?
11A0 754E00     968       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
11A3 754D1B     968       mov w+1, #0x1b ; Load the middle byte of the number of bytes to play
11A6 754C58     968       mov w+0, #0x58 ; Load the low byte of the number of bytes to play
11A9            968       
11A9            968       
11A9 D2A6       968       setb SPEAKER ;Turn on speaker
11AB D28E       968       setb TR1 ;Start playback by enabling Timer1
11AD            968       ;clr sound_flag ; sound ends
11AD 0211E1     969           ljmp state_8_hop1_S
11B0            970   
11B0            971       play_9_S:
11B0            972       ; ***play audio***
11B0            972       ;cjne sound_flag, #0, $
11B0 121860     972       lcall Wait_Half_Second
11B3 C28E       972       clr TR1 ; Stop Timer 1 ISR from playing previous request
11B5 D2A5       972       setb FLASH_CE
11B7            972       ;setb sound_flag ; sound starts
11B7 C2A6       972       clr SPEAKER ; Turn off speaker
11B9 C2A5       972       clr FLASH_CE ; Enable SPI Flash
11BB 7403       972       mov a, #READ_BYTES
11BD 12040D     972       lcall Send_SPI
11C0            972       ; Set the initial position in memory where to start playing
11C0            972       
11C0 7402       972       mov a, #0x02 ; change initial position
11C2 12040D     972       lcall Send_SPI
11C5 7469       972       mov a, #0x69 ; next memory position
11C7 12040D     972       lcall Send_SPI
11CA 7430       972       mov a, #0x30 ; next memory position
11CC 12040D     972       lcall Send_SPI
11CF 7402       972       mov a, #0x02 ; request first byte to send to DAC
11D1 12040D     972       lcall Send_SPI
11D4            972       
11D4            972       ; How many bytes to play?
11D4 754E00     972       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
11D7 754D1F     972       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
11DA 754C40     972       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
11DD            972       
11DD            972       
11DD D2A6       972       setb SPEAKER ;Turn on speaker
11DF D28E       972       setb TR1 ;Start playback by enabling Timer1
11E1            972       ;clr sound_flag ; sound ends
11E1            973   
11E1            974   state_8_hop1_S:
11E1            975   ; go to state_8_sound
11E1 02140F     976       ljmp state_8_sound_S
11E4            977   
11E4            978   
11E4            979   state_7_sound_S:
11E4            980   ; play 10 - 19
11E4            981       ;ljmp PLAYBACK_TEMP
11E4 75F064     982       mov b, #100
11E7 E53B       983       mov a, Temp_oven
11E9 84         984       div ab
11EA E5F0       985       mov a, b
11EC B40A34     986       cjne a, #0x0a, play_11_S
11EF            987       
11EF            988       ; ***play audio***
11EF            988       ;cjne sound_flag, #0, $
11EF 121860     988       lcall Wait_Half_Second
11F2 C28E       988       clr TR1 ; Stop Timer 1 ISR from playing previous request
11F4 D2A5       988       setb FLASH_CE
11F6            988       ;setb sound_flag ; sound starts
11F6 C2A6       988       clr SPEAKER ; Turn off speaker
11F8 C2A5       988       clr FLASH_CE ; Enable SPI Flash
11FA 7403       988       mov a, #READ_BYTES
11FC 12040D     988       lcall Send_SPI
11FF            988       ; Set the initial position in memory where to start playing
11FF            988       
11FF 7402       988       mov a, #0x02 ; change initial position
1201 12040D     988       lcall Send_SPI
1204 7484       988       mov a, #0x84 ; next memory position
1206 12040D     988       lcall Send_SPI
1209 7488       988       mov a, #0x88 ; next memory position
120B 12040D     988       lcall Send_SPI
120E 7402       988       mov a, #0x02 ; request first byte to send to DAC
1210 12040D     988       lcall Send_SPI
1213            988       
1213            988       ; How many bytes to play?
1213 754E00     988       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1216 754D17     988       mov w+1, #0x17 ; Load the middle byte of the number of bytes to play
1219 754C70     988       mov w+0, #0x70 ; Load the low byte of the number of bytes to play
121C            988       
121C            988       
121C D2A6       988       setb SPEAKER ;Turn on speaker
121E D28E       988       setb TR1 ;Start playback by enabling Timer1
1220            988       ;clr sound_flag ; sound ends
1220 02140C     989       ljmp state_8_hop2_S
1223            990   
1223            991       play_11_S:
1223 B40B34     992           cjne a, #0x0b, play_12_S
1226            993       ; ***play audio***
1226            993       ;cjne sound_flag, #0, $
1226 121860     993       lcall Wait_Half_Second
1229 C28E       993       clr TR1 ; Stop Timer 1 ISR from playing previous request
122B D2A5       993       setb FLASH_CE
122D            993       ;setb sound_flag ; sound starts
122D C2A6       993       clr SPEAKER ; Turn off speaker
122F C2A5       993       clr FLASH_CE ; Enable SPI Flash
1231 7403       993       mov a, #READ_BYTES
1233 12040D     993       lcall Send_SPI
1236            993       ; Set the initial position in memory where to start playing
1236            993       
1236 7402       993       mov a, #0x02 ; change initial position
1238 12040D     993       lcall Send_SPI
123B 749B       993       mov a, #0x9b ; next memory position
123D 12040D     993       lcall Send_SPI
1240 74F8       993       mov a, #0xf8 ; next memory position
1242 12040D     993       lcall Send_SPI
1245 7402       993       mov a, #0x02 ; request first byte to send to DAC
1247 12040D     993       lcall Send_SPI
124A            993       
124A            993       ; How many bytes to play?
124A 754E00     993       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
124D 754D1F     993       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
1250 754C40     993       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
1253            993       
1253            993       
1253 D2A6       993       setb SPEAKER ;Turn on speaker
1255 D28E       993       setb TR1 ;Start playback by enabling Timer1
1257            993       ;clr sound_flag ; sound ends
1257 02140C     994           ljmp state_8_hop2_S
125A            995   
125A            996       play_12_S:
125A B40C34     997           cjne a, #0x0c, play_13_S
125D            998       ; ***play audio***
125D            998       ;cjne sound_flag, #0, $
125D 121860     998       lcall Wait_Half_Second
1260 C28E       998       clr TR1 ; Stop Timer 1 ISR from playing previous request
1262 D2A5       998       setb FLASH_CE
1264            998       ;setb sound_flag ; sound starts
1264 C2A6       998       clr SPEAKER ; Turn off speaker
1266 C2A5       998       clr FLASH_CE ; Enable SPI Flash
1268 7403       998       mov a, #READ_BYTES
126A 12040D     998       lcall Send_SPI
126D            998       ; Set the initial position in memory where to start playing
126D            998       
126D 7402       998       mov a, #0x02 ; change initial position
126F 12040D     998       lcall Send_SPI
1272 74B7       998       mov a, #0xb7 ; next memory position
1274 12040D     998       lcall Send_SPI
1277 7450       998       mov a, #0x50 ; next memory position
1279 12040D     998       lcall Send_SPI
127C 7402       998       mov a, #0x02 ; request first byte to send to DAC
127E 12040D     998       lcall Send_SPI
1281            998       
1281            998       ; How many bytes to play?
1281 754E00     998       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1284 754D1F     998       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
1287 754C40     998       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
128A            998       
128A            998       
128A D2A6       998       setb SPEAKER ;Turn on speaker
128C D28E       998       setb TR1 ;Start playback by enabling Timer1
128E            998       ;clr sound_flag ; sound ends
128E 02140C     999           ljmp state_8_hop2_S
1291           1000   
1291           1001       play_13_S:
1291 B40D34    1002           cjne a, #0x0d, play_14_S
1294           1003       ; ***play audio***
1294           1003       ;cjne sound_flag, #0, $
1294 121860    1003       lcall Wait_Half_Second
1297 C28E      1003       clr TR1 ; Stop Timer 1 ISR from playing previous request
1299 D2A5      1003       setb FLASH_CE
129B           1003       ;setb sound_flag ; sound starts
129B C2A6      1003       clr SPEAKER ; Turn off speaker
129D C2A5      1003       clr FLASH_CE ; Enable SPI Flash
129F 7403      1003       mov a, #READ_BYTES
12A1 12040D    1003       lcall Send_SPI
12A4           1003       ; Set the initial position in memory where to start playing
12A4           1003       
12A4 7402      1003       mov a, #0x02 ; change initial position
12A6 12040D    1003       lcall Send_SPI
12A9 74CE      1003       mov a, #0xce ; next memory position
12AB 12040D    1003       lcall Send_SPI
12AE 74C0      1003       mov a, #0xc0 ; next memory position
12B0 12040D    1003       lcall Send_SPI
12B3 7402      1003       mov a, #0x02 ; request first byte to send to DAC
12B5 12040D    1003       lcall Send_SPI
12B8           1003       
12B8           1003       ; How many bytes to play?
12B8 754E00    1003       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
12BB 754D2E    1003       mov w+1, #0x2e ; Load the middle byte of the number of bytes to play
12BE 754CE0    1003       mov w+0, #0xe0 ; Load the low byte of the number of bytes to play
12C1           1003       
12C1           1003       
12C1 D2A6      1003       setb SPEAKER ;Turn on speaker
12C3 D28E      1003       setb TR1 ;Start playback by enabling Timer1
12C5           1003       ;clr sound_flag ; sound ends
12C5 02140C    1004           ljmp state_8_hop2_S
12C8           1005   
12C8           1006       play_14_S:
12C8 B40E34    1007           cjne a, #0x0e, play_15_S
12CB           1008       ; ***play audio***
12CB           1008       ;cjne sound_flag, #0, $
12CB 121860    1008       lcall Wait_Half_Second
12CE C28E      1008       clr TR1 ; Stop Timer 1 ISR from playing previous request
12D0 D2A5      1008       setb FLASH_CE
12D2           1008       ;setb sound_flag ; sound starts
12D2 C2A6      1008       clr SPEAKER ; Turn off speaker
12D4 C2A5      1008       clr FLASH_CE ; Enable SPI Flash
12D6 7403      1008       mov a, #READ_BYTES
12D8 12040D    1008       lcall Send_SPI
12DB           1008       ; Set the initial position in memory where to start playing
12DB           1008       
12DB 7402      1008       mov a, #0x02 ; change initial position
12DD 12040D    1008       lcall Send_SPI
12E0 74F5      1008       mov a, #0xf5 ; next memory position
12E2 12040D    1008       lcall Send_SPI
12E5 74D0      1008       mov a, #0xd0 ; next memory position
12E7 12040D    1008       lcall Send_SPI
12EA 7402      1008       mov a, #0x02 ; request first byte to send to DAC
12EC 12040D    1008       lcall Send_SPI
12EF           1008       
12EF           1008       ; How many bytes to play?
12EF 754E00    1008       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
12F2 754D36    1008       mov w+1, #0x36 ; Load the middle byte of the number of bytes to play
12F5 754CB0    1008       mov w+0, #0xb0 ; Load the low byte of the number of bytes to play
12F8           1008       
12F8           1008       
12F8 D2A6      1008       setb SPEAKER ;Turn on speaker
12FA D28E      1008       setb TR1 ;Start playback by enabling Timer1
12FC           1008       ;clr sound_flag ; sound ends
12FC 02140C    1009           ljmp state_8_hop2_S
12FF           1010   
12FF           1011       play_15_S:
12FF B40F34    1012           cjne a, #0x0f, play_16_S
1302           1013       ; ***play audio***
1302           1013       ;cjne sound_flag, #0, $
1302 121860    1013       lcall Wait_Half_Second
1305 C28E      1013       clr TR1 ; Stop Timer 1 ISR from playing previous request
1307 D2A5      1013       setb FLASH_CE
1309           1013       ;setb sound_flag ; sound starts
1309 C2A6      1013       clr SPEAKER ; Turn off speaker
130B C2A5      1013       clr FLASH_CE ; Enable SPI Flash
130D 7403      1013       mov a, #READ_BYTES
130F 12040D    1013       lcall Send_SPI
1312           1013       ; Set the initial position in memory where to start playing
1312           1013       
1312 7403      1013       mov a, #0x03 ; change initial position
1314 12040D    1013       lcall Send_SPI
1317 7428      1013       mov a, #0x28 ; next memory position
1319 12040D    1013       lcall Send_SPI
131C 7498      1013       mov a, #0x98 ; next memory position
131E 12040D    1013       lcall Send_SPI
1321 7403      1013       mov a, #0x03 ; request first byte to send to DAC
1323 12040D    1013       lcall Send_SPI
1326           1013       
1326           1013       ; How many bytes to play?
1326 754E00    1013       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1329 754D23    1013       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
132C 754C28    1013       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
132F           1013       
132F           1013       
132F D2A6      1013       setb SPEAKER ;Turn on speaker
1331 D28E      1013       setb TR1 ;Start playback by enabling Timer1
1333           1013       ;clr sound_flag ; sound ends
1333 02140C    1014           ljmp state_8_hop2_S
1336           1015   
1336           1016       play_16_S:
1336 B41034    1017           cjne a, #0x10, play_17_S
1339           1018       ; ***play audio***
1339           1018       ;cjne sound_flag, #0, $
1339 121860    1018       lcall Wait_Half_Second
133C C28E      1018       clr TR1 ; Stop Timer 1 ISR from playing previous request
133E D2A5      1018       setb FLASH_CE
1340           1018       ;setb sound_flag ; sound starts
1340 C2A6      1018       clr SPEAKER ; Turn off speaker
1342 C2A5      1018       clr FLASH_CE ; Enable SPI Flash
1344 7403      1018       mov a, #READ_BYTES
1346 12040D    1018       lcall Send_SPI
1349           1018       ; Set the initial position in memory where to start playing
1349           1018       
1349 7403      1018       mov a, #0x03 ; change initial position
134B 12040D    1018       lcall Send_SPI
134E 7447      1018       mov a, #0x47 ; next memory position
1350 12040D    1018       lcall Send_SPI
1353 74D8      1018       mov a, #0xd8 ; next memory position
1355 12040D    1018       lcall Send_SPI
1358 7403      1018       mov a, #0x03 ; request first byte to send to DAC
135A 12040D    1018       lcall Send_SPI
135D           1018       
135D           1018       ; How many bytes to play?
135D 754E00    1018       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1360 754D32    1018       mov w+1, #0x32 ; Load the middle byte of the number of bytes to play
1363 754CC8    1018       mov w+0, #0xc8 ; Load the low byte of the number of bytes to play
1366           1018       
1366           1018       
1366 D2A6      1018       setb SPEAKER ;Turn on speaker
1368 D28E      1018       setb TR1 ;Start playback by enabling Timer1
136A           1018       ;clr sound_flag ; sound ends
136A 02140C    1019           ljmp state_8_hop2_S
136D           1020   
136D           1021       play_17_S:
136D B41134    1022           cjne a, #0x11, play_18_S
1370           1023       ; ***play audio***
1370           1023       ;cjne sound_flag, #0, $
1370 121860    1023       lcall Wait_Half_Second
1373 C28E      1023       clr TR1 ; Stop Timer 1 ISR from playing previous request
1375 D2A5      1023       setb FLASH_CE
1377           1023       ;setb sound_flag ; sound starts
1377 C2A6      1023       clr SPEAKER ; Turn off speaker
1379 C2A5      1023       clr FLASH_CE ; Enable SPI Flash
137B 7403      1023       mov a, #READ_BYTES
137D 12040D    1023       lcall Send_SPI
1380           1023       ; Set the initial position in memory where to start playing
1380           1023       
1380 7403      1023       mov a, #0x03 ; change initial position
1382 12040D    1023       lcall Send_SPI
1385 7476      1023       mov a, #0x76 ; next memory position
1387 12040D    1023       lcall Send_SPI
138A 74B8      1023       mov a, #0xb8 ; next memory position
138C 12040D    1023       lcall Send_SPI
138F 7403      1023       mov a, #0x03 ; request first byte to send to DAC
1391 12040D    1023       lcall Send_SPI
1394           1023       
1394           1023       ; How many bytes to play?
1394 754E00    1023       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1397 754D2E    1023       mov w+1, #0x2e ; Load the middle byte of the number of bytes to play
139A 754C20    1023       mov w+0, #0x20 ; Load the low byte of the number of bytes to play
139D           1023       
139D           1023       
139D D2A6      1023       setb SPEAKER ;Turn on speaker
139F D28E      1023       setb TR1 ;Start playback by enabling Timer1
13A1           1023       ;clr sound_flag ; sound ends
13A1 02140C    1024           ljmp state_8_hop2_S
13A4           1025   
13A4           1026       play_18_S:
13A4 B41234    1027           cjne a, #0x12, play_19_S
13A7           1028       ; ***play audio***
13A7           1028       ;cjne sound_flag, #0, $
13A7 121860    1028       lcall Wait_Half_Second
13AA C28E      1028       clr TR1 ; Stop Timer 1 ISR from playing previous request
13AC D2A5      1028       setb FLASH_CE
13AE           1028       ;setb sound_flag ; sound starts
13AE C2A6      1028       clr SPEAKER ; Turn off speaker
13B0 C2A5      1028       clr FLASH_CE ; Enable SPI Flash
13B2 7403      1028       mov a, #READ_BYTES
13B4 12040D    1028       lcall Send_SPI
13B7           1028       ; Set the initial position in memory where to start playing
13B7           1028       
13B7 7403      1028       mov a, #0x03 ; change initial position
13B9 12040D    1028       lcall Send_SPI
13BC 74A1      1028       mov a, #0xa1 ; next memory position
13BE 12040D    1028       lcall Send_SPI
13C1 74B0      1028       mov a, #0xb0 ; next memory position
13C3 12040D    1028       lcall Send_SPI
13C6 7403      1028       mov a, #0x03 ; request first byte to send to DAC
13C8 12040D    1028       lcall Send_SPI
13CB           1028       
13CB           1028       ; How many bytes to play?
13CB 754E00    1028       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
13CE 754D27    1028       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
13D1 754C10    1028       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
13D4           1028       
13D4           1028       
13D4 D2A6      1028       setb SPEAKER ;Turn on speaker
13D6 D28E      1028       setb TR1 ;Start playback by enabling Timer1
13D8           1028       ;clr sound_flag ; sound ends
13D8 02140C    1029           ljmp state_8_hop2_S
13DB           1030   
13DB           1031       play_19_S:
13DB           1032       ; ***play audio***
13DB           1032       ;cjne sound_flag, #0, $
13DB 121860    1032       lcall Wait_Half_Second
13DE C28E      1032       clr TR1 ; Stop Timer 1 ISR from playing previous request
13E0 D2A5      1032       setb FLASH_CE
13E2           1032       ;setb sound_flag ; sound starts
13E2 C2A6      1032       clr SPEAKER ; Turn off speaker
13E4 C2A5      1032       clr FLASH_CE ; Enable SPI Flash
13E6 7403      1032       mov a, #READ_BYTES
13E8 12040D    1032       lcall Send_SPI
13EB           1032       ; Set the initial position in memory where to start playing
13EB           1032       
13EB 7403      1032       mov a, #0x03 ; change initial position
13ED 12040D    1032       lcall Send_SPI
13F0 74C8      1032       mov a, #0xc8 ; next memory position
13F2 12040D    1032       lcall Send_SPI
13F5 74C0      1032       mov a, #0xc0 ; next memory position
13F7 12040D    1032       lcall Send_SPI
13FA 7403      1032       mov a, #0x03 ; request first byte to send to DAC
13FC 12040D    1032       lcall Send_SPI
13FF           1032       
13FF           1032       ; How many bytes to play?
13FF 754E00    1032       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1402 754D27    1032       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
1405 754C10    1032       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
1408           1032       
1408           1032       
1408 D2A6      1032       setb SPEAKER ;Turn on speaker
140A D28E      1032       setb TR1 ;Start playback by enabling Timer1
140C           1032       ;clr sound_flag ; sound ends
140C           1033   
140C           1034       state_8_hop2_S:
140C           1035       ; go to state_8_sound
140C 02140F    1036           ljmp state_8_sound_S
140F           1037   
140F           1038   state_8_sound_S:
140F           1039   ; go to state_0_sound
140F 020CE9    1040       ljmp Sound_ret_S
1412           1041   
1412           1042   
1412           1043   
1412           1044   
1412           1045   INI_PLAYBACK_TEMP:
1412           1046       ; ****INITIALIZATION****
1412           1047       ; Configure SPI pins and turn off speaker
1412           1048            ;anl P2M0, #0b_1100_1110
1412 43CE90    1049       orl P2M0, #0b_1001_0000
1415           1050       ;orl P2M0, #0b_0011_0001
1415           1051            ;orl P2M1, #0b_0011_0001
1415 43CF90    1052       orl P2M1, #0b_1001_0000
1418 D2A1      1053            setb MY_MISO_SOUND  ; Configured as input
141A D2A5      1054            setb FLASH_CE ; CS=1 for SPI flash memory
141C C2A0      1055            clr MY_SCLK_SOUND   ; Rest state of SCLK=0
141E C2A6      1056            clr SPEAKER   ; Turn off speaker.
1420           1057            
1420           1058            ; Configure timer 1
1420 53890F    1059            anl     TMOD, #0x0F ; Clear the bits of timer 1 in TMOD
1423 438910    1060            orl     TMOD, #0x10 ; Set timer 1 in 16-bit timer mode.  Don't change the bits of timer 0
1426 758DFC    1061            mov TH1, #high(TIMER1_RELOAD)
1429 758B8C    1062            mov TL1, #low(TIMER1_RELOAD)
142C           1063            ; Set autoreload value
142C 75F5FC    1064            mov RH1, #high(TIMER1_RELOAD)
142F 75F38C    1065            mov RL1, #low(TIMER1_RELOAD)
1432           1066   
1432           1067            ;Enable the timer and interrupts
1432 D2AB      1068       setb ET1  ; Enable timer 1 interrupt
1434 D28E      1069            setb TR1 ; Timer 1 is only enabled to play stored sound
1436           1070   
1436           1071            ; Configure the DAC.  The DAC output we are using is P2.3, but P2.2 is also reserved.
1436 75A5A0    1072            mov DADI, #0b_1010_0000 ; ACON=1
1439 75A43A    1073            mov DADC, #0b_0011_1010 ; Enabled, DAC mode, Left adjusted, CLK/4
143C 75AD80    1074            mov DADH, #0x80 ; Middle of scale
143F 75AC00    1075            mov DADL, #0
1442 43A440    1076            orl DADC, #0b_0100_0000 ; Start DAC by GO/BSY=1
1445           1077       check_DAC_init:
1445 E5A4      1078            mov a, DADC
1447 20E6FB    1079            jb acc.6, check_DAC_init ; Wait for DAC to finish
144A           1080            
144A 22        1081   ret
144B           1082   
144B           1083       
144B           1084   ;-------------------------------------------------------------------------------------------------------------------------------
144B           1085   ;***LCD FXNS
144B           1086   
               1087   Display_lower_BCD mac
               1088       push ar0
               1089       mov r0, %0
               1090       lcall ?Display_lower_BCD
               1091       pop ar0
               1092   endmac
144B           1093   
144B           1094   ?Display_lower_BCD:
144B C0E0      1095       push acc
144D           1096       ; write least significant digit
144D E8        1097       mov a, r0
144E 540F      1098       anl a, #0fh
1450 4430      1099       orl a, #30h
1452 12007E    1100       lcall ?WriteData
1455 D0E0      1101       pop acc
1457 22        1102   ret
1458           1103   
1458           1104   
1458           1105   SendToLCD:
1458 75F064    1106       mov b, #100
145B 84        1107       div ab
145C 4430      1108       orl a, #0x30h ; Convert hundreds to ASCII
145E 12007E    1109       lcall ?WriteData ; Send to LCD
1461 E5F0      1110       mov a, b    ; Remainder is in register b
1463 75F00A    1111       mov b, #10
1466 84        1112       div ab
1467 4430      1113       orl a, #0x30h ; Convert tens to ASCII
1469 12007E    1114       lcall ?WriteData; Send to LCD
146C E5F0      1115       mov a, b
146E 4430      1116       orl a, #0x30h ; Convert units to ASCII
1470 12007E    1117       lcall ?WriteData; Send to LCD
1473 22        1118   ret
1474           1119   
1474           1120   Initialize_State_Display:
1474           1121   
1474           1122       ;***clear the screen and set new display***
1474 7401      1123            mov a, #0x01
1476 120083    1123            lcall ?WriteCommand
1479 C002      1124            push AR2
147B 7A02      1124            mov R2, #2
147D 120039    1124            lcall ?Wait_Milli_Seconds
1480 D002      1124            pop AR2
1482           1125       
1482 C0E0      1126            push acc
1484 7401      1126            mov a, #1
1486 14        1126            dec a
1487 1200BF    1126            lcall ?Set_Cursor_1 ; Select column and row
148A D0E0      1126            pop acc
148C C083      1127            push dph
148E C082      1127            push dpl
1490 C0E0      1127            push acc
1492 90037D    1127            mov dptr, #time
1495 1200B2    1127            lcall ?Send_Constant_String
1498 D0E0      1127            pop acc
149A D082      1127            pop dpl
149C D083      1127            pop dph
149E           1128            
149E C0E0      1129            push acc
14A0 7406      1129            mov a, #6
14A2 14        1129            dec a
14A3 1200BF    1129            lcall ?Set_Cursor_1 ; Select column and row
14A6 D0E0      1129            pop acc
14A8 C083      1130            push dph
14AA C082      1130            push dpl
14AC C0E0      1130            push acc
14AE 900382    1130            mov dptr, #colon
14B1 1200B2    1130            lcall ?Send_Constant_String
14B4 D0E0      1130            pop acc
14B6 D082      1130            pop dpl
14B8 D083      1130            pop dph
14BA           1131      
14BA C0E0      1132            push acc
14BC 740A      1132            mov a, #10
14BE 14        1132            dec a
14BF 1200BF    1132            lcall ?Set_Cursor_1 ; Select column and row
14C2 D0E0      1132            pop acc
14C4 C083      1133            push dph
14C6 C082      1133            push dpl
14C8 C0E0      1133            push acc
14CA 900384    1133            mov dptr, #temp
14CD 1200B2    1133            lcall ?Send_Constant_String
14D0 D0E0      1133            pop acc
14D2 D082      1133            pop dpl
14D4 D083      1133            pop dph
14D6           1134       
14D6 C0E0      1135            push acc
14D8 7401      1135            mov a, #1
14DA 14        1135            dec a
14DB 1200BD    1135            lcall ?Set_Cursor_2 ; Select column and row
14DE D0E0      1135            pop acc
14E0 C083      1136            push dph
14E2 C082      1136            push dpl
14E4 C0E0      1136            push acc
14E6 900376    1136            mov dptr, #state
14E9 1200B2    1136            lcall ?Send_Constant_String
14EC D0E0      1136            pop acc
14EE D082      1136            pop dpl
14F0 D083      1136            pop dph
14F2 22        1137   ret
14F3           1138   
14F3           1139   Update_Display:
14F3 C0E0      1140            push acc
14F5 7405      1140            mov a, #5
14F7 14        1140            dec a
14F8 1200BF    1140            lcall ?Set_Cursor_1 ; Select column and row
14FB D0E0      1140            pop acc
14FD C000      1141       push ar0
14FF A839      1141       mov r0, Run_time_minutes
1501 12144B    1141       lcall ?Display_lower_BCD
1504 D000      1141       pop ar0
1506 C0E0      1142            push acc
1508 7407      1142            mov a, #7
150A 14        1142            dec a
150B 1200BF    1142            lcall ?Set_Cursor_1 ; Select column and row
150E D0E0      1142            pop acc
1510 C000      1143            push ar0
1512 A838      1143            mov r0, Run_time_seconds
1514 1200C4    1143            lcall ?Display_BCD
1517 D000      1143            pop ar0
1519           1144       ;Set_Cursor(1,14)
1519           1145       ;mov a, Temp_oven
1519           1146       ;SendToLCD(Temp_oven)
1519 22        1147   ret
151A           1148   
151A           1149   State0_display:
151A C0E0      1150            push acc
151C 7401      1150            mov a, #1
151E 14        1150            dec a
151F 1200BF    1150            lcall ?Set_Cursor_1 ; Select column and row
1522 D0E0      1150            pop acc
1524 C083      1151            push dph
1526 C082      1151            push dpl
1528 C0E0      1151            push acc
152A 900360    1151            mov dptr, #STemp
152D 1200B2    1151            lcall ?Send_Constant_String
1530 D0E0      1151            pop acc
1532 D082      1151            pop dpl
1534 D083      1151            pop dph
1536 C0E0      1152            push acc
1538 7406      1152            mov a, #6
153A 14        1152            dec a
153B 1200BF    1152            lcall ?Set_Cursor_1 ; Select column and row
153E D0E0      1152            pop acc
1540 E534      1153       mov a, Temp_soak
1542 121458    1154       lcall SendToLCD
1545           1155       
1545 C0E0      1156            push acc
1547 740A      1156            mov a, #10
1549 14        1156            dec a
154A 1200BF    1156            lcall ?Set_Cursor_1 ; Select column and row
154D D0E0      1156            pop acc
154F C083      1157            push dph
1551 C082      1157            push dpl
1553 C0E0      1157            push acc
1555 900366    1157            mov dptr, #STime
1558 1200B2    1157            lcall ?Send_Constant_String
155B D0E0      1157            pop acc
155D D082      1157            pop dpl
155F D083      1157            pop dph
1561 C0E0      1158            push acc
1563 740E      1158            mov a, #14
1565 14        1158            dec a
1566 1200BF    1158            lcall ?Set_Cursor_1 ; Select column and row
1569 D0E0      1158            pop acc
156B E535      1159       mov a, Time_soak
156D 121458    1160            lcall SendToLCD
1570           1161       ;Display_BCD(Time_soak)
1570           1162   
1570           1163       ;Displays Reflow Temp and Time
1570 C0E0      1164            push acc
1572 7401      1164            mov a, #1
1574 14        1164            dec a
1575 1200BD    1164            lcall ?Set_Cursor_2 ; Select column and row
1578 D0E0      1164            pop acc
157A C083      1165            push dph
157C C082      1165            push dpl
157E C0E0      1165            push acc
1580 90036B    1165            mov dptr, #RTemp
1583 1200B2    1165            lcall ?Send_Constant_String
1586 D0E0      1165            pop acc
1588 D082      1165            pop dpl
158A D083      1165            pop dph
158C C0E0      1166            push acc
158E 7406      1166            mov a, #6
1590 14        1166            dec a
1591 1200BD    1166            lcall ?Set_Cursor_2 ; Select column and row
1594 D0E0      1166            pop acc
1596 E536      1167       mov a, Temp_refl
1598 121458    1168       lcall SendToLCD
159B           1169       
159B C0E0      1170            push acc
159D 740A      1170            mov a, #10
159F 14        1170            dec a
15A0 1200BD    1170            lcall ?Set_Cursor_2 ; Select column and row
15A3 D0E0      1170            pop acc
15A5 C083      1171            push dph
15A7 C082      1171            push dpl
15A9 C0E0      1171            push acc
15AB 900371    1171            mov dptr, #RTime
15AE 1200B2    1171            lcall ?Send_Constant_String
15B1 D0E0      1171            pop acc
15B3 D082      1171            pop dpl
15B5 D083      1171            pop dph
15B7 C0E0      1172            push acc
15B9 740E      1172            mov a, #14
15BB 14        1172            dec a
15BC 1200BD    1172            lcall ?Set_Cursor_2 ; Select column and row
15BF D0E0      1172            pop acc
15C1 E537      1173       mov a, Time_refl
15C3 121458    1174            lcall SendToLCD
15C6 22        1175   ret
15C7           1176   
15C7           1177   Display_3_digit_BCD:
15C7 C0E0      1178            push acc
15C9 740E      1178            mov a, #14
15CB 14        1178            dec a
15CC 1200BF    1178            lcall ?Set_Cursor_1 ; Select column and row
15CF D0E0      1178            pop acc
15D1 C000      1179       push ar0
15D3 A846      1179       mov r0, bcd+1
15D5 12144B    1179       lcall ?Display_lower_BCD
15D8 D000      1179       pop ar0
15DA C000      1180            push ar0
15DC A845      1180            mov r0, bcd+0
15DE 1200C4    1180            lcall ?Display_BCD
15E1 D000      1180            pop ar0
15E3 22        1181   ret
15E4           1182   
15E4           1183   Animation:
15E4 740F      1184            mov a, #0x0f
15E6 120083    1184            lcall ?WriteCommand ;display cursor
15E9           1185   
15E9           1186       ;name ; Move cursor to line 1 column 1
15E9 7480      1187            mov a, #0x80
15EB 120083    1187            lcall ?WriteCommand
15EE 7457      1188            mov a, #'W'
15F0 12007E    1188            lcall ?WriteData
15F3 C002      1189            push AR2
15F5 7AFA      1189            mov R2, #250
15F7 120039    1189            lcall ?Wait_Milli_Seconds
15FA D002      1189            pop AR2
15FC 7465      1190            mov a, #'e'
15FE 12007E    1190            lcall ?WriteData
1601 C002      1191            push AR2
1603 7AFA      1191            mov R2, #250
1605 120039    1191            lcall ?Wait_Milli_Seconds
1608 D002      1191            pop AR2
160A 746C      1192            mov a, #'l'
160C 12007E    1192            lcall ?WriteData
160F C002      1193            push AR2
1611 7AFA      1193            mov R2, #250
1613 120039    1193            lcall ?Wait_Milli_Seconds
1616 D002      1193            pop AR2
1618 7463      1194            mov a, #'c'
161A 12007E    1194            lcall ?WriteData
161D C002      1195            push AR2
161F 7AFA      1195            mov R2, #250
1621 120039    1195            lcall ?Wait_Milli_Seconds
1624 D002      1195            pop AR2
1626 746F      1196            mov a, #'o'
1628 12007E    1196            lcall ?WriteData
162B C002      1197            push AR2
162D 7AFA      1197            mov R2, #250
162F 120039    1197            lcall ?Wait_Milli_Seconds
1632 D002      1197            pop AR2
1634 746D      1198            mov a, #'m'
1636 12007E    1198            lcall ?WriteData
1639 C002      1199            push AR2
163B 7AFA      1199            mov R2, #250
163D 120039    1199            lcall ?Wait_Milli_Seconds
1640 D002      1199            pop AR2
1642 7465      1200            mov a, #'e'
1644 12007E    1200            lcall ?WriteData
1647 C002      1201            push AR2
1649 7AFA      1201            mov R2, #250
164B 120039    1201            lcall ?Wait_Milli_Seconds
164E D002      1201            pop AR2
1650 7421      1202            mov a, #'!'
1652 12007E    1202            lcall ?WriteData
1655 C002      1203            push AR2
1657 7AFA      1203            mov R2, #250
1659 120039    1203            lcall ?Wait_Milli_Seconds
165C D002      1203            pop AR2
165E 7420      1204            mov a, #' '
1660 12007E    1204            lcall ?WriteData
1663 C002      1205            push AR2
1665 7AFA      1205            mov R2, #250
1667 120039    1205            lcall ?Wait_Milli_Seconds
166A D002      1205            pop AR2
166C 7460      1206            mov a, #96
166E 12007E    1206            lcall ?WriteData
1671 C002      1207            push AR2
1673 7AFA      1207            mov R2, #250
1675 120039    1207            lcall ?Wait_Milli_Seconds
1678 D002      1207            pop AR2
167A 74EF      1208            mov a, #239
167C 12007E    1208            lcall ?WriteData
167F C002      1209            push AR2
1681 7AFA      1209            mov R2, #250
1683 120039    1209            lcall ?Wait_Milli_Seconds
1686 D002      1209            pop AR2
1688 742F      1210            mov a, #47
168A 12007E    1210            lcall ?WriteData
168D 12183B    1211       lcall Wait_One_Second
1690 12183B    1212       lcall Wait_One_Second
1693 740C      1213            mov a, #0x0c
1695 120083    1213            lcall ?WriteCommand ;clear cursor
1698 22        1214   ret
1699           1215   
1699           1216   ;The following functions store and restore the values--------------------------------------------------------------------------
               1217   loadbyte mac
               1218       mov a, %0
               1219       movx @dptr, a
               1220       inc dptr
               1221   endmac
1699           1222   
1699           1223   Save_Configuration1:
1699 C0A8      1224       push IE ; Save the current state of bit EA in the stack
169B C2AF      1225       clr EA ; Disable interrupts
169D 75D108    1226       mov FCON, #0x08 ; Page Buffer Mapping Enabled (FPS = 1)
16A0 907F80    1227       mov dptr, #0x7f80 ; Last page of flash memory
16A3           1228       ; Save variables
16A3 E534      1229       mov a, temp_soak
16A5 F0        1229       movx @dptr, a
16A6 A3        1229       inc dptr ; @0x7f80
16A7 E535      1230       mov a, time_soak
16A9 F0        1230       movx @dptr, a
16AA A3        1230       inc dptr ; @0x7f81
16AB E536      1231       mov a, temp_refl
16AD F0        1231       movx @dptr, a
16AE A3        1231       inc dptr ; @0x7f82
16AF E537      1232       mov a, time_refl
16B1 F0        1232       movx @dptr, a
16B2 A3        1232       inc dptr ; @0x7f83
16B3 7455      1233       mov a, #0x55
16B5 F0        1233       movx @dptr, a
16B6 A3        1233       inc dptr ; First key value @0x7f84
16B7 74AA      1234       mov a, #0xAA
16B9 F0        1234       movx @dptr, a
16BA A3        1234       inc dptr ; Second key value @0x7f85
16BB 75D100    1235       mov FCON, #0x00 ; Page Buffer Mapping Disabled (FPS = 0) 
16BE 43D240    1236       orl EECON, #0b01000000 ; Enable auto-erase on next write sequence  
16C1 75D150    1237       mov FCON, #0x50 ; Write trigger first byte
16C4 75D1A0    1238       mov FCON, #0xA0 ; Write trigger second byte
16C7           1239       ; CPU idles until writing of flash completes.
16C7 75D100    1240       mov FCON, #0x00 ; Page Buffer Mapping Disabled (FPS = 0)
16CA 53D2BF    1241       anl EECON, #0b10111111 ; Disable auto-erase
16CD D0A8      1242       pop IE ; Restore the state of bit EA from the stack
16CF 22        1243   ret
16D0           1244   
16D0           1245   Save_Configuration2:
16D0 C0A8      1246       push IE ; Save the current state of bit EA in the stack
16D2 C2AF      1247       clr EA ; Disable interrupts
16D4 75D108    1248       mov FCON, #0x08 ; Page Buffer Mapping Enabled (FPS = 1)
16D7 907F00    1249       mov dptr, #0x7f00
16DA           1250       ; Save variables
16DA E534      1251       mov a, temp_soak
16DC F0        1251       movx @dptr, a
16DD A3        1251       inc dptr ; @0x7f00
16DE E535      1252       mov a, time_soak
16E0 F0        1252       movx @dptr, a
16E1 A3        1252       inc dptr ; @0x7f01
16E2 E536      1253       mov a, temp_refl
16E4 F0        1253       movx @dptr, a
16E5 A3        1253       inc dptr ; @0x7f02
16E6 E537      1254       mov a, time_refl
16E8 F0        1254       movx @dptr, a
16E9 A3        1254       inc dptr ; @0x7f03
16EA 7444      1255       mov a, #0x44
16EC F0        1255       movx @dptr, a
16ED A3        1255       inc dptr ; First key value @0x7f04
16EE 74BB      1256       mov a, #0xBB
16F0 F0        1256       movx @dptr, a
16F1 A3        1256       inc dptr ; Second key value @0x7f05
16F2 75D100    1257       mov FCON, #0x00 ; Page Buffer Mapping Disabled (FPS = 0) 
16F5 43D240    1258       orl EECON, #0b01000000 ; Enable auto-erase on next write sequence  
16F8 75D150    1259       mov FCON, #0x50 ; Write trigger first byte
16FB 75D1A0    1260       mov FCON, #0xA0 ; Write trigger second byte
16FE           1261       ; CPU idles until writing of flash completes.
16FE 75D100    1262       mov FCON, #0x00 ; Page Buffer Mapping Disabled (FPS = 0)
1701 53D2BF    1263       anl EECON, #0b10111111 ; Disable auto-erase
1704 D0A8      1264       pop IE ; Restore the state of bit EA from the stack
1706 22        1265   ret
1707           1266   
               1267   getbyte mac
               1268       clr a
               1269       movc a, @a+dptr
               1270       mov %0, a
               1271       inc dptr
               1272   endmac
1707           1273   
1707           1274   Load_Configuration1:
1707 907F84    1275       mov dptr, #0x7f84 ; First key value location.
170A E4        1276       clr a
170B 93        1276       movc a, @a+dptr
170C F8        1276       mov R0, a
170D A3        1276       inc dptr ; 0x7f84 should contain 0x55
170E B85548    1277       cjne R0, #0x55, Load_Defaults1
1711 E4        1278       clr a
1712 93        1278       movc a, @a+dptr
1713 F8        1278       mov R0, a
1714 A3        1278       inc dptr ; 0x7f85 should contain 0xAA
1715 B8AA41    1279       cjne R0, #0xAA, Load_Defaults1
1718           1280   ; Keys are good.  Get stored values.
1718 907F80    1281       mov dptr, #0x7f80
171B E4        1282       clr a
171C 93        1282       movc a, @a+dptr
171D F534      1282       mov Temp_soak, a
171F A3        1282       inc dptr ; 0x7f80
1720 E4        1283       clr a
1721 93        1283       movc a, @a+dptr
1722 F535      1283       mov Time_soak, a
1724 A3        1283       inc dptr ; 0x7f81
1725 E4        1284       clr a
1726 93        1284       movc a, @a+dptr
1727 F536      1284       mov Temp_refl, a
1729 A3        1284       inc dptr ; 0x7f82
172A E4        1285       clr a
172B 93        1285       movc a, @a+dptr
172C F537      1285       mov Time_refl, a
172E A3        1285       inc dptr ; 0x7f83
172F 22        1286   ret
1730           1287   
1730           1288   Load_Configuration2:
1730 907F04    1289       mov dptr, #0x7f04 ; First key value location.
1733 E4        1290       clr a
1734 93        1290       movc a, @a+dptr
1735 F8        1290       mov R0, a
1736 A3        1290       inc dptr ; 0x7f04 should contain 0x44
1737 B8442C    1291       cjne R0, #0x44, Load_Defaults2
173A E4        1292       clr a
173B 93        1292       movc a, @a+dptr
173C F8        1292       mov R0, a
173D A3        1292       inc dptr ; 0x7f05 should contain 0xBB
173E B8BB25    1293       cjne R0, #0xBB, Load_Defaults2
1741           1294   ; Keys are good.  Get stored values.
1741 907F00    1295       mov dptr, #0x7f00
1744 E4        1296       clr a
1745 93        1296       movc a, @a+dptr
1746 F534      1296       mov Temp_soak, a
1748 A3        1296       inc dptr ; 0x7f00
1749 E4        1297       clr a
174A 93        1297       movc a, @a+dptr
174B F535      1297       mov Time_soak, a
174D A3        1297       inc dptr ; 0x7f01
174E E4        1298       clr a
174F 93        1298       movc a, @a+dptr
1750 F536      1298       mov Temp_refl, a
1752 A3        1298       inc dptr ; 0x7f02
1753 E4        1299       clr a
1754 93        1299       movc a, @a+dptr
1755 F537      1299       mov Time_refl, a
1757 A3        1299       inc dptr ; 0x7f03
1758 22        1300   ret
1759           1301   
1759           1302   Load_Defaults1:
1759 753482    1303       mov Temp_soak, #130 ; Soak Tmp Range is 130-170
175C 75353C    1304       mov Time_soak, #0x3C ; Range 60-90 seconds
175F 7536DC    1305       mov Temp_refl, #220 ; Range 220-240
1762 75371E    1306       mov Time_refl, #0x1E ; Range 30-45 seconds
1765 22        1307       ret
1766           1308   
1766           1309   Load_Defaults2:
1766 75348C    1310       mov Temp_soak, #140 ; Soak Tmp Range is 130-170
1769 75354B    1311       mov Time_soak, #75 ; Range 60-90 seconds
176C 7536E6    1312       mov Temp_refl, #230 ; Range 220-240
176F 753723    1313       mov Time_refl, #35 ; Range 30-45 seconds
1772 22        1314       ret
1773           1315   ;-------------------------------------------------------------------------------------------------------------------------------
1773           1316   ;off state
1773           1317   
1773           1318   OFF_STATE:
1773           1319       ;**CLEAR SCREEN**
1773 7401      1320            mov a, #0x01
1775 120083    1320            lcall ?WriteCommand
1778           1321       ;OFF_STATE1:
1778           1322       
1778 20C5FD    1323       jb POWER_BUTTON, $ ; loop while the button is not pressed
177B C002      1324            push AR2
177D 7A32      1324            mov R2, #50
177F 120039    1324            lcall ?Wait_Milli_Seconds
1782 D002      1324            pop AR2 ; debounce time
1784 20C5EC    1325            jb POWER_BUTTON, OFF_STATE ; it was a bounce, try again
1787 30C5FD    1326            jnb POWER_BUTTON, $ ; loop while the button is pressed
178A 021924    1327       ljmp main
178D 22        1328   ret
178E           1329   ;-------------------------------------------------------------------------------------------------------------------------------
178E           1330   
178E           1331   ;***CHECK TEMPERATURE BY READING VOLTAGE AND CONVERTING
178E           1332   Check_Temp:
178E           1333       
178E           1334       ;jnb one_seconds_flag, Check_Temp_done
178E           1335       ;clr one_seconds_flag
178E           1336       
178E C297      1337       clr CE_ADC
1790 7801      1338            mov R0, #00000001B ; Start bit:1
1792 1203F4    1339            lcall DO_SPI_G
1795 7880      1340            mov R0, #10000000B ; Single ended, read channel 0
1797 1203F4    1341            lcall DO_SPI_G
179A E9        1342            mov a, R1          ; R1 contains bits 8 and 9
179B 5403      1343            anl a, #00000011B  ; We need only the two least significant bits
179D F54B      1344            mov Result+1, a    ; Save result high.
179F 7855      1345            mov R0, #55H ; It doesn't matter what we transmit...
17A1 1203F4    1346            lcall DO_SPI_G
17A4 894A      1347            mov Result+0, R1     ; R1 contains bits 0 to 7.  Save result low.
17A6 D297      1348            setb CE_ADC
17A8           1349   
17A8 C002      1350            push AR2
17AA 7A0A      1350            mov R2, #10
17AC 120039    1350            lcall ?Wait_Milli_Seconds
17AF D002      1350            pop AR2
17B1           1351       ; Copy the 10-bits of the ADC conversion into the 32-bits of 'x'
17B1 AE4A      1352            mov R6, Result+0
17B3 AF4B      1353            mov R7, Result+1
17B5 22        1354   ret
17B6           1355   
17B6           1356       
17B6           1357       
17B6           1358   ;***CALCULATES THE TEMPERATURE
17B6           1359   Average_Temp:
17B6 753D00    1360            mov x+0, #low (0 % 0x10000) 
17B9 753E00    1360            mov x+1, #high(0 % 0x10000) 
17BC 753F00    1360            mov x+2, #low (0 / 0x10000) 
17BF 754000    1360            mov x+3, #high(0 / 0x10000) 
17C2 7D64      1361       mov R5, #100
17C4           1362   Ave_loop:
17C4 12178E    1363       lcall Check_Temp
17C7 754400    1364       mov y+3, #0
17CA 754300    1365       mov y+2, #0
17CD 8F42      1366       mov y+1, R7
17CF 8E41      1367       mov y+0, R6
17D1 1201B5    1368       lcall add32
17D4 121873    1369       lcall Wait10us
17D7 DDEB      1370       djnz R5, Ave_loop
17D9 754164    1371            mov y+0, #low (100 % 0x10000) 
17DC 754200    1371            mov y+1, #high(100 % 0x10000) 
17DF 754300    1371            mov y+2, #low (100 / 0x10000) 
17E2 754400    1371            mov y+3, #high(100 / 0x10000) 
17E5 1202F7    1372       lcall div32
17E8           1373   
17E8           1374       ;**INSERT MATH FUNCTIONS
17E8           1375   
17E8 75414E    1376            mov y+0, #low (2894 % 0x10000) 
17EB 75420B    1376            mov y+1, #high(2894 % 0x10000) 
17EE 754300    1376            mov y+2, #low (2894 / 0x10000) 
17F1 754400    1376            mov y+3, #high(2894 / 0x10000)  ;6078; 2026
17F4 12026A    1377            lcall mul32
17F7 754110    1378            mov y+0, #low (10000 % 0x10000) 
17FA 754227    1378            mov y+1, #high(10000 % 0x10000) 
17FD 754300    1378            mov y+2, #low (10000 / 0x10000) 
1800 754400    1378            mov y+3, #high(10000 / 0x10000)  ;14000; 7000
1803 1202F7    1379            lcall div32
1806 754116    1380            mov y+0, #low (22 % 0x10000) 
1809 754200    1380            mov y+1, #high(22 % 0x10000) 
180C 754300    1380            mov y+2, #low (22 / 0x10000) 
180F 754400    1380            mov y+3, #high(22 / 0x10000) 
1812 1201B5    1381       lcall add32
1815 853D3B    1382       mov Temp_oven, x+0
1818           1383       ;add KTemp_oven, Temp_oven, #273
1818           1384   
1818           1385   Display_Temp_BCD_Or_Kelvin:
1818 1200F0    1386            lcall hex2bcd ; converts binary in x to BCD in BCD
181B           1387       ;mov a, K_or_C
181B           1388       ;cjne a, #1, Display_3_digit_BCD
181B           1389       ;mov a, KTemp_oven
181B           1390       ;SendToLCD
181B           1391       ;sjmp Send_Temp_Port
181B           1392   
181B           1393   Display_Temp_BCD:    
181B 1215C7    1394       lcall Display_3_digit_BCD
181E           1395   
181E           1396   Send_Temp_Port:
181E           1397       ;Send_BCD(bcd+4)
181E           1398       ;Send_BCD(bcd+3)
181E           1399       ;Send_BCD(bcd+2)
181E C000      1400       push ar0
1820 A846      1400       mov r0, bcd+1
1822 1200DA    1400       lcall ?Send_BCD
1825 D000      1400       pop ar0
1827           1400   
1827 C000      1401       push ar0
1829 A845      1401       mov r0, bcd+0
182B 1200DA    1401       lcall ?Send_BCD
182E D000      1401       pop ar0
1830           1401   
1830 740D      1402            mov a, #'\r'
1832 12047E    1403            lcall putchar
1835 740A      1404            mov a, #'\n'
1837 12047E    1405            lcall putchar
183A           1406   Check_Temp_done:
183A 22        1407   ret    
183B           1408   
183B           1409   ;-------------------------------------------------------------------------------------------------------------------------------
183B           1410   
183B           1411   ;Time wait
183B           1412   
183B           1413   Wait_One_Second:
183B C002      1414            push AR2
183D 7AFA      1414            mov R2, #250
183F 120039    1414            lcall ?Wait_Milli_Seconds
1842 D002      1414            pop AR2
1844 C002      1415            push AR2
1846 7AFA      1415            mov R2, #250
1848 120039    1415            lcall ?Wait_Milli_Seconds
184B D002      1415            pop AR2
184D C002      1416            push AR2
184F 7AFA      1416            mov R2, #250
1851 120039    1416            lcall ?Wait_Milli_Seconds
1854 D002      1416            pop AR2
1856 C002      1417            push AR2
1858 7AFA      1417            mov R2, #250
185A 120039    1417            lcall ?Wait_Milli_Seconds
185D D002      1417            pop AR2
185F 22        1418   ret
1860           1419   
1860           1420   Wait_Half_Second:
1860 C002      1421            push AR2
1862 7AFA      1421            mov R2, #250
1864 120039    1421            lcall ?Wait_Milli_Seconds
1867 D002      1421            pop AR2
1869 C002      1422            push AR2
186B 7AFA      1422            mov R2, #250
186D 120039    1422            lcall ?Wait_Milli_Seconds
1870 D002      1422            pop AR2
1872 22        1423   ret
1873           1424   
1873           1425   
1873           1426   
1873           1427   Wait10us:
1873 784A      1428       mov R0, #74
1875 D8FE      1429       djnz R0, $
1877 22        1430   ret
1878           1431   ; ==================================================================================================
1878           1432   
1878           1433   ;-------------------------------------;
1878           1434   ; ISR for Timer 1.  Used to playback  ;
1878           1435   ; the WAV file stored in the SPI      ;
1878           1436   ; flash memory.                       ;
1878           1437   ;-------------------------------------;
1878           1438   Timer1_ISR:
1878           1439            ; The registers used in the ISR must be saved in the stack
1878 C0E0      1440            push acc
187A C0D0      1441            push psw
187C           1442            
187C           1443            ; Check if the play counter is zero.  If so, stop playing sound.
187C E54C      1444            mov a, w+0
187E 454D      1445            orl a, w+1
1880 454E      1446            orl a, w+2
1882 601C      1447            jz stop_playing
1884           1448            
1884           1449            ; Decrement play counter 'w'.  In this implementation 'w' is a 24-bit counter.
1884 74FF      1450            mov a, #0xff
1886 154C      1451            dec w+0
1888 B54C07    1452            cjne a, w+0, keep_playing
188B 154D      1453            dec w+1
188D B54D02    1454            cjne a, w+1, keep_playing
1890 154E      1455            dec w+2
1892           1456            
1892           1457   keep_playing:
1892 D2A6      1458            setb SPEAKER
1894 12040D    1459            lcall Send_SPI ; Read the next byte from the SPI Flash...
1897           1460            ;mov P0, a ; WARNING: Remove this if not using an external DAC to use the pins of P0 as GPIO
1897 2480      1461            add a, #0x80
1899 F5AD      1462            mov DADH, a ; Output to DAC. DAC output is pin P2.3
189B 43A440    1463            orl DADC, #0b_0100_0000 ; Start DAC by setting GO/BSY=1
189E 800C      1464            sjmp Timer1_ISR_Done
18A0           1465   
18A0           1466   stop_playing:
18A0 C28E      1467            clr TR1 ; Stop timer 1
18A2 D2A5      1468            setb FLASH_CE  ; Disable SPI Flash
18A4 C2A6      1469            clr SPEAKER ; Turn off speaker.  Removes hissing noise when not playing sound.
18A6 75AD80    1470            mov DADH, #0x80 ; middle of range
18A9 43A440    1471            orl DADC, #0b_0100_0000 ; Start DAC by setting GO/BSY=1
18AC           1472   
18AC           1473   Timer1_ISR_Done:         
18AC D0D0      1474            pop psw
18AE D0E0      1475            pop acc
18B0 32        1476            reti
18B1           1477   ; ==================================================================================================
18B1           1478   
18B1           1479   ;---------------------------------;
18B1           1480   ; Routine to initialize the ISR   ;
18B1           1481   ; for timer 2                     ;
18B1           1482   ;---------------------------------;
18B1           1483   Timer2_init:
18B1 75C800    1484       mov T2CON, #0
18B4 75CDA9    1485       mov TH2, #high(TIMER2_RELOAD)
18B7 75CC9A    1486       mov TL2, #low(TIMER2_RELOAD)
18BA           1487   
18BA 75CBA9    1488       mov RCAP2H, #high(TIMER2_RELOAD)
18BD 75CA9A    1489       mov RCAP2L, #low(TIMER2_RELOAD)
18C0           1490   
18C0 E4        1491       clr a
18C1 F530      1492       mov Count1ms+0, a
18C3 F531      1493       mov Count1ms+1, a
18C5 F532      1494       mov Count5sec , a
18C7 D2AD      1495       setb ET2
18C9 D2CA      1496       setb TR2
18CB C202      1497       clr enable_clk
18CD 22        1498       ret
18CE           1499   
18CE           1500   ;---------------------------------;
18CE           1501   ; ISR for timer 2                 ;
18CE           1502   ;---------------------------------;
18CE           1503   Timer2_ISR:
18CE C2CF      1504       clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
18D0 B290      1505       cpl P1.0 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
18D2           1506            
18D2           1507            ; The two registers used in the ISR must be saved in the stack
18D2 C0E0      1508       push acc
18D4 C0D0      1509       push psw
18D6           1510            
18D6           1511            ; Increment the 16-bit one mili second counter
18D6 0530      1512            inc Count1ms+0    ; Increment the low 8-bits first
18D8 E530      1513            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
18DA 7002      1514            jnz Inc_Done
18DC 0531      1515            inc Count1ms+1
18DE           1516   
18DE           1517   Inc_Done:
18DE           1518   
18DE           1519   ;**Oven Power Output-------------------
18DE           1520       ; Do the PWM thing
18DE           1521            ; Check if Count1ms > pwm_ratio (this is a 16-bit compare)
18DE C3        1522            clr c
18DF E54F      1523            mov a, pwm_ratio+0
18E1 9530      1524            subb a, Count1ms+0
18E3 E550      1525            mov a, pwm_ratio+1
18E5 9531      1526            subb a, Count1ms+1
18E7           1527            ; if Count1ms > pwm_ratio  the carry is set.  Just copy the carry to the pwm output pin:
18E7 9290      1528            mov PWM_OUTPUT, c
18E9           1529   ;**----------------------------------
18E9           1530            ; Check if one second has passed
18E9 E530      1531            mov a, Count1ms+0
18EB B4E831    1532            cjne a, #low(1000), Timer2_ISR_done ; Warning: this instruction changes the carry flag!
18EE E531      1533            mov a, Count1ms+1
18F0 B4032C    1534            cjne a, #high(1000), Timer2_ISR_done
18F3           1535            
18F3           1536            ; 1000 milliseconds have passed.  Set a flag so the main program knows
18F3 D200      1537            setb one_seconds_flag ; Let the main program know one second had passed
18F5           1538       
18F5 0532      1539       inc Count5sec
18F7 E532      1540       mov a, Count5sec
18F9 B40505    1541       cjne a, #5, Set_5sec_flag_done
18FC D201      1542       setb five_seconds_flag
18FE E4        1543       clr a
18FF F532      1544       mov Count5sec, a
1901           1545       
1901           1546   Set_5sec_flag_done:
1901 E4        1547            clr a
1902 F530      1548            mov Count1ms+0, a
1904 F531      1549            mov Count1ms+1, a
1906           1550   
1906 300216    1551       jnb enable_clk, Timer2_ISR_done ;if the clk is enabled, increment the second. Otherwise skip
1909           1552   ; Increment the run time counter and state time counter
1909 E538      1553            mov a, Run_time_seconds
190B 2401      1554            add a, #0x01
190D D4        1555            da a
190E F538      1556       mov Run_time_seconds, a
1910           1557       ;check sec overflow
1910 B4600A    1558       cjne a, #0x60, Check_sec_overflow_done
1913 753800    1559       mov Run_time_seconds, #0x00
1916 E539      1560       mov a, Run_time_minutes ;inc min
1918 2401      1561       add a, #1
191A D4        1562       da a
191B F539      1563       mov Run_time_minutes, a
191D           1564   Check_sec_overflow_done:
191D 053A      1565       inc State_time
191F           1566   Timer2_ISR_done:
191F D0D0      1567            pop psw
1921 D0E0      1568            pop acc
1923 32        1569            reti
1924           1570   
1924           1571   
1924           1572   ; ==================================================================================================
1924           1573   
1924           1574   main:
1924 75817F    1575       mov SP, #0x7F
1927 1218B1    1576       lcall Timer2_Init
192A           1577       ;lcall INI_SPI
192A 120088    1578       lcall LCD_4BIT
192D 120466    1579       lcall InitSerialPort
1930 121412    1580       lcall INI_PLAYBACK_TEMP
1933           1581       ;orl AUXR, #0x01 ; pin 4.4
1933           1582       ; In case you decide to use the pins of P0, configure the port in bidirectional mode. Can be ignored
1933 75E600    1583       mov P0M0, #0
1936 75E700    1584       mov P0M1, #0
1939 D2AF      1585       setb EA   ;Enable global enterupt
193B D204      1586       setb SPAN_ENG ; setb for english, clr for spanish
193D           1587   
193D           1588       ;Set the default pwm output ratio to 0%.  That is 0ms of every second:
193D 754F00    1589            mov pwm_ratio+0, #low(0)
1940 755000    1590            mov pwm_ratio+1, #high(0)
1943 753300    1591       mov States, #0
1946 755300    1592       mov Profile, #0
1949 121707    1593       lcall Load_Configuration1
194C           1594       ;setb FAN
194C 1215E4    1595       lcall Animation 
194F           1596   
194F           1597   
194F           1598   state0: ; idle 
194F           1599   ;***initial parameters displayed***
194F 754F00    1600       mov pwm_ratio+0, #low(0)
1952 755000    1601            mov pwm_ratio+1, #high(0)
1955           1602       
1955           1603       ;Displays Soak Temp and Time
1955 12151A    1604       lcall State0_display
1958           1605       ;check power on
1958 12052A    1606       lcall CHECK_POWER
195B           1607       ; check the parameters being pressed
195B 120486    1608       lcall CHECK_STIME
195E 1204AF    1609       lcall CHECK_STEMP
1961 1204D8    1610       lcall CHECK_RTIME
1964 120501    1611       lcall CHECK_RTEMP
1967 120546    1612       lcall CHECK_PROFILE
196A           1613   
196A 12056C    1614       lcall CHECK_SPAN_OR_ENGL
196D           1615       
196D 2085DF    1616       jb NEXT_STATE_BUTTON, state0
1970 C002      1617            push AR2
1972 7A32      1617            mov R2, #50
1974 120039    1617            lcall ?Wait_Milli_Seconds
1977 D002      1617            pop AR2 ; debounce time
1979 2085D3    1618            jb NEXT_STATE_BUTTON, state0 ; if button not pressed, loop
197C 3085FD    1619            jnb NEXT_STATE_BUTTON, $
197F           1620   state0_done:
197F 753301    1621       mov States, #1
1982 753A00    1622       mov State_time, #0
1985 D202      1623       setb enable_clk
1987           1624       ; ***play audio***
1987           1624       ;cjne sound_flag, #0, $
1987           1624       
1987 C28E      1624       clr TR1 ; Stop Timer 1 ISR from playing previous request
1989 D2A5      1624       setb FLASH_CE
198B           1624       ;setb sound_flag ; sound starts
198B C2A6      1624       clr SPEAKER ; Turn off speaker
198D C2A5      1624       clr FLASH_CE ; Enable SPI Flash
198F 7403      1624       mov a, #READ_BYTES
1991 12040D    1624       lcall Send_SPI
1994           1624       ; Set the initial position in memory where to start playing
1994           1624       
1994 7418      1624       mov a, #0x18 ; change initial position
1996 12040D    1624       lcall Send_SPI
1999 74CB      1624       mov a, #0xcb ; next memory position
199B 12040D    1624       lcall Send_SPI
199E 74A8      1624       mov a, #0xa8 ; next memory position
19A0 12040D    1624       lcall Send_SPI
19A3 7418      1624       mov a, #0x18 ; request first byte to send to DAC
19A5 12040D    1624       lcall Send_SPI
19A8           1624       
19A8           1624       ; How many bytes to play?
19A8 754E02    1624       mov w+2, #0x02 ; Load the high byte of the number of bytes to play
19AB 754D0F    1624       mov w+1, #0x0f ; Load the middle byte of the number of bytes to play
19AE 754C58    1624       mov w+0, #0x58 ; Load the low byte of the number of bytes to play
19B1           1624       
19B1           1624       
19B1 D2A6      1624       setb SPEAKER ;Turn on speaker
19B3 D28E      1624       setb TR1 ;Start playback by enabling Timer1
19B5           1624       ;clr sound_flag ; sound ends
19B5 12183B    1625       lcall Wait_One_Second
19B8           1626        
19B8           1627   
19B8           1628   state1_beginning:
19B8           1629   
19B8           1630       ;Start Run Time
19B8 753800    1631       mov Run_time_seconds, #0 ; time starts at 0:00
19BB 753900    1632       mov Run_time_minutes, #0
19BE 753A00    1633       mov State_time, #0
19C1           1634   
19C1           1635       ;***clear the screen and set new display***
19C1 121474    1636       lcall Initialize_State_Display
19C4 C0E0      1637            push acc
19C6 7407      1637            mov a, #7
19C8 14        1637            dec a
19C9 1200BD    1637            lcall ?Set_Cursor_2 ; Select column and row
19CC D0E0      1637            pop acc
19CE C083      1638            push dph
19D0 C082      1638            push dpl
19D2 C0E0      1638            push acc
19D4 9003C7    1638            mov dptr, #Ramp2Soak
19D7 1200B2    1638            lcall ?Send_Constant_String
19DA D0E0      1638            pop acc
19DC D082      1638            pop dpl
19DE D083      1638            pop dph; displays current state
19E0           1639   
19E0           1640       ;Set the default pwm output ratio to 100%.  That is 1000ms of every second:
19E0 754FE8    1641            mov pwm_ratio+0, #low(1000)
19E3 755003    1642            mov pwm_ratio+1, #high(1000)
19E6 300433    1643       jnb SPAN_ENG, SPANISH1
19E9           1644       ; ***play audio***
19E9           1644       ;cjne sound_flag, #0, $
19E9 121860    1644       lcall Wait_Half_Second
19EC C28E      1644       clr TR1 ; Stop Timer 1 ISR from playing previous request
19EE D2A5      1644       setb FLASH_CE
19F0           1644       ;setb sound_flag ; sound starts
19F0 C2A6      1644       clr SPEAKER ; Turn off speaker
19F2 C2A5      1644       clr FLASH_CE ; Enable SPI Flash
19F4 7403      1644       mov a, #READ_BYTES
19F6 12040D    1644       lcall Send_SPI
19F9           1644       ; Set the initial position in memory where to start playing
19F9           1644       
19F9 7400      1644       mov a, #0x00 ; change initial position
19FB 12040D    1644       lcall Send_SPI
19FE 7400      1644       mov a, #0x00 ; next memory position
1A00 12040D    1644       lcall Send_SPI
1A03 742D      1644       mov a, #0x2d ; next memory position
1A05 12040D    1644       lcall Send_SPI
1A08 7400      1644       mov a, #0x00 ; request first byte to send to DAC
1A0A 12040D    1644       lcall Send_SPI
1A0D           1644       
1A0D           1644       ; How many bytes to play?
1A0D 754E00    1644       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1A10 754D4E    1644       mov w+1, #0x4e ; Load the middle byte of the number of bytes to play
1A13 754C20    1644       mov w+0, #0x20 ; Load the low byte of the number of bytes to play
1A16           1644       
1A16           1644       
1A16 D2A6      1644       setb SPEAKER ;Turn on speaker
1A18 D28E      1644       setb TR1 ;Start playback by enabling Timer1
1A1A           1644       ;clr sound_flag ; sound ends
1A1A           1645       ;lcall Wait_One_Second
1A1A 8036      1646       sjmp state1
1A1C           1647   SPANISH1:
1A1C           1648       ; ***play audio***
1A1C           1648       ;cjne sound_flag, #0, $
1A1C 121860    1648       lcall Wait_Half_Second
1A1F C28E      1648       clr TR1 ; Stop Timer 1 ISR from playing previous request
1A21 D2A5      1648       setb FLASH_CE
1A23           1648       ;setb sound_flag ; sound starts
1A23 C2A6      1648       clr SPEAKER ; Turn off speaker
1A25 C2A5      1648       clr FLASH_CE ; Enable SPI Flash
1A27 7403      1648       mov a, #READ_BYTES
1A29 12040D    1648       lcall Send_SPI
1A2C           1648       ; Set the initial position in memory where to start playing
1A2C           1648       
1A2C 7405      1648       mov a, #0x05 ; change initial position
1A2E 12040D    1648       lcall Send_SPI
1A31 7457      1648       mov a, #0x57 ; next memory position
1A33 12040D    1648       lcall Send_SPI
1A36 7430      1648       mov a, #0x30 ; next memory position
1A38 12040D    1648       lcall Send_SPI
1A3B 7405      1648       mov a, #0x05 ; request first byte to send to DAC
1A3D 12040D    1648       lcall Send_SPI
1A40           1648       
1A40           1648       ; How many bytes to play?
1A40 754E00    1648       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1A43 754DEA    1648       mov w+1, #0xea ; Load the middle byte of the number of bytes to play
1A46 754C60    1648       mov w+0, #0x60 ; Load the low byte of the number of bytes to play
1A49           1648       
1A49           1648       
1A49 D2A6      1648       setb SPEAKER ;Turn on speaker
1A4B D28E      1648       setb TR1 ;Start playback by enabling Timer1
1A4D           1648       ;clr sound_flag ; sound ends
1A4D           1649       ;mov FAN, #1
1A4D 8003      1650       sjmp state1
1A4F           1651       
1A4F           1652   main_1:
1A4F 021924    1653            ljmp main
1A52           1654   
1A52           1655   state1: ; ramp to soak
1A52           1656       ;check power on
1A52 12052A    1657       lcall CHECK_POWER
1A55           1658       ;Update Time and Temp
1A55 1214F3    1659       lcall Update_Display
1A58 1217B6    1660       lcall Average_Temp
1A5B           1661       ;lcall CHECK_SPAN_OR_ENGL
1A5B           1662       
1A5B           1663       ;Decides if going to Spanish or English
1A5B           1664       ;jb SPAN_ENG, SPANISH1
1A5B 1205B2    1665       lcall SOUND_FSM
1A5E           1666   ;SPANISH1:
1A5E           1667       ;lcall SOUND_FSM_S
1A5E           1668   
1A5E           1669   Check_Temp_done1:
1A5E           1670   
1A5E           1671       ;check if temp is below 150 
1A5E E53B      1672       mov a, Temp_oven           
1A60 9534      1673       subb a, Temp_soak
1A62 5014      1674       jnc state1_done        ; if greater, jump to state 2
1A64 6012      1675       jz state1_done         ; if equal to, jump to state 2
1A66 4000      1676       jc Check_state1_safety ; if less than, check state time
1A68           1677   Check_state1_safety:       ; safety
1A68 E53B      1678       mov a, Temp_oven           
1A6A 9432      1679       subb a, #50
1A6C 50E4      1680       jnc state1             ; if greater, go back to state1
1A6E E53A      1681       mov a, State_time      ; if less than 50C, check if state time is too long
1A70 943C      1682       subb a, #60
1A72 50DB      1683       jnc main_1             ; if greater, restart
1A74 60D9      1684       jz main_1              ; if equal to, restart
1A76 40DA      1685       jc state1              ; if less than, go back to state1
1A78           1686   ;*Checking moving to states with buttons---- 
1A78           1687   ;*Will remove after proper temperature reading----
1A78           1688   
1A78           1689       ;jb NEXT_STATE_BUTTON, state1
1A78           1690       ;Wait_Milli_Seconds(#50) ; debounce time
1A78           1691            ;jb NEXT_STATE_BUTTON, state1 ; if button not pressed, loop
1A78           1692            ;jnb NEXT_STATE_BUTTON, $ 
1A78           1693   
1A78           1694   state1_done:
1A78           1695       ;mov FAN, #0
1A78 753302    1696       mov States, #2
1A7B           1697   
1A7B           1698   ; preheat/soak
1A7B           1699   state2_beginning: 
1A7B 753A00    1700       mov State_time, #0;x00 ;clear the state time
1A7E           1701       ;***clear the screen and set new display***
1A7E 121474    1702       lcall Initialize_State_Display
1A81 C0E0      1703            push acc
1A83 7407      1703            mov a, #7
1A85 14        1703            dec a
1A86 1200BD    1703            lcall ?Set_Cursor_2 ; Select column and row
1A89 D0E0      1703            pop acc
1A8B C083      1704            push dph
1A8D C082      1704            push dpl
1A8F C0E0      1704            push acc
1A91 9003D1    1704            mov dptr, #Soak
1A94 1200B2    1704            lcall ?Send_Constant_String
1A97 D0E0      1704            pop acc
1A99 D082      1704            pop dpl
1A9B D083      1704            pop dph ;displays current state
1A9D           1705   
1A9D           1706       ;Set the default pwm output ratio to 20%.  That is 200ms of every second:
1A9D 754FC8    1707            mov pwm_ratio+0, #low(200)
1AA0 755000    1708            mov pwm_ratio+1, #high(000)
1AA3           1709       ; Produces SOAK on speaker
1AA3 300433    1710       jnb SPAN_ENG, SPANISH2
1AA6           1711       ; ***play audio***
1AA6           1711       ;cjne sound_flag, #0, $
1AA6 121860    1711       lcall Wait_Half_Second
1AA9 C28E      1711       clr TR1 ; Stop Timer 1 ISR from playing previous request
1AAB D2A5      1711       setb FLASH_CE
1AAD           1711       ;setb sound_flag ; sound starts
1AAD C2A6      1711       clr SPEAKER ; Turn off speaker
1AAF C2A5      1711       clr FLASH_CE ; Enable SPI Flash
1AB1 7403      1711       mov a, #READ_BYTES
1AB3 12040D    1711       lcall Send_SPI
1AB6           1711       ; Set the initial position in memory where to start playing
1AB6           1711       
1AB6 7400      1711       mov a, #0x00 ; change initial position
1AB8 12040D    1711       lcall Send_SPI
1ABB 7444      1711       mov a, #0x44 ; next memory position
1ABD 12040D    1711       lcall Send_SPI
1AC0 74DD      1711       mov a, #0xdd ; next memory position
1AC2 12040D    1711       lcall Send_SPI
1AC5 7400      1711       mov a, #0x00 ; request first byte to send to DAC
1AC7 12040D    1711       lcall Send_SPI
1ACA           1711       
1ACA           1711       ; How many bytes to play?
1ACA 754E00    1711       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1ACD 754D4E    1711       mov w+1, #0x4e ; Load the middle byte of the number of bytes to play
1AD0 754C20    1711       mov w+0, #0x20 ; Load the low byte of the number of bytes to play
1AD3           1711       
1AD3           1711       
1AD3 D2A6      1711       setb SPEAKER ;Turn on speaker
1AD5 D28E      1711       setb TR1 ;Start playback by enabling Timer1
1AD7           1711       ;clr sound_flag ; sound ends
1AD7 8031      1712       sjmp state2
1AD9           1713   SPANISH2:
1AD9           1714       ; ***play audio***
1AD9           1714       ;cjne sound_flag, #0, $
1AD9 121860    1714       lcall Wait_Half_Second
1ADC C28E      1714       clr TR1 ; Stop Timer 1 ISR from playing previous request
1ADE D2A5      1714       setb FLASH_CE
1AE0           1714       ;setb sound_flag ; sound starts
1AE0 C2A6      1714       clr SPEAKER ; Turn off speaker
1AE2 C2A5      1714       clr FLASH_CE ; Enable SPI Flash
1AE4 7403      1714       mov a, #READ_BYTES
1AE6 12040D    1714       lcall Send_SPI
1AE9           1714       ; Set the initial position in memory where to start playing
1AE9           1714       
1AE9 7406      1714       mov a, #0x06 ; change initial position
1AEB 12040D    1714       lcall Send_SPI
1AEE 741A      1714       mov a, #0x1a ; next memory position
1AF0 12040D    1714       lcall Send_SPI
1AF3 7480      1714       mov a, #0x80 ; next memory position
1AF5 12040D    1714       lcall Send_SPI
1AF8 7406      1714       mov a, #0x06 ; request first byte to send to DAC
1AFA 12040D    1714       lcall Send_SPI
1AFD           1714       
1AFD           1714       ; How many bytes to play?
1AFD 754E00    1714       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1B00 754D9C    1714       mov w+1, #0x9c ; Load the middle byte of the number of bytes to play
1B03 754C40    1714       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
1B06           1714       
1B06           1714       
1B06 D2A6      1714       setb SPEAKER ;Turn on speaker
1B08 D28E      1714       setb TR1 ;Start playback by enabling Timer1
1B0A           1714       ;clr sound_flag ; sound ends
1B0A           1715   
1B0A           1716   state2:
1B0A           1717       ;check power on
1B0A 12052A    1718       lcall CHECK_POWER 
1B0D           1719       ;Update Time and Temp
1B0D 1214F3    1720       lcall Update_Display
1B10 1217B6    1721       lcall Average_Temp
1B13           1722       ;lcall CHECK_SPAN_OR_ENGL
1B13           1723   
1B13           1724       ;jb SPAN_ENG, SPANISH2
1B13 1205B2    1725       lcall SOUND_FSM
1B16 8000      1726       sjmp Check_Temp_done2
1B18           1727   ;SPANISH2:
1B18           1728       ;lcall SOUND_FSM_S
1B18           1729       
1B18           1730       ; loop back to state2 if run time is less than soak time. If greater than jump to state3 cuz of overflow of time
1B18           1731   Check_Temp_done2:     
1B18 E53A      1732       mov a, State_time
1B1A 9535      1733       subb a, Time_soak
1B1C 5002      1734       jnc state2_done
1B1E 40EA      1735       jc state2
1B20           1736   
1B20           1737   state2_done:
1B20 753A03    1738       mov State_time, #3
1B23           1739   
1B23           1740   ; ramp to peak
1B23           1741   state3_beginning:
1B23           1742       ;setb OVEN_POWER ;turn power on 100%
1B23           1743   
1B23           1744       ;***clear the screen and set new display***
1B23 121474    1745       lcall Initialize_State_Display
1B26 C0E0      1746            push acc
1B28 7407      1746            mov a, #7
1B2A 14        1746            dec a
1B2B 1200BD    1746            lcall ?Set_Cursor_2 ; Select column and row
1B2E D0E0      1746            pop acc
1B30 C083      1747            push dph
1B32 C082      1747            push dpl
1B34 C0E0      1747            push acc
1B36 9003D6    1747            mov dptr, #Ramp2Peak
1B39 1200B2    1747            lcall ?Send_Constant_String
1B3C D0E0      1747            pop acc
1B3E D082      1747            pop dpl
1B40 D083      1747            pop dph
1B42           1748   
1B42           1749       ;Set the default pwm output ratio to 100%.  That is 1000ms of every second:
1B42 754FE8    1750            mov pwm_ratio+0, #low(1000)
1B45 755003    1751            mov pwm_ratio+1, #high(1000)
1B48           1752   
1B48           1753       ; Produces RAMP TO PEAK on speaker
1B48 300433    1754       jnb SPAN_ENG, SPANISH3
1B4B           1755       ; ***play audio***
1B4B           1755       ;cjne sound_flag, #0, $
1B4B 121860    1755       lcall Wait_Half_Second
1B4E C28E      1755       clr TR1 ; Stop Timer 1 ISR from playing previous request
1B50 D2A5      1755       setb FLASH_CE
1B52           1755       ;setb sound_flag ; sound starts
1B52 C2A6      1755       clr SPEAKER ; Turn off speaker
1B54 C2A5      1755       clr FLASH_CE ; Enable SPI Flash
1B56 7403      1755       mov a, #READ_BYTES
1B58 12040D    1755       lcall Send_SPI
1B5B           1755       ; Set the initial position in memory where to start playing
1B5B           1755       
1B5B 7400      1755       mov a, #0x00 ; change initial position
1B5D 12040D    1755       lcall Send_SPI
1B60 748B      1755       mov a, #0x8b ; next memory position
1B62 12040D    1755       lcall Send_SPI
1B65 74CA      1755       mov a, #0xca ; next memory position
1B67 12040D    1755       lcall Send_SPI
1B6A 7400      1755       mov a, #0x00 ; request first byte to send to DAC
1B6C 12040D    1755       lcall Send_SPI
1B6F           1755       
1B6F           1755       ; How many bytes to play?
1B6F 754E00    1755       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1B72 754D75    1755       mov w+1, #0x75 ; Load the middle byte of the number of bytes to play
1B75 754C30    1755       mov w+0, #0x30 ; Load the low byte of the number of bytes to play
1B78           1755       
1B78           1755       
1B78 D2A6      1755       setb SPEAKER ;Turn on speaker
1B7A D28E      1755       setb TR1 ;Start playback by enabling Timer1
1B7C           1755       ;clr sound_flag ; sound ends
1B7C 8031      1756       sjmp state3
1B7E           1757   SPANISH3:
1B7E           1758       ; ***play audio***
1B7E           1758       ;cjne sound_flag, #0, $
1B7E 121860    1758       lcall Wait_Half_Second
1B81 C28E      1758       clr TR1 ; Stop Timer 1 ISR from playing previous request
1B83 D2A5      1758       setb FLASH_CE
1B85           1758       ;setb sound_flag ; sound starts
1B85 C2A6      1758       clr SPEAKER ; Turn off speaker
1B87 C2A5      1758       clr FLASH_CE ; Enable SPI Flash
1B89 7403      1758       mov a, #READ_BYTES
1B8B 12040D    1758       lcall Send_SPI
1B8E           1758       ; Set the initial position in memory where to start playing
1B8E           1758       
1B8E 7406      1758       mov a, #0x06 ; change initial position
1B90 12040D    1758       lcall Send_SPI
1B93 74B6      1758       mov a, #0xb6 ; next memory position
1B95 12040D    1758       lcall Send_SPI
1B98 74C0      1758       mov a, #0xc0 ; next memory position
1B9A 12040D    1758       lcall Send_SPI
1B9D 7406      1758       mov a, #0x06 ; request first byte to send to DAC
1B9F 12040D    1758       lcall Send_SPI
1BA2           1758       
1BA2           1758       ; How many bytes to play?
1BA2 754E00    1758       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1BA5 754D75    1758       mov w+1, #0x75 ; Load the middle byte of the number of bytes to play
1BA8 754C30    1758       mov w+0, #0x30 ; Load the low byte of the number of bytes to play
1BAB           1758       
1BAB           1758       
1BAB D2A6      1758       setb SPEAKER ;Turn on speaker
1BAD D28E      1758       setb TR1 ;Start playback by enabling Timer1
1BAF           1758       ;clr sound_flag ; sound ends
1BAF           1759   
1BAF           1760   state3: 
1BAF           1761       ;check power on
1BAF 12052A    1762       lcall CHECK_POWER
1BB2 1217B6    1763       lcall Average_Temp
1BB5           1764       ;lcall CHECK_SPAN_OR_ENGL
1BB5           1765       
1BB5           1766       ;Update Time and Temp
1BB5 1214F3    1767       lcall Update_Display
1BB8           1768       ;jb SPAN_ENG, SPANISH3
1BB8 1205B2    1769       lcall SOUND_FSM
1BBB 8000      1770       sjmp Check_Temp_done3
1BBD           1771   ;SPANISH3:
1BBD           1772       ;lcall SOUND_FSM_S
1BBD           1773       
1BBD           1774   Check_Temp_done3:  
1BBD           1775    
1BBD E53B      1776       mov a, Temp_oven           
1BBF 9536      1777       subb a, Temp_refl
1BC1 5004      1778       jnc state3_done    ; if greater, jump to state 4
1BC3 6002      1779       jz state3_done ; if equal to, jump to state 4
1BC5 40E8      1780       jc state3 ; if less than, go back to state3
1BC7           1781    
1BC7           1782   state3_done:
1BC7 753A04    1783       mov State_time, #4
1BCA           1784   
1BCA           1785   ; reflow 
1BCA           1786   state4_beginning:
1BCA           1787       
1BCA 753A00    1788       mov State_time, #0;x00 clear the state time
1BCD           1789       ;***clear the screen and set new display***
1BCD 121474    1790       lcall Initialize_State_Display
1BD0 C0E0      1791            push acc
1BD2 7407      1791            mov a, #7
1BD4 14        1791            dec a
1BD5 1200BD    1791            lcall ?Set_Cursor_2 ; Select column and row
1BD8 D0E0      1791            pop acc
1BDA C083      1792            push dph
1BDC C082      1792            push dpl
1BDE C0E0      1792            push acc
1BE0 9003E0    1792            mov dptr, #Reflow
1BE3 1200B2    1792            lcall ?Send_Constant_String
1BE6 D0E0      1792            pop acc
1BE8 D082      1792            pop dpl
1BEA D083      1792            pop dph
1BEC           1793   
1BEC           1794       ;Set the default pwm output ratio to 20%.  That is 200ms of every second:
1BEC 754FC8    1795            mov pwm_ratio+0, #low(200)
1BEF 755000    1796            mov pwm_ratio+1, #high(000)
1BF2           1797   
1BF2           1798       ; Produces REFLOW on speaker
1BF2 300433    1799       jnb SPAN_ENG, SPANISH4
1BF5           1800       ; ***play audio***
1BF5           1800       ;cjne sound_flag, #0, $
1BF5 121860    1800       lcall Wait_Half_Second
1BF8 C28E      1800       clr TR1 ; Stop Timer 1 ISR from playing previous request
1BFA D2A5      1800       setb FLASH_CE
1BFC           1800       ;setb sound_flag ; sound starts
1BFC C2A6      1800       clr SPEAKER ; Turn off speaker
1BFE C2A5      1800       clr FLASH_CE ; Enable SPI Flash
1C00 7403      1800       mov a, #READ_BYTES
1C02 12040D    1800       lcall Send_SPI
1C05           1800       ; Set the initial position in memory where to start playing
1C05           1800       
1C05 7400      1800       mov a, #0x00 ; change initial position
1C07 12040D    1800       lcall Send_SPI
1C0A 74F0      1800       mov a, #0xf0 ; next memory position
1C0C 12040D    1800       lcall Send_SPI
1C0F 7463      1800       mov a, #0x63 ; next memory position
1C11 12040D    1800       lcall Send_SPI
1C14 7400      1800       mov a, #0x00 ; request first byte to send to DAC
1C16 12040D    1800       lcall Send_SPI
1C19           1800       
1C19           1800       ; How many bytes to play?
1C19 754E00    1800       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1C1C 754D59    1800       mov w+1, #0x59 ; Load the middle byte of the number of bytes to play
1C1F 754CD8    1800       mov w+0, #0xd8 ; Load the low byte of the number of bytes to play
1C22           1800       
1C22           1800       
1C22 D2A6      1800       setb SPEAKER ;Turn on speaker
1C24 D28E      1800       setb TR1 ;Start playback by enabling Timer1
1C26           1800       ;clr sound_flag ; sound ends
1C26 8031      1801       sjmp state4
1C28           1802   SPANISH4:
1C28           1803       ; ***play audio***
1C28           1803       ;cjne sound_flag, #0, $
1C28 121860    1803       lcall Wait_Half_Second
1C2B C28E      1803       clr TR1 ; Stop Timer 1 ISR from playing previous request
1C2D D2A5      1803       setb FLASH_CE
1C2F           1803       ;setb sound_flag ; sound starts
1C2F C2A6      1803       clr SPEAKER ; Turn off speaker
1C31 C2A5      1803       clr FLASH_CE ; Enable SPI Flash
1C33 7403      1803       mov a, #READ_BYTES
1C35 12040D    1803       lcall Send_SPI
1C38           1803       ; Set the initial position in memory where to start playing
1C38           1803       
1C38 7419      1803       mov a, #0x19 ; change initial position
1C3A 12040D    1803       lcall Send_SPI
1C3D 748E      1803       mov a, #0x8e ; next memory position
1C3F 12040D    1803       lcall Send_SPI
1C42 74F8      1803       mov a, #0xf8 ; next memory position
1C44 12040D    1803       lcall Send_SPI
1C47 7419      1803       mov a, #0x19 ; request first byte to send to DAC
1C49 12040D    1803       lcall Send_SPI
1C4C           1803       
1C4C           1803       ; How many bytes to play?
1C4C 754E00    1803       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1C4F 754D75    1803       mov w+1, #0x75 ; Load the middle byte of the number of bytes to play
1C52 754C30    1803       mov w+0, #0x30 ; Load the low byte of the number of bytes to play
1C55           1803       
1C55           1803       
1C55 D2A6      1803       setb SPEAKER ;Turn on speaker
1C57 D28E      1803       setb TR1 ;Start playback by enabling Timer1
1C59           1803       ;clr sound_flag ; sound ends
1C59           1804   
1C59           1805   state4:
1C59           1806       ;check power on
1C59 12052A    1807       lcall CHECK_POWER
1C5C           1808       ;Update Time and Temp
1C5C 1214F3    1809       lcall Update_Display
1C5F 1217B6    1810       lcall Average_Temp
1C62           1811       ;lcall CHECK_SPAN_OR_ENGL
1C62           1812      ;jb SPAN_ENG, SPANISH4
1C62 1205B2    1813       lcall SOUND_FSM
1C65 8000      1814       sjmp Check_Temp_done4
1C67           1815   ;SPANISH4:
1C67           1816       ;lcall SOUND_FSM_S
1C67           1817       
1C67           1818   Check_Temp_done4:  
1C67           1819      
1C67           1820       ; loop back to state2 if run time is less than soak time
1C67 E53A      1821       mov a, State_time
1C69 9537      1822       subb a, Time_refl
1C6B 5002      1823       jnc state4_done
1C6D 40EA      1824       jc state4
1C6F           1825   
1C6F           1826   state4_done: 
1C6F 753A00    1827       mov State_time, #0
1C72 021C75    1828       ljmp state5_beginning 
1C75           1829   
1C75           1830   
1C75           1831   ; cooling
1C75           1832   state5_beginning: ; turn oven off
1C75           1833       ;clr OVEN_POWER
1C75           1834   
1C75           1835   ;***clear the screen and set new display***
1C75 121474    1836       lcall Initialize_State_Display
1C78 C083      1837            push dph
1C7A C082      1837            push dpl
1C7C C0E0      1837            push acc
1C7E 9003E7    1837            mov dptr, #Cooling
1C81 1200B2    1837            lcall ?Send_Constant_String
1C84 D0E0      1837            pop acc
1C86 D082      1837            pop dpl
1C88 D083      1837            pop dph
1C8A           1838   
1C8A           1839       ;Set the default pwm output ratio to 0%.  That is 0ms of every second:
1C8A 754F00    1840            mov pwm_ratio+0, #low(0)
1C8D 755000    1841            mov pwm_ratio+1, #high(0)
1C90           1842   
1C90           1843       ; Produces COOLING on speaker
1C90 300433    1844       jnb SPAN_ENG, SPANISH5
1C93           1845       ; ***play audio***
1C93           1845       ;cjne sound_flag, #0, $
1C93 121860    1845       lcall Wait_Half_Second
1C96 C28E      1845       clr TR1 ; Stop Timer 1 ISR from playing previous request
1C98 D2A5      1845       setb FLASH_CE
1C9A           1845       ;setb sound_flag ; sound starts
1C9A C2A6      1845       clr SPEAKER ; Turn off speaker
1C9C C2A5      1845       clr FLASH_CE ; Enable SPI Flash
1C9E 7403      1845       mov a, #READ_BYTES
1CA0 12040D    1845       lcall Send_SPI
1CA3           1845       ; Set the initial position in memory where to start playing
1CA3           1845       
1CA3 7401      1845       mov a, #0x01 ; change initial position
1CA5 12040D    1845       lcall Send_SPI
1CA8 7448      1845       mov a, #0x48 ; next memory position
1CAA 12040D    1845       lcall Send_SPI
1CAD 749A      1845       mov a, #0x9a ; next memory position
1CAF 12040D    1845       lcall Send_SPI
1CB2 7401      1845       mov a, #0x01 ; request first byte to send to DAC
1CB4 12040D    1845       lcall Send_SPI
1CB7           1845       
1CB7           1845       ; How many bytes to play?
1CB7 754E00    1845       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1CBA 754D6B    1845       mov w+1, #0x6b ; Load the middle byte of the number of bytes to play
1CBD 754C6C    1845       mov w+0, #0x6c ; Load the low byte of the number of bytes to play
1CC0           1845       
1CC0           1845       
1CC0 D2A6      1845       setb SPEAKER ;Turn on speaker
1CC2 D28E      1845       setb TR1 ;Start playback by enabling Timer1
1CC4           1845       ;clr sound_flag ; sound ends
1CC4 8031      1846       sjmp state5
1CC6           1847   SPANISH5:
1CC6           1848       ; ***play audio***
1CC6           1848       ;cjne sound_flag, #0, $
1CC6 121860    1848       lcall Wait_Half_Second
1CC9 C28E      1848       clr TR1 ; Stop Timer 1 ISR from playing previous request
1CCB D2A5      1848       setb FLASH_CE
1CCD           1848       ;setb sound_flag ; sound starts
1CCD C2A6      1848       clr SPEAKER ; Turn off speaker
1CCF C2A5      1848       clr FLASH_CE ; Enable SPI Flash
1CD1 7403      1848       mov a, #READ_BYTES
1CD3 12040D    1848       lcall Send_SPI
1CD6           1848       ; Set the initial position in memory where to start playing
1CD6           1848       
1CD6 7419      1848       mov a, #0x19 ; change initial position
1CD8 12040D    1848       lcall Send_SPI
1CDB 74F0      1848       mov a, #0xf0 ; next memory position
1CDD 12040D    1848       lcall Send_SPI
1CE0 74A0      1848       mov a, #0xa0 ; next memory position
1CE2 12040D    1848       lcall Send_SPI
1CE5 7419      1848       mov a, #0x19 ; request first byte to send to DAC
1CE7 12040D    1848       lcall Send_SPI
1CEA           1848       
1CEA           1848       ; How many bytes to play?
1CEA 754E00    1848       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1CED 754DEA    1848       mov w+1, #0xea ; Load the middle byte of the number of bytes to play
1CF0 754C60    1848       mov w+0, #0x60 ; Load the low byte of the number of bytes to play
1CF3           1848       
1CF3           1848       
1CF3 D2A6      1848       setb SPEAKER ;Turn on speaker
1CF5 D28E      1848       setb TR1 ;Start playback by enabling Timer1
1CF7           1848       ;clr sound_flag ; sound ends
1CF7           1849       ;cpl FAN
1CF7           1850   
1CF7           1851   state5:
1CF7           1852       ;check power on
1CF7 12052A    1853       lcall CHECK_POWER
1CFA           1854       
1CFA           1855       ; update display
1CFA 1214F3    1856       lcall Update_Display
1CFD 1217B6    1857       lcall Average_Temp
1D00           1858   
1D00           1859       ;jb SPAN_ENG, SPANISH5
1D00 1205B2    1860       lcall SOUND_FSM
1D03 8000      1861       sjmp Check_Temp_done5
1D05           1862   ;SPANISH5:
1D05           1863       ;lcall SOUND_FSM_S
1D05           1864       
1D05           1865   Check_Temp_done5:  
1D05           1866   
1D05 E53B      1867       mov a, Temp_oven
1D07 943C      1868       subb a, #60
1D09 50EC      1869       JNC state5    ; if greater, jump back to state 5
1D0B 60EA      1870       JZ state5 ; if equal to, go back to state5
1D0D 4000      1871       JC state5_done ; if less than, go back to state 0
1D0F           1872   
1D0F           1873       ;*Checking moving to states with buttons---- 
1D0F           1874   ;*Will remove after proper temperature reading----
1D0F           1875   
1D0F           1876       ;jb NEXT_STATE_BUTTON, state5
1D0F           1877       ;Wait_Milli_Seconds(#50) ; debounce time
1D0F           1878            ;jb NEXT_STATE_BUTTON, state5 ; if button not pressed, loop
1D0F           1879            ;jnb NEXT_STATE_BUTTON, $ 
1D0F           1880   
1D0F           1881   state5_done:
1D0F           1882       ; ***play audio***
1D0F           1882       ;cjne sound_flag, #0, $
1D0F           1882       
1D0F C28E      1882       clr TR1 ; Stop Timer 1 ISR from playing previous request
1D11 D2A5      1882       setb FLASH_CE
1D13           1882       ;setb sound_flag ; sound starts
1D13 C2A6      1882       clr SPEAKER ; Turn off speaker
1D15 C2A5      1882       clr FLASH_CE ; Enable SPI Flash
1D17 7403      1882       mov a, #READ_BYTES
1D19 12040D    1882       lcall Send_SPI
1D1C           1882       ; Set the initial position in memory where to start playing
1D1C           1882       
1D1C 7416      1882       mov a, #0x16 ; change initial position
1D1E 12040D    1882       lcall Send_SPI
1D21 74BC      1882       mov a, #0xbc ; next memory position
1D23 12040D    1882       lcall Send_SPI
1D26 7450      1882       mov a, #0x50 ; next memory position
1D28 12040D    1882       lcall Send_SPI
1D2B 7416      1882       mov a, #0x16 ; request first byte to send to DAC
1D2D 12040D    1882       lcall Send_SPI
1D30           1882       
1D30           1882       ; How many bytes to play?
1D30 754E02    1882       mov w+2, #0x02 ; Load the high byte of the number of bytes to play
1D33 754D0F    1882       mov w+1, #0x0f ; Load the middle byte of the number of bytes to play
1D36 754C58    1882       mov w+0, #0x58 ; Load the low byte of the number of bytes to play
1D39           1882       
1D39           1882       
1D39 D2A6      1882       setb SPEAKER ;Turn on speaker
1D3B D28E      1882       setb TR1 ;Start playback by enabling Timer1
1D3D           1882       ;clr sound_flag ; sound ends
1D3D 12183B    1883       lcall Wait_One_Second
1D40 753A00    1884       mov State_time, #0
1D43 753300    1885       mov States, #0
1D46           1886       ;setb FAN
1D46 021924    1887       ljmp main
1D49           1888   
1D49           1889   EN
