                  2   $LIST
0000              4   
0000              5   
0000              6   ;-------------------------------------------------------------------------------------------------------------------------------
0000              7   ;These EQU must match the wiring between the microcontroller and ADC
0000              8   CLK  EQU 22118400
0000              9   TIMER1_RATE    EQU 25000 ;22050     ; 22050Hz is the sampling rate of the wav file we are playing
0000             10   TIMER1_RELOAD  EQU 0x10000-(CLK/TIMER1_RATE)
0000             11   BAUD equ 115200
0000             12   BRG_VAL equ (0x100-(CLK/(16*BAUD)))
0000             13   
0000             14   TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
0000             15   TIMER2_RELOAD EQU (65536-(CLK/TIMER2_RATE))
0000             16   
0000             17   ;shjfjdfs
0000             18   ;-------------------------------------------------------------------------------------------------------------------------------
0000             19   ;Button Pin Mapping
0000             20   NEXT_STATE_BUTTON  equ P0.5
0000             21   STIME_BUTTON    equ P0.2
0000             22   STEMP_BUTTON    equ P0.3
0000             23   RTIME_BUTTON    equ P0.4
0000             24   RTEMP_BUTTON    equ P0.6
0000             25   SPAN_ENGL_BUTTON equ P0.0
0000             26   
0000             27   POWER_BUTTON    equ P4.5
0000             28   SHIFT_BUTTON    equ p0.1
0000             29   
0000             30   ;Output Pins
0000             31   OVEN_POWER      equ P0.7
0000             32   SPEAKER         equ P2.6
0000             33   
0000             34   PWM_OUTPUT      equ P1.0 ; Attach an LED (with 1k resistor in series) to P1.0
0000             35   FAN             equ P1.1
0000             36   
0000             37   
0000             38   ;FLASH pins
0000             39   MY_MOSI_SOUND EQU P2.4
0000             40   MY_MISO_SOUND EQU P2.1
0000             41   MY_SCLK_SOUND EQU P2.0
0000             42   FLASH_CE      EQU P2.5
0000             43   
0000             44   ;Thermowire Pins
0000             45   CE_ADC    EQU  P1.7
0000             46   MY_MOSI   EQU  P1.6
0000             47   MY_MISO   EQU  P1.5
0000             48   MY_SCLK   EQU  P1.4 
0000             49   
0000             50   ; Commands supported by the SPI flash memory according to the datasheet
0000             51   WRITE_ENABLE     EQU 0x06  ; Address:0 Dummy:0 Num:0
0000             52   WRITE_DISABLE    EQU 0x04  ; Address:0 Dummy:0 Num:0
0000             53   READ_STATUS      EQU 0x05  ; Address:0 Dummy:0 Num:1 to infinite
0000             54   READ_BYTES       EQU 0x03  ; Address:3 Dummy:0 Num:1 to infinite
0000             55   READ_SILICON_ID  EQU 0xab  ; Address:0 Dummy:3 Num:1 to infinite
0000             56   FAST_READ        EQU 0x0b  ; Address:3 Dummy:1 Num:1 to infinite
0000             57   WRITE_STATUS     EQU 0x01  ; Address:0 Dummy:0 Num:1
0000             58   WRITE_BYTES      EQU 0x02  ; Address:3 Dummy:0 Num:1 to 256
0000             59   ERASE_ALL        EQU 0xc7  ; Address:0 Dummy:0 Num:0
0000             60   ERASE_BLOCK      EQU 0xd8  ; Address:3 Dummy:0 Num:0
0000             61   READ_DEVICE_ID   EQU 0x9f  ; Address:0 Dummy:2 Num:1 to infinite
0000             62   
0000             63   ; These 'equ' must match the hardware wiring
0000             64   LCD_RS equ P3.2
0000             65   ;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
0000             66   LCD_E  equ P3.3
0000             67   LCD_D4 equ P3.4
0000             68   LCD_D5 equ P3.5
0000             69   LCD_D6 equ P3.6
0000             70   LCD_D7 equ P3.7
0000             71   
0000             72   ;-------------------------------------------------------------------------------------------------------------------------------
0000             73   
0000             74   org 0x0000
0000 021876      75       ljmp main
0003             76   
0003             77   ; External interrupt 0 vector (not used in this code)
0003             78   org 0x0003
0003 32          79            reti
0004             80   
0004             81   ; Timer/Counter 0 overflow interrupt vector
000B             82   org 0x000B
000B 32          83            reti
000C             84   
000C             85   ; External interrupt 1 vector (not used in this code)
0013             86   org 0x0013
0013 32          87            reti
0014             88   
0014             89   ; Timer/Counter 1 overflow interrupt vector
001B             90   org 0x001B
001B 0217CA      91            ljmp Timer1_ISR
001E             92   
001E             93   ; Serial port receive/transmit interrupt vector (not used in this code)
0023             94   org 0x0023 
0023 32          95            reti
0024             96            
0024             97   ; Timer/Counter 2 overflow interrupt vector
002B             98   org 0x002B
002B 021820      99       ljmp Timer2_ISR
002E            100   ;-------------------------------------------------------------------------------------------------------------------------------
002E            101   ; Place our variables here
0030            102   DSEG at 0x30 ; Before the state machine!
0030            103   Count1ms:         ds 2 ; Used to determine when one second has passed
0032            104   Count5sec:        ds 1
0033            105   States:           ds 1
0034            106   Temp_soak:        ds 1
0035            107   Time_soak:        ds 1
0036            108   Temp_refl:        ds 1
0037            109   Time_refl:        ds 1
0038            110   Run_time_seconds: ds 1
0039            111   Run_time_minutes: ds 1
003A            112   State_time:       ds 1
003B            113   Temp_oven:        ds 1
003C            114   KTemp_oven:       ds 1
003D            115   x:                ds 4
0041            116   y:                ds 4
0045            117   bcd:              ds 5
004A            118   Result:           ds 2
004C            119   w:                ds 3
004F            120   pwm_ratio:        ds 2
0051            121   average_count:    ds 1
0052            122   K_or_C:           ds 1
0053            123   Profile:          ds 1 ; Select profile1 if equ 0, 2 if equ 1
0054            124   
                126   $LIST
00F0            128   
                546   $LIST
                130   $LIST
0360            132   
0360            133   ;$NOLIST
0360            134   ;$INCLUDE(sound_for_project1_index.asm)
0360            135   ;$LIST
0360            136   
0000            137   bseg
0000            138   one_seconds_flag:  dbit 1
0001            139   five_seconds_flag: dbit 1
0002            140   enable_clk:        dbit 1
0003            141   mf:                dbit 1
0004            142   SPAN_ENG:          dbit 1
0005            143   ;sound_flag: dbit 1
0005            144   
0360            145   cseg
0360            146   
0360            147   ;-------------------------------------------------------------------------------------------------------------------------------
0360            148   ;***Messages To Display*** 
0360            149   
0360            150   ;shortened labels
0360 53546D70   151   STemp:  db 'STmp:', 0
     3A00
0366 53546D3A   152   STime:  db 'STm:', 0
     00
036B 52546D70   153   RTemp:  db 'RTmp:', 0
     3A00
0371 52546D3A   154   RTime:  db 'RTm:', 0
     00
0376            155   
0376            156   ;lables for runnning oven
0376 53746174   157   state:     db 'State>' , 0
     653E00
037D 546D653E   158   time:      db 'Tme>' , 0
     00
0382 3A00       159   colon:     db ':', 0
0384 546D703E   160   temp:      db 'Tmp>', 0
     00
0389            161   
0389            162   ;labels for changin parameters
0389 5265666C   163   ReflowTemp:  db 'Reflow Temperature:', 0
     6F772054
     656D7065
     72617475
     72653A00
039D 5265666C   164   ReflowTime:  db 'Reflow Time:', 0
     6F772054
     696D653A
     00
03AA 536F616B   165   SoakTime:    db 'Soak Time:', 0
     2054696D
     653A00
03B5 536F616B   166   SoakTemp:    db 'Soak Temperature:', 0
     2054656D
     70657261
     74757265
     3A00
03C7            167   
03C7            168   
03C7            169   ;Current State in Oven
03C7 52616D70   170   Ramp2Soak: db 'Ramp-Soak' , 0
     2D536F61
     6B00
03D1 536F616B   171   Soak:      db 'Soak' , 0
     00
03D6 52616D70   172   Ramp2Peak: db 'Ramp-Peak' , 0
     2D506561
     6B00
03E0 5265666C   173   Reflow:    db 'Reflow' , 0
     6F7700
03E7 436F6F6C   174   Cooling:   db 'Cooling' , 0
     696E6700
03EF            175   
03EF            176   ;-------------------------------------------------------------------------------------------------------------------------------
03EF            177   ;FXNS FOR THERMOWIRE
03EF            178   
03EF            179   ;initialize SPI 
03EF            180   INI_SPI:
03EF D295       181            setb MY_MISO          ; Make MISO an input pin
03F1 C294       182            clr MY_SCLK           ; Mode 0,0 default
03F3 22         183            ret
03F4            184   DO_SPI_G:
03F4 C0E0       185            push acc
03F6 7900       186            mov R1, #0            ; Received byte stored in R1
03F8 7A08       187            mov R2, #8            ; Loop counter (8-bits)
03FA            188   DO_SPI_G_LOOP:
03FA E8         189            mov a, R0             ; Byte to write is in R0
03FB 33         190            rlc a                 ; Carry flag has bit to write
03FC F8         191            mov R0, a
03FD 9296       192            mov MY_MOSI, c
03FF D294       193            setb MY_SCLK          ; Transmit
0401 A295       194            mov c, MY_MISO        ; Read received bit
0403 E9         195            mov a, R1             ; Save received bit in R1
0404 33         196            rlc a
0405 F9         197            mov R1, a
0406 C294       198            clr MY_SCLK
0408 DAF0       199            djnz R2, DO_SPI_G_LOOP
040A D0E0       200            pop acc
040C 22         201   ret
040D            202   
040D            203   Send_SPI:
                204   	SPIBIT MAC
                205   	    ; Send/Receive bit %0
                206   		rlc a
                207   		mov MY_MOSI_SOUND, c
                208   		setb MY_SCLK_SOUND
                209   		mov c, MY_MISO_SOUND
                210   		clr MY_SCLK_SOUND
                211   		mov acc.0, c
                212   	ENDMAC
040D            213            
040D            214                ; Send/Receive bit 7
040D 33         214                    rlc a
040E 92A4       214                    mov MY_MOSI_SOUND, c
0410 D2A0       214                    setb MY_SCLK_SOUND
0412 A2A1       214                    mov c, MY_MISO_SOUND
0414 C2A0       214                    clr MY_SCLK_SOUND
0416 92E0       214                    mov acc.0, c
0418            215                ; Send/Receive bit 6
0418 33         215                    rlc a
0419 92A4       215                    mov MY_MOSI_SOUND, c
041B D2A0       215                    setb MY_SCLK_SOUND
041D A2A1       215                    mov c, MY_MISO_SOUND
041F C2A0       215                    clr MY_SCLK_SOUND
0421 92E0       215                    mov acc.0, c
0423            216                ; Send/Receive bit 5
0423 33         216                    rlc a
0424 92A4       216                    mov MY_MOSI_SOUND, c
0426 D2A0       216                    setb MY_SCLK_SOUND
0428 A2A1       216                    mov c, MY_MISO_SOUND
042A C2A0       216                    clr MY_SCLK_SOUND
042C 92E0       216                    mov acc.0, c
042E            217                ; Send/Receive bit 4
042E 33         217                    rlc a
042F 92A4       217                    mov MY_MOSI_SOUND, c
0431 D2A0       217                    setb MY_SCLK_SOUND
0433 A2A1       217                    mov c, MY_MISO_SOUND
0435 C2A0       217                    clr MY_SCLK_SOUND
0437 92E0       217                    mov acc.0, c
0439            218                ; Send/Receive bit 3
0439 33         218                    rlc a
043A 92A4       218                    mov MY_MOSI_SOUND, c
043C D2A0       218                    setb MY_SCLK_SOUND
043E A2A1       218                    mov c, MY_MISO_SOUND
0440 C2A0       218                    clr MY_SCLK_SOUND
0442 92E0       218                    mov acc.0, c
0444            219                ; Send/Receive bit 2
0444 33         219                    rlc a
0445 92A4       219                    mov MY_MOSI_SOUND, c
0447 D2A0       219                    setb MY_SCLK_SOUND
0449 A2A1       219                    mov c, MY_MISO_SOUND
044B C2A0       219                    clr MY_SCLK_SOUND
044D 92E0       219                    mov acc.0, c
044F            220                ; Send/Receive bit 1
044F 33         220                    rlc a
0450 92A4       220                    mov MY_MOSI_SOUND, c
0452 D2A0       220                    setb MY_SCLK_SOUND
0454 A2A1       220                    mov c, MY_MISO_SOUND
0456 C2A0       220                    clr MY_SCLK_SOUND
0458 92E0       220                    mov acc.0, c
045A            221                ; Send/Receive bit 0
045A 33         221                    rlc a
045B 92A4       221                    mov MY_MOSI_SOUND, c
045D D2A0       221                    setb MY_SCLK_SOUND
045F A2A1       221                    mov c, MY_MISO_SOUND
0461 C2A0       221                    clr MY_SCLK_SOUND
0463 92E0       221                    mov acc.0, c
0465            222   
0465 22         223   ret
0466            224   
                225   Change_8bit_Variable MAC
                226       jb %0, %2
                227       Wait_Milli_Seconds(#50) ; de-bounce
                228       jb %0, %2
                229       jnb %0, $
                230       jb SHIFT_BUTTON, skip%Mb
                231       dec %1
                232       sjmp skip%Ma
                233       skip%Mb:
                234       inc %1
                235       skip%Ma:
                236       ;cjne Profile, #0, skip%Mc
                237       ;lcall Save_Configuration1
                238       ;sjmp skip%Md
                239       ;skip%Mc:
                240       ;lcall Save_Configuration2
                241       ;skip%Md:
                242   ENDMAC
0466            243   
0466            244   
0466            245   
0466            246   ;Change_8bit_Variable(MY_VARIABLE_BUTTON, my_variable, loop_c)
0466            247   ;    Set_Cursor(2, 14)
0466            248   ;    mov a, my_variable
0466            249   ;    lcall SendToLCD
0466            250   ;lcall Save_Configuration
0466            251   
0466            252   ;-------------------------------------------------------------------------------------------------------------------------------
0466            253   ;***FXNS For Serial Port
0466            254   
0466            255   ; Configure the serial port and baud rate
0466            256   InitSerialPort:
0466            257       ; Since the reset button bounces, we need to wait a bit before
0466            258       ; sending messages, otherwise we risk displaying gibberish!
0466 79DE       259       mov R1, #222
0468 78A6       260       mov R0, #166
046A D8FE       261       djnz R0, $   ; 3 cycles->3*45.21123ns*166=22.51519us
046C D9FA       262       djnz R1, $-4 ; 22.51519us*222=4.998ms
046E            263       ; Now we can proceed with the configuration
046E 438780     264            orl     PCON,#0x80
0471 759852     265            mov     SCON,#0x52
0474 759B00     266            mov     BDRCON,#0x00
0477 759AF4     267            mov     BRL,#BRG_VAL
047A 759B1E     268            mov     BDRCON,#0x1E ; BDRCON=BRR|TBCK|RBCK|SPD;
047D 22         269   ret
047E            270   
047E            271   
047E            272   putchar:
047E 3099FD     273       jnb TI, putchar
0481 C299       274       clr TI
0483 F599       275       mov SBUF, a
0485 22         276   ret
0486            277   
0486            278   ;-------------------------------------------------------------------------------------------------------------------------------
0486            279   ;***FXNS to CHECK BUTTONS
0486            280   
0486            281   CHECK_STIME:
0486            282   
0486 208218     283       jb STIME_BUTTON, CHECK_STIME_END
0489 C002       283            push AR2
048B 7A32       283            mov R2, #50
048D 120039     283            lcall ?Wait_Milli_Seconds
0490 D002       283            pop AR2 ; de-bounce
0492 20820C     283       jb STIME_BUTTON, CHECK_STIME_END
0495 3082FD     283       jnb STIME_BUTTON, $
0498 208104     283       jb SHIFT_BUTTON, skip16b
049B 1535       283       dec Time_soak
049D 8002       283       sjmp skip16a
049F            283       skip16b:
049F 0535       283       inc Time_soak
04A1            283       skip16a:
04A1            283       ;cjne Profile, #0, skip16c
04A1            283       ;lcall Save_Configuration1
04A1            283       ;sjmp skip16d
04A1            283       ;skip16c:
04A1            283       ;lcall Save_Configuration2
04A1            283       ;skip16d:
04A1            284            
04A1            285   CHECK_STIME_END:
04A1 22         286   ret
04A2            287   
04A2            288   CHECK_STEMP:
04A2 208318     289       jb STEMP_BUTTON, CHECK_STEMP_END
04A5 C002       289            push AR2
04A7 7A32       289            mov R2, #50
04A9 120039     289            lcall ?Wait_Milli_Seconds
04AC D002       289            pop AR2 ; de-bounce
04AE 20830C     289       jb STEMP_BUTTON, CHECK_STEMP_END
04B1 3083FD     289       jnb STEMP_BUTTON, $
04B4 208104     289       jb SHIFT_BUTTON, skip18b
04B7 1534       289       dec Temp_soak
04B9 8002       289       sjmp skip18a
04BB            289       skip18b:
04BB 0534       289       inc Temp_soak
04BD            289       skip18a:
04BD            289       ;cjne Profile, #0, skip18c
04BD            289       ;lcall Save_Configuration1
04BD            289       ;sjmp skip18d
04BD            289       ;skip18c:
04BD            289       ;lcall Save_Configuration2
04BD            289       ;skip18d:
04BD            290       ;lcall Save_Configuration
04BD            291            
04BD            292   CHECK_STEMP_END:
04BD 22         293   ret
04BE            294   
04BE            295   CHECK_RTIME:
04BE 208418     296       jb RTIME_BUTTON, CHECK_RTIME_END
04C1 C002       296            push AR2
04C3 7A32       296            mov R2, #50
04C5 120039     296            lcall ?Wait_Milli_Seconds
04C8 D002       296            pop AR2 ; de-bounce
04CA 20840C     296       jb RTIME_BUTTON, CHECK_RTIME_END
04CD 3084FD     296       jnb RTIME_BUTTON, $
04D0 208104     296       jb SHIFT_BUTTON, skip20b
04D3 1537       296       dec Time_refl
04D5 8002       296       sjmp skip20a
04D7            296       skip20b:
04D7 0537       296       inc Time_refl
04D9            296       skip20a:
04D9            296       ;cjne Profile, #0, skip20c
04D9            296       ;lcall Save_Configuration1
04D9            296       ;sjmp skip20d
04D9            296       ;skip20c:
04D9            296       ;lcall Save_Configuration2
04D9            296       ;skip20d:
04D9            297   CHECK_RTIME_END:
04D9 22         298   ret
04DA            299   
04DA            300   CHECK_RTEMP:
04DA 208618     301       jb RTEMP_BUTTON, CHECK_RTEMP_END
04DD C002       301            push AR2
04DF 7A32       301            mov R2, #50
04E1 120039     301            lcall ?Wait_Milli_Seconds
04E4 D002       301            pop AR2 ; de-bounce
04E6 20860C     301       jb RTEMP_BUTTON, CHECK_RTEMP_END
04E9 3086FD     301       jnb RTEMP_BUTTON, $
04EC 208104     301       jb SHIFT_BUTTON, skip22b
04EF 1536       301       dec Temp_refl
04F1 8002       301       sjmp skip22a
04F3            301       skip22b:
04F3 0536       301       inc Temp_refl
04F5            301       skip22a:
04F5            301       ;cjne Profile, #0, skip22c
04F5            301       ;lcall Save_Configuration1
04F5            301       ;sjmp skip22d
04F5            301       ;skip22c:
04F5            301       ;lcall Save_Configuration2
04F5            301       ;skip22d:
04F5            302   CHECK_RTEMP_END:
04F5 22         303   ret
04F6            304   
04F6            305   CHECK_POWER:
04F6 20C518     306       jb POWER_BUTTON, CHECK_POWER_END ; if button not pressed, stop checking
04F9 C002       307            push AR2
04FB 7A32       307            mov R2, #50
04FD 120039     307            lcall ?Wait_Milli_Seconds
0500 D002       307            pop AR2 ; debounce time
0502 20C50C     308            jb POWER_BUTTON, CHECK_POWER_END ; if button not pressed, stop checking
0505 30C5FD     309            jnb POWER_BUTTON, $ ; loop while the button is pressed
0508 754F00     310       mov pwm_ratio+0, #low(0)
050B 755000     311            mov pwm_ratio+1, #high(0)
050E 1216C5     312       lcall OFF_STATE
0511            313   CHECK_POWER_END:
0511 22         314   ret
0512            315   
0512            316   CHECK_SPAN_OR_ENGL:
0512 208011     317       jb SPAN_ENGL_BUTTON, CHECK_SPAN_OR_ENGL_END
0515 C002       318            push AR2
0517 7A32       318            mov R2, #50
0519 120039     318            lcall ?Wait_Milli_Seconds
051C D002       318            pop AR2 ; de-bounce
051E 208005     319       jb SPAN_ENGL_BUTTON, CHECK_SPAN_OR_ENGL_END
0521 3080FD     320       jnb SPAN_ENGL_BUTTON, $
0524 B204       321       cpl SPAN_ENG
0526            322   CHECK_SPAN_OR_ENGL_END:
0526 22         323   ret
0527            324   
0527            325   CHECK_K_OR_C:
0527            326   
0527 20860F     327       jb RTEMP_BUTTON, CHECK_K_OR_C_END ; if button not pressed, stop checking
052A C002       328            push AR2
052C 7A32       328            mov R2, #50
052E 120039     328            lcall ?Wait_Milli_Seconds
0531 D002       328            pop AR2 ; debounce time
0533 208603     329            jb RTEMP_BUTTON, CHECK_K_OR_C_END ; if button not pressed, stop checking
0536 3086FD     330            jnb RTEMP_BUTTON, $ ; loop while the button is pressed
0539            331       
0539            332       ;mov a, K_or_C
0539            333       ;anl a,
0539            334       ;anl a, #00000001B  ; We need only the two least significant bits
0539            335   
0539            336   
0539            337   CHECK_K_OR_C_END:
0539 22         338   ret
053A            339   
053A            340   ; Playback MACRO for sound --------------------------------------------------
053A            341   
                342   PLAYBACK_TEMP MAC
                343       ; ***play audio***
                344       ;cjne sound_flag, #0, $
                345       
                346       lcall Wait_Half_Second
                347       clr TR1 ; Stop Timer 1 ISR from playing previous request
                348       setb FLASH_CE
                349       ;setb sound_flag ; sound starts
                350       clr SPEAKER ; Turn off speaker
                351       clr FLASH_CE ; Enable SPI Flash
                352       mov a, #READ_BYTES
                353       lcall Send_SPI
                354       ; Set the initial position in memory where to start playing
                355       
                356       mov a, %0 ; change initial position
                357       lcall Send_SPI
                358       mov a, %1 ; next memory position
                359       lcall Send_SPI
                360       mov a, %2 ; next memory position
                361       lcall Send_SPI
                362       mov a, %0 ; request first byte to send to DAC
                363       lcall Send_SPI
                364       
                365       ; How many bytes to play?
                366       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
                367       mov w+1, %3 ; Load the middle byte of the number of bytes to play
                368       mov w+0, %4 ; Load the low byte of the number of bytes to play
                369       
                370       
                371       setb SPEAKER ;Turn on speaker
                372       setb TR1 ;Start playback by enabling Timer1
                373       ;clr sound_flag ; sound ends
                374   ENDMAC
053A            375   
                376   PLAYBACK_MUSIC MAC
                377       ; ***play audio***
                378       ;cjne sound_flag, #0, $
                379       
                380       clr TR1 ; Stop Timer 1 ISR from playing previous request
                381       setb FLASH_CE
                382       ;setb sound_flag ; sound starts
                383       clr SPEAKER ; Turn off speaker
                384       clr FLASH_CE ; Enable SPI Flash
                385       mov a, #READ_BYTES
                386       lcall Send_SPI
                387       ; Set the initial position in memory where to start playing
                388       
                389       mov a, %0 ; change initial position
                390       lcall Send_SPI
                391       mov a, %1 ; next memory position
                392       lcall Send_SPI
                393       mov a, %2 ; next memory position
                394       lcall Send_SPI
                395       mov a, %0 ; request first byte to send to DAC
                396       lcall Send_SPI
                397       
                398       ; How many bytes to play?
                399       mov w+2, #0x02 ; Load the high byte of the number of bytes to play
                400       mov w+1, %3 ; Load the middle byte of the number of bytes to play
                401       mov w+0, %4 ; Load the low byte of the number of bytes to play
                402       
                403       
                404       setb SPEAKER ;Turn on speaker
                405       setb TR1 ;Start playback by enabling Timer1
                406       ;clr sound_flag ; sound ends
                407   ENDMAC
053A            408   
053A            409   
053A            410   ;****ENGLISH SOUND FSM--------------------------------------------------------
053A            411   
053A            412   SOUND_FSM:
053A            413   state_0_sound:
053A            414   ;check if 5 seconds has passed, if yes go to state 1, if no exit function 
053A 300104     415       jnb five_seconds_flag, Sound_ret
053D C201       416       clr five_seconds_flag
053F 8001       417       sjmp state_1_sound
0541            418   Sound_ret:
0541 22         419       ret
0542            420   
0542            421   state_1_sound:
0542            422   ; check if temp is greater than or equal to 100, if yes go to state 2
0542            423   ; check if temp is less than 100, if yes go to state 4
0542 E53B       424       mov a, Temp_oven
0544 9464       425       subb a, #100
0546 5002       426       jnc state_2_sound_hop
0548 4002       427       jc state_4_sound_hop
054A            428   
054A            429       state_2_sound_hop:
054A 8003       430           sjmp state_2_sound
054C            431   
054C            432       state_4_sound_hop:
054C 020648     433           ljmp state_4_sound
054F            434   
054F            435   state_2_sound:
054F            436   ;divide temp by 100, if it is 1 play sound: "100", if it is 2 play sound: "200"
054F            437   ; go to state_3_sound
054F 75F064     438       mov b, #100
0552 E53B       439       mov a, Temp_oven
0554 84         440       div ab
0555 9401       441       subb a, #1
0557 600A       442       jz play_sound_100
0559            443   
0559 75F064     444       mov b, #100
055C E53B       445       mov a, Temp_oven
055E 84         446       div ab
055F 9402       447       subb a, #2
0561 6065       448       jz play_sound_200
0563            449      
0563            450       play_sound_100: 
0563            451       ; ***play audio***
0563            451       ;cjne sound_flag, #0, $
0563            451       
0563 1217B2     451       lcall Wait_Half_Second
0566 C28E       451       clr TR1 ; Stop Timer 1 ISR from playing previous request
0568 D2A5       451       setb FLASH_CE
056A            451       ;setb sound_flag ; sound starts
056A C2A6       451       clr SPEAKER ; Turn off speaker
056C C2A5       451       clr FLASH_CE ; Enable SPI Flash
056E 7403       451       mov a, #READ_BYTES
0570 12040D     451       lcall Send_SPI
0573            451       ; Set the initial position in memory where to start playing
0573            451       
0573 7401       451       mov a, #0x01 ; change initial position
0575 12040D     451       lcall Send_SPI
0578 7493       451       mov a, #0x93 ; next memory position
057A 12040D     451       lcall Send_SPI
057D 7484       451       mov a, #0x84 ; next memory position
057F 12040D     451       lcall Send_SPI
0582 7401       451       mov a, #0x01 ; request first byte to send to DAC
0584 12040D     451       lcall Send_SPI
0587            451       
0587            451       ; How many bytes to play?
0587 754E00     451       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
058A 754D36     451       mov w+1, #0x36 ; Load the middle byte of the number of bytes to play
058D 754CB0     451       mov w+0, #0xb0 ; Load the low byte of the number of bytes to play
0590            451       
0590            451       
0590 D2A6       451       setb SPEAKER ;Turn on speaker
0592 D28E       451       setb TR1 ;Start playback by enabling Timer1
0594            451       ;clr sound_flag ; sound ends ;one
0594            452       ; ***play audio***
0594            452       ;cjne sound_flag, #0, $
0594            452       
0594 1217B2     452       lcall Wait_Half_Second
0597 C28E       452       clr TR1 ; Stop Timer 1 ISR from playing previous request
0599 D2A5       452       setb FLASH_CE
059B            452       ;setb sound_flag ; sound starts
059B C2A6       452       clr SPEAKER ; Turn off speaker
059D C2A5       452       clr FLASH_CE ; Enable SPI Flash
059F 7403       452       mov a, #READ_BYTES
05A1 12040D     452       lcall Send_SPI
05A4            452       ; Set the initial position in memory where to start playing
05A4            452       
05A4 7405       452       mov a, #0x05 ; change initial position
05A6 12040D     452       lcall Send_SPI
05A9 7409       452       mov a, #0x09 ; next memory position
05AB 12040D     452       lcall Send_SPI
05AE 7410       452       mov a, #0x10 ; next memory position
05B0 12040D     452       lcall Send_SPI
05B3 7405       452       mov a, #0x05 ; request first byte to send to DAC
05B5 12040D     452       lcall Send_SPI
05B8            452       
05B8            452       ; How many bytes to play?
05B8 754E00     452       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
05BB 754D27     452       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
05BE 754C10     452       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
05C1            452       
05C1            452       
05C1 D2A6       452       setb SPEAKER ;Turn on speaker
05C3 D28E       452       setb TR1 ;Start playback by enabling Timer1
05C5            452       ;clr sound_flag ; sound ends ;hundred
05C5 02062D     453           ljmp state_3_sound
05C8            454   
05C8            455       play_sound_200:
05C8            456       ; ***play audio***
05C8            456       ;cjne sound_flag, #0, $
05C8            456       
05C8 1217B2     456       lcall Wait_Half_Second
05CB C28E       456       clr TR1 ; Stop Timer 1 ISR from playing previous request
05CD D2A5       456       setb FLASH_CE
05CF            456       ;setb sound_flag ; sound starts
05CF C2A6       456       clr SPEAKER ; Turn off speaker
05D1 C2A5       456       clr FLASH_CE ; Enable SPI Flash
05D3 7403       456       mov a, #READ_BYTES
05D5 12040D     456       lcall Send_SPI
05D8            456       ; Set the initial position in memory where to start playing
05D8            456       
05D8 7401       456       mov a, #0x01 ; change initial position
05DA 12040D     456       lcall Send_SPI
05DD 74C7       456       mov a, #0xc7 ; next memory position
05DF 12040D     456       lcall Send_SPI
05E2 7414       456       mov a, #0x14 ; next memory position
05E4 12040D     456       lcall Send_SPI
05E7 7401       456       mov a, #0x01 ; request first byte to send to DAC
05E9 12040D     456       lcall Send_SPI
05EC            456       
05EC            456       ; How many bytes to play?
05EC 754E00     456       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
05EF 754D13     456       mov w+1, #0x13 ; Load the middle byte of the number of bytes to play
05F2 754C88     456       mov w+0, #0x88 ; Load the low byte of the number of bytes to play
05F5            456       
05F5            456       
05F5 D2A6       456       setb SPEAKER ;Turn on speaker
05F7 D28E       456       setb TR1 ;Start playback by enabling Timer1
05F9            456       ;clr sound_flag ; sound ends ;two
05F9            457       ; ***play audio***
05F9            457       ;cjne sound_flag, #0, $
05F9            457       
05F9 1217B2     457       lcall Wait_Half_Second
05FC C28E       457       clr TR1 ; Stop Timer 1 ISR from playing previous request
05FE D2A5       457       setb FLASH_CE
0600            457       ;setb sound_flag ; sound starts
0600 C2A6       457       clr SPEAKER ; Turn off speaker
0602 C2A5       457       clr FLASH_CE ; Enable SPI Flash
0604 7403       457       mov a, #READ_BYTES
0606 12040D     457       lcall Send_SPI
0609            457       ; Set the initial position in memory where to start playing
0609            457       
0609 7405       457       mov a, #0x05 ; change initial position
060B 12040D     457       lcall Send_SPI
060E 7409       457       mov a, #0x09 ; next memory position
0610 12040D     457       lcall Send_SPI
0613 7410       457       mov a, #0x10 ; next memory position
0615 12040D     457       lcall Send_SPI
0618 7405       457       mov a, #0x05 ; request first byte to send to DAC
061A 12040D     457       lcall Send_SPI
061D            457       
061D            457       ; How many bytes to play?
061D 754E00     457       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0620 754D27     457       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
0623 754C10     457       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
0626            457       
0626            457       
0626 D2A6       457       setb SPEAKER ;Turn on speaker
0628 D28E       457       setb TR1 ;Start playback by enabling Timer1
062A            457       ;clr sound_flag ; sound ends ;hundred
062A 02062D     458           ljmp state_3_sound
062D            459   
062D            460   state_3_sound:
062D            461   ; check remainder of temp, if it is 0, exit
062D            462   ; if not 0, go to state_4_sound
062D            463   
062D            464   
062D 75F064     465       mov b, #100
0630 E53B       466       mov a, Temp_oven
0632 95F0       467       subb a, b
0634 E5F0       468       mov a, b
0636 600D       469       jz state_3_sound_hop
0638            470       
0638 75F0C8     471       mov b, #200
063B E53B       472       mov a, Temp_oven
063D 95F0       473       subb a, b
063F E5F0       474       mov a, b
0641 6002       475       jz state_3_sound_hop
0643            476   
0643 8003       477       sjmp state_4_sound
0645            478   
0645            479       state_3_sound_hop:
0645 020541     480           ljmp Sound_ret
0648            481   
0648            482   state_4_sound:
0648            483   ; if T % 100 greater or equal to 20, go to state_5_sound,
0648 75F064     484       mov b, #100
064B E53B       485       mov a, Temp_oven
064D 84         486       div ab
064E            487       ;mov R0, b
064E E5F0       488       mov a, b 
0650            489   
0650            490   
0650 9414       491       subb a, #20
0652 5027       492       jnc state_5_sound
0654 6025       493       jz state_5_sound
0656 E4         494       clr a
0657            495   ; if T % 100 is less than 10, go to state_6_sound
0657 75F064     496       mov b, #100
065A E53B       497       mov a, Temp_oven
065C 84         498       div ab
065D E5F0       499       mov a, b
065F 940A       500       subb a, #10
0661 4015       501       jc state_6_sound_hop0
0663            502       
0663            503       ;mov a, b
0663            504       
0663            505       ; ubb a, #0
0663            506       ;jc state_6_sound_hop0
0663            507       ;clr a
0663            508   ; if T % 100 is greater than or equal to 10 and less than 20, go to state_7_sound
0663            509   
0663 75F064     510       mov b, #100
0666 E53B       511       mov a, Temp_oven
0668 84         512       div ab
0669 E5F0       513       mov a, b
066B 940A       514       subb a, #10
066D 6000       515       jz and_branch
066F            516   
066F            517       and_branch:
066F E5F0       518           mov a, b
0671 9414       519           subb a, #20
0673 4000       520           jc state_7_sound_hop0
0675            521       
0675            522       state_7_sound_hop0:
0675 020A3C     523           ljmp state_7_sound
0678            524   
0678            525       state_6_sound_hop0:
0678 02083C     526           ljmp state_6_sound
067B            527       
067B            528   
067B            529   state_5_sound:
067B            530   ; play number from 20 to 90 in decades (20, 30, 40, 50, 60, 70, 80, 90), based off remainder from temp divided by 100
067B            531   ; if (T % 100) % 10 is not equal to 0, go to state_6_sound
067B            532   ; if (T % 100) % 10 is equal to 0, go to state_8_sound
067B            533   
067B            534       play_sound:
067B            535           ;ljmp PLAYBACK_TEMP
067B E53B       536           mov a, Temp_oven
067D 75F064     537           mov b, #100
0680 84         538           div ab
0681 E5F0       539           mov a, b
0683 75F00A     540           mov b, #10
0686 84         541           div ab
0687 B40234     542           cjne a, #2, play_30
068A            543           ;mov    
068A            544   
068A            545           play_20:
068A            546       ; ***play audio***
068A            546       ;cjne sound_flag, #0, $
068A            546       
068A 1217B2     546       lcall Wait_Half_Second
068D C28E       546       clr TR1 ; Stop Timer 1 ISR from playing previous request
068F D2A5       546       setb FLASH_CE
0691            546       ;setb sound_flag ; sound starts
0691 C2A6       546       clr SPEAKER ; Turn off speaker
0693 C2A5       546       clr FLASH_CE ; Enable SPI Flash
0695 7403       546       mov a, #READ_BYTES
0697 12040D     546       lcall Send_SPI
069A            546       ; Set the initial position in memory where to start playing
069A            546       
069A 7403       546       mov a, #0x03 ; change initial position
069C 12040D     546       lcall Send_SPI
069F 74EF       546       mov a, #0xef ; next memory position
06A1 12040D     546       lcall Send_SPI
06A4 74D0       546       mov a, #0xd0 ; next memory position
06A6 12040D     546       lcall Send_SPI
06A9 7403       546       mov a, #0x03 ; request first byte to send to DAC
06AB 12040D     546       lcall Send_SPI
06AE            546       
06AE            546       ; How many bytes to play?
06AE 754E00     546       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
06B1 754D27     546       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
06B4 754C10     546       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
06B7            546       
06B7            546       
06B7 D2A6       546       setb SPEAKER ;Turn on speaker
06B9 D28E       546       setb TR1 ;Start playback by enabling Timer1
06BB            546       ;clr sound_flag ; sound ends
06BB            547               ;lcall Wait_One_Second
06BB 020839     548               ljmp state_6_sound_hop1
06BE            549   
06BE            550           play_30:
06BE            551               
06BE B40334     552               cjne a, #3, play_40   
06C1            553       ; ***play audio***
06C1            553       ;cjne sound_flag, #0, $
06C1            553       
06C1 1217B2     553       lcall Wait_Half_Second
06C4 C28E       553       clr TR1 ; Stop Timer 1 ISR from playing previous request
06C6 D2A5       553       setb FLASH_CE
06C8            553       ;setb sound_flag ; sound starts
06C8 C2A6       553       clr SPEAKER ; Turn off speaker
06CA C2A5       553       clr FLASH_CE ; Enable SPI Flash
06CC 7403       553       mov a, #READ_BYTES
06CE 12040D     553       lcall Send_SPI
06D1            553       ; Set the initial position in memory where to start playing
06D1            553       
06D1 7404       553       mov a, #0x04 ; change initial position
06D3 12040D     553       lcall Send_SPI
06D6 7416       553       mov a, #0x16 ; next memory position
06D8 12040D     553       lcall Send_SPI
06DB 74E0       553       mov a, #0xe0 ; next memory position
06DD 12040D     553       lcall Send_SPI
06E0 7404       553       mov a, #0x04 ; request first byte to send to DAC
06E2 12040D     553       lcall Send_SPI
06E5            553       
06E5            553       ; How many bytes to play?
06E5 754E00     553       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
06E8 754D23     553       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
06EB 754C28     553       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
06EE            553       
06EE            553       
06EE D2A6       553       setb SPEAKER ;Turn on speaker
06F0 D28E       553       setb TR1 ;Start playback by enabling Timer1
06F2            553       ;clr sound_flag ; sound ends
06F2 020839     554               ljmp state_6_sound_hop1
06F5            555   
06F5            556           play_40:
06F5            557               
06F5 B40434     558               cjne a, #4, play_50  
06F8            559       ; ***play audio***
06F8            559       ;cjne sound_flag, #0, $
06F8            559       
06F8 1217B2     559       lcall Wait_Half_Second
06FB C28E       559       clr TR1 ; Stop Timer 1 ISR from playing previous request
06FD D2A5       559       setb FLASH_CE
06FF            559       ;setb sound_flag ; sound starts
06FF C2A6       559       clr SPEAKER ; Turn off speaker
0701 C2A5       559       clr FLASH_CE ; Enable SPI Flash
0703 7403       559       mov a, #READ_BYTES
0705 12040D     559       lcall Send_SPI
0708            559       ; Set the initial position in memory where to start playing
0708            559       
0708 7404       559       mov a, #0x04 ; change initial position
070A 12040D     559       lcall Send_SPI
070D 743D       559       mov a, #0x3d ; next memory position
070F 12040D     559       lcall Send_SPI
0712 74F0       559       mov a, #0xf0 ; next memory position
0714 12040D     559       lcall Send_SPI
0717 7404       559       mov a, #0x04 ; request first byte to send to DAC
0719 12040D     559       lcall Send_SPI
071C            559       
071C            559       ; How many bytes to play?
071C 754E00     559       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
071F 754D1F     559       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
0722 754C40     559       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
0725            559       
0725            559       
0725 D2A6       559       setb SPEAKER ;Turn on speaker
0727 D28E       559       setb TR1 ;Start playback by enabling Timer1
0729            559       ;clr sound_flag ; sound ends
0729 020839     560               ljmp state_6_sound_hop1
072C            561   
072C            562           play_50:
072C            563              
072C B40534     564               cjne a, #5, play_60  
072F            565       ; ***play audio***
072F            565       ;cjne sound_flag, #0, $
072F            565       
072F 1217B2     565       lcall Wait_Half_Second
0732 C28E       565       clr TR1 ; Stop Timer 1 ISR from playing previous request
0734 D2A5       565       setb FLASH_CE
0736            565       ;setb sound_flag ; sound starts
0736 C2A6       565       clr SPEAKER ; Turn off speaker
0738 C2A5       565       clr FLASH_CE ; Enable SPI Flash
073A 7403       565       mov a, #READ_BYTES
073C 12040D     565       lcall Send_SPI
073F            565       ; Set the initial position in memory where to start playing
073F            565       
073F 7404       565       mov a, #0x04 ; change initial position
0741 12040D     565       lcall Send_SPI
0744 7451       565       mov a, #0x51 ; next memory position
0746 12040D     565       lcall Send_SPI
0749 7478       565       mov a, #0x78 ; next memory position
074B 12040D     565       lcall Send_SPI
074E 7404       565       mov a, #0x04 ; request first byte to send to DAC
0750 12040D     565       lcall Send_SPI
0753            565       
0753            565       ; How many bytes to play?
0753 754E00     565       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0756 754D23     565       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
0759 754C28     565       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
075C            565       
075C            565       
075C D2A6       565       setb SPEAKER ;Turn on speaker
075E D28E       565       setb TR1 ;Start playback by enabling Timer1
0760            565       ;clr sound_flag ; sound ends
0760 020839     566               ljmp state_6_sound_hop1
0763            567   
0763            568           play_60:
0763            569               
0763 B40634     570               cjne a, #6, play_70  
0766            571       ; ***play audio***
0766            571       ;cjne sound_flag, #0, $
0766            571       
0766 1217B2     571       lcall Wait_Half_Second
0769 C28E       571       clr TR1 ; Stop Timer 1 ISR from playing previous request
076B D2A5       571       setb FLASH_CE
076D            571       ;setb sound_flag ; sound starts
076D C2A6       571       clr SPEAKER ; Turn off speaker
076F C2A5       571       clr FLASH_CE ; Enable SPI Flash
0771 7403       571       mov a, #READ_BYTES
0773 12040D     571       lcall Send_SPI
0776            571       ; Set the initial position in memory where to start playing
0776            571       
0776 7404       571       mov a, #0x04 ; change initial position
0778 12040D     571       lcall Send_SPI
077B 7474       571       mov a, #0x74 ; next memory position
077D 12040D     571       lcall Send_SPI
0780 74A0       571       mov a, #0xa0 ; next memory position
0782 12040D     571       lcall Send_SPI
0785 7404       571       mov a, #0x04 ; request first byte to send to DAC
0787 12040D     571       lcall Send_SPI
078A            571       
078A            571       ; How many bytes to play?
078A 754E00     571       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
078D 754D27     571       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
0790 754C10     571       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
0793            571       
0793            571       
0793 D2A6       571       setb SPEAKER ;Turn on speaker
0795 D28E       571       setb TR1 ;Start playback by enabling Timer1
0797            571       ;clr sound_flag ; sound ends
0797 020839     572               ljmp state_6_sound_hop1
079A            573   
079A            574           play_70:
079A            575              
079A B40734     576               cjne a, #7, play_80  
079D            577       ; ***play audio***
079D            577       ;cjne sound_flag, #0, $
079D            577       
079D 1217B2     577       lcall Wait_Half_Second
07A0 C28E       577       clr TR1 ; Stop Timer 1 ISR from playing previous request
07A2 D2A5       577       setb FLASH_CE
07A4            577       ;setb sound_flag ; sound starts
07A4 C2A6       577       clr SPEAKER ; Turn off speaker
07A6 C2A5       577       clr FLASH_CE ; Enable SPI Flash
07A8 7403       577       mov a, #READ_BYTES
07AA 12040D     577       lcall Send_SPI
07AD            577       ; Set the initial position in memory where to start playing
07AD            577       
07AD 7404       577       mov a, #0x04 ; change initial position
07AF 12040D     577       lcall Send_SPI
07B2 749B       577       mov a, #0x9b ; next memory position
07B4 12040D     577       lcall Send_SPI
07B7 74B0       577       mov a, #0xb0 ; next memory position
07B9 12040D     577       lcall Send_SPI
07BC 7404       577       mov a, #0x04 ; request first byte to send to DAC
07BE 12040D     577       lcall Send_SPI
07C1            577       
07C1            577       ; How many bytes to play?
07C1 754E00     577       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
07C4 754D32     577       mov w+1, #0x32 ; Load the middle byte of the number of bytes to play
07C7 754CC8     577       mov w+0, #0xc8 ; Load the low byte of the number of bytes to play
07CA            577       
07CA            577       
07CA D2A6       577       setb SPEAKER ;Turn on speaker
07CC D28E       577       setb TR1 ;Start playback by enabling Timer1
07CE            577       ;clr sound_flag ; sound ends
07CE 020839     578               ljmp state_6_sound_hop1
07D1            579   
07D1            580           play_80:
07D1            581               
07D1 B40834     582               cjne a, #8, play_90  
07D4            583       ; ***play audio***
07D4            583       ;cjne sound_flag, #0, $
07D4            583       
07D4 1217B2     583       lcall Wait_Half_Second
07D7 C28E       583       clr TR1 ; Stop Timer 1 ISR from playing previous request
07D9 D2A5       583       setb FLASH_CE
07DB            583       ;setb sound_flag ; sound starts
07DB C2A6       583       clr SPEAKER ; Turn off speaker
07DD C2A5       583       clr FLASH_CE ; Enable SPI Flash
07DF 7403       583       mov a, #READ_BYTES
07E1 12040D     583       lcall Send_SPI
07E4            583       ; Set the initial position in memory where to start playing
07E4            583       
07E4 7404       583       mov a, #0x04 ; change initial position
07E6 12040D     583       lcall Send_SPI
07E9 74C6       583       mov a, #0xc6 ; next memory position
07EB 12040D     583       lcall Send_SPI
07EE 74A8       583       mov a, #0xa8 ; next memory position
07F0 12040D     583       lcall Send_SPI
07F3 7404       583       mov a, #0x04 ; request first byte to send to DAC
07F5 12040D     583       lcall Send_SPI
07F8            583       
07F8            583       ; How many bytes to play?
07F8 754E00     583       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
07FB 754D23     583       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
07FE 754C28     583       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
0801            583       
0801            583       
0801 D2A6       583       setb SPEAKER ;Turn on speaker
0803 D28E       583       setb TR1 ;Start playback by enabling Timer1
0805            583       ;clr sound_flag ; sound ends
0805 020839     584               ljmp state_6_sound_hop1
0808            585   
0808            586           play_90:
0808            587       ; ***play audio***
0808            587       ;cjne sound_flag, #0, $
0808            587       
0808 1217B2     587       lcall Wait_Half_Second
080B C28E       587       clr TR1 ; Stop Timer 1 ISR from playing previous request
080D D2A5       587       setb FLASH_CE
080F            587       ;setb sound_flag ; sound starts
080F C2A6       587       clr SPEAKER ; Turn off speaker
0811 C2A5       587       clr FLASH_CE ; Enable SPI Flash
0813 7403       587       mov a, #READ_BYTES
0815 12040D     587       lcall Send_SPI
0818            587       ; Set the initial position in memory where to start playing
0818            587       
0818 7404       587       mov a, #0x04 ; change initial position
081A 12040D     587       lcall Send_SPI
081D 74ED       587       mov a, #0xed ; next memory position
081F 12040D     587       lcall Send_SPI
0822 74B8       587       mov a, #0xb8 ; next memory position
0824 12040D     587       lcall Send_SPI
0827 7404       587       mov a, #0x04 ; request first byte to send to DAC
0829 12040D     587       lcall Send_SPI
082C            587       
082C            587       ; How many bytes to play?
082C 754E00     587       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
082F 754D1F     587       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
0832 754C40     587       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
0835            587       
0835            587       
0835 D2A6       587       setb SPEAKER ;Turn on speaker
0837 D28E       587       setb TR1 ;Start playback by enabling Timer1
0839            587       ;clr sound_flag ; sound ends
0839            588   
0839            589       state_6_sound_hop1:
0839 02083C     590           ljmp state_6_sound
083C            591           
083C            592       ;state_8_hop0:
083C            593           ;ljmp state_6_sound ;state_8_sound
083C            594   
083C            595   
083C            596   state_6_sound:
083C            597   ; play 1 - 9
083C            598       ;ljmp PLAYBACK_TEMP
083C 75F064     599       mov b, #100
083F E53B       600       mov a, Temp_oven
0841 84         601       div ab
0842 E5F0       602       mov a, b
0844 75F00A     603       mov b, #10
0847 84         604       div ab
0848 E5F0       605       mov a, b
084A            606       
084A B40003     607       cjne a, #0x00, play_1
084D 020A39     608       ljmp state_8_hop1
0850            609   
0850            610       play_1:
0850 B40134     611           cjne a, #0x01, play_2
0853            612       ; ***play audio***
0853            612       ;cjne sound_flag, #0, $
0853            612       
0853 1217B2     612       lcall Wait_Half_Second
0856 C28E       612       clr TR1 ; Stop Timer 1 ISR from playing previous request
0858 D2A5       612       setb FLASH_CE
085A            612       ;setb sound_flag ; sound starts
085A C2A6       612       clr SPEAKER ; Turn off speaker
085C C2A5       612       clr FLASH_CE ; Enable SPI Flash
085E 7403       612       mov a, #READ_BYTES
0860 12040D     612       lcall Send_SPI
0863            612       ; Set the initial position in memory where to start playing
0863            612       
0863 7401       612       mov a, #0x01 ; change initial position
0865 12040D     612       lcall Send_SPI
0868 7493       612       mov a, #0x93 ; next memory position
086A 12040D     612       lcall Send_SPI
086D 7484       612       mov a, #0x84 ; next memory position
086F 12040D     612       lcall Send_SPI
0872 7401       612       mov a, #0x01 ; request first byte to send to DAC
0874 12040D     612       lcall Send_SPI
0877            612       
0877            612       ; How many bytes to play?
0877 754E00     612       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
087A 754D36     612       mov w+1, #0x36 ; Load the middle byte of the number of bytes to play
087D 754CB0     612       mov w+0, #0xb0 ; Load the low byte of the number of bytes to play
0880            612       
0880            612       
0880 D2A6       612       setb SPEAKER ;Turn on speaker
0882 D28E       612       setb TR1 ;Start playback by enabling Timer1
0884            612       ;clr sound_flag ; sound ends 
0884 020A39     613           ljmp state_8_hop1
0887            614   
0887            615       play_2:
0887 B40234     616           cjne a, #0x02, play_3
088A            617       ; ***play audio***
088A            617       ;cjne sound_flag, #0, $
088A            617       
088A 1217B2     617       lcall Wait_Half_Second
088D C28E       617       clr TR1 ; Stop Timer 1 ISR from playing previous request
088F D2A5       617       setb FLASH_CE
0891            617       ;setb sound_flag ; sound starts
0891 C2A6       617       clr SPEAKER ; Turn off speaker
0893 C2A5       617       clr FLASH_CE ; Enable SPI Flash
0895 7403       617       mov a, #READ_BYTES
0897 12040D     617       lcall Send_SPI
089A            617       ; Set the initial position in memory where to start playing
089A            617       
089A 7401       617       mov a, #0x01 ; change initial position
089C 12040D     617       lcall Send_SPI
089F 74C7       617       mov a, #0xc7 ; next memory position
08A1 12040D     617       lcall Send_SPI
08A4 7414       617       mov a, #0x14 ; next memory position
08A6 12040D     617       lcall Send_SPI
08A9 7401       617       mov a, #0x01 ; request first byte to send to DAC
08AB 12040D     617       lcall Send_SPI
08AE            617       
08AE            617       ; How many bytes to play?
08AE 754E00     617       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
08B1 754D13     617       mov w+1, #0x13 ; Load the middle byte of the number of bytes to play
08B4 754C88     617       mov w+0, #0x88 ; Load the low byte of the number of bytes to play
08B7            617       
08B7            617       
08B7 D2A6       617       setb SPEAKER ;Turn on speaker
08B9 D28E       617       setb TR1 ;Start playback by enabling Timer1
08BB            617       ;clr sound_flag ; sound ends
08BB 020A39     618           ljmp state_8_hop1
08BE            619   
08BE            620       play_3:
08BE B40334     621           cjne a, #0x03, play_4
08C1            622       ; ***play audio***
08C1            622       ;cjne sound_flag, #0, $
08C1            622       
08C1 1217B2     622       lcall Wait_Half_Second
08C4 C28E       622       clr TR1 ; Stop Timer 1 ISR from playing previous request
08C6 D2A5       622       setb FLASH_CE
08C8            622       ;setb sound_flag ; sound starts
08C8 C2A6       622       clr SPEAKER ; Turn off speaker
08CA C2A5       622       clr FLASH_CE ; Enable SPI Flash
08CC 7403       622       mov a, #READ_BYTES
08CE 12040D     622       lcall Send_SPI
08D1            622       ; Set the initial position in memory where to start playing
08D1            622       
08D1 7401       622       mov a, #0x01 ; change initial position
08D3 12040D     622       lcall Send_SPI
08D6 74D6       622       mov a, #0xd6 ; next memory position
08D8 12040D     622       lcall Send_SPI
08DB 7468       622       mov a, #0x68 ; next memory position
08DD 12040D     622       lcall Send_SPI
08E0 7401       622       mov a, #0x01 ; request first byte to send to DAC
08E2 12040D     622       lcall Send_SPI
08E5            622       
08E5            622       ; How many bytes to play?
08E5 754E00     622       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
08E8 754D23     622       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
08EB 754C28     622       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
08EE            622       
08EE            622       
08EE D2A6       622       setb SPEAKER ;Turn on speaker
08F0 D28E       622       setb TR1 ;Start playback by enabling Timer1
08F2            622       ;clr sound_flag ; sound ends
08F2 020A39     623           ljmp state_8_hop1
08F5            624   
08F5            625       play_4:
08F5 B40434     626           cjne a, #0x04, play_5
08F8            627       ; ***play audio***
08F8            627       ;cjne sound_flag, #0, $
08F8            627       
08F8 1217B2     627       lcall Wait_Half_Second
08FB C28E       627       clr TR1 ; Stop Timer 1 ISR from playing previous request
08FD D2A5       627       setb FLASH_CE
08FF            627       ;setb sound_flag ; sound starts
08FF C2A6       627       clr SPEAKER ; Turn off speaker
0901 C2A5       627       clr FLASH_CE ; Enable SPI Flash
0903 7403       627       mov a, #READ_BYTES
0905 12040D     627       lcall Send_SPI
0908            627       ; Set the initial position in memory where to start playing
0908            627       
0908 7401       627       mov a, #0x01 ; change initial position
090A 12040D     627       lcall Send_SPI
090D 74F4       627       mov a, #0xf4 ; next memory position
090F 12040D     627       lcall Send_SPI
0912 7400       627       mov a, #0x00 ; next memory position
0914 12040D     627       lcall Send_SPI
0917 7401       627       mov a, #0x01 ; request first byte to send to DAC
0919 12040D     627       lcall Send_SPI
091C            627       
091C            627       ; How many bytes to play?
091C 754E00     627       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
091F 754D1B     627       mov w+1, #0x1b ; Load the middle byte of the number of bytes to play
0922 754C58     627       mov w+0, #0x58 ; Load the low byte of the number of bytes to play
0925            627       
0925            627       
0925 D2A6       627       setb SPEAKER ;Turn on speaker
0927 D28E       627       setb TR1 ;Start playback by enabling Timer1
0929            627       ;clr sound_flag ; sound ends
0929 020A39     628           ljmp state_8_hop1
092C            629   
092C            630       play_5:
092C B40534     631           cjne a, #0x05, play_6
092F            632       ; ***play audio***
092F            632       ;cjne sound_flag, #0, $
092F            632       
092F 1217B2     632       lcall Wait_Half_Second
0932 C28E       632       clr TR1 ; Stop Timer 1 ISR from playing previous request
0934 D2A5       632       setb FLASH_CE
0936            632       ;setb sound_flag ; sound starts
0936 C2A6       632       clr SPEAKER ; Turn off speaker
0938 C2A5       632       clr FLASH_CE ; Enable SPI Flash
093A 7403       632       mov a, #READ_BYTES
093C 12040D     632       lcall Send_SPI
093F            632       ; Set the initial position in memory where to start playing
093F            632       
093F 7402       632       mov a, #0x02 ; change initial position
0941 12040D     632       lcall Send_SPI
0944 7407       632       mov a, #0x07 ; next memory position
0946 12040D     632       lcall Send_SPI
0949 7488       632       mov a, #0x88 ; next memory position
094B 12040D     632       lcall Send_SPI
094E 7402       632       mov a, #0x02 ; request first byte to send to DAC
0950 12040D     632       lcall Send_SPI
0953            632       
0953            632       ; How many bytes to play?
0953 754E00     632       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0956 754D1B     632       mov w+1, #0x1b ; Load the middle byte of the number of bytes to play
0959 754C58     632       mov w+0, #0x58 ; Load the low byte of the number of bytes to play
095C            632       
095C            632       
095C D2A6       632       setb SPEAKER ;Turn on speaker
095E D28E       632       setb TR1 ;Start playback by enabling Timer1
0960            632       ;clr sound_flag ; sound ends
0960 020A39     633           ljmp state_8_hop1
0963            634   
0963            635       play_6:
0963 B40634     636           cjne a, #0x06, play_7
0966            637       ; ***play audio***
0966            637       ;cjne sound_flag, #0, $
0966            637       
0966 1217B2     637       lcall Wait_Half_Second
0969 C28E       637       clr TR1 ; Stop Timer 1 ISR from playing previous request
096B D2A5       637       setb FLASH_CE
096D            637       ;setb sound_flag ; sound starts
096D C2A6       637       clr SPEAKER ; Turn off speaker
096F C2A5       637       clr FLASH_CE ; Enable SPI Flash
0971 7403       637       mov a, #READ_BYTES
0973 12040D     637       lcall Send_SPI
0976            637       ; Set the initial position in memory where to start playing
0976            637       
0976 7402       637       mov a, #0x02 ; change initial position
0978 12040D     637       lcall Send_SPI
097B 7426       637       mov a, #0x26 ; next memory position
097D 12040D     637       lcall Send_SPI
0980 74C8       637       mov a, #0xc8 ; next memory position
0982 12040D     637       lcall Send_SPI
0985 7402       637       mov a, #0x02 ; request first byte to send to DAC
0987 12040D     637       lcall Send_SPI
098A            637       
098A            637       ; How many bytes to play?
098A 754E00     637       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
098D 754D1F     637       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
0990 754C40     637       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
0993            637       
0993            637       
0993 D2A6       637       setb SPEAKER ;Turn on speaker
0995 D28E       637       setb TR1 ;Start playback by enabling Timer1
0997            637       ;clr sound_flag ; sound ends
0997 020A39     638           ljmp state_8_hop1
099A            639   
099A            640       play_7:
099A B40734     641           cjne a, #0x07, play_8
099D            642       ; ***play audio***
099D            642       ;cjne sound_flag, #0, $
099D            642       
099D 1217B2     642       lcall Wait_Half_Second
09A0 C28E       642       clr TR1 ; Stop Timer 1 ISR from playing previous request
09A2 D2A5       642       setb FLASH_CE
09A4            642       ;setb sound_flag ; sound starts
09A4 C2A6       642       clr SPEAKER ; Turn off speaker
09A6 C2A5       642       clr FLASH_CE ; Enable SPI Flash
09A8 7403       642       mov a, #READ_BYTES
09AA 12040D     642       lcall Send_SPI
09AD            642       ; Set the initial position in memory where to start playing
09AD            642       
09AD 7402       642       mov a, #0x02 ; change initial position
09AF 12040D     642       lcall Send_SPI
09B2 7436       642       mov a, #0x36 ; next memory position
09B4 12040D     642       lcall Send_SPI
09B7 7468       642       mov a, #0x68 ; next memory position
09B9 12040D     642       lcall Send_SPI
09BC 7402       642       mov a, #0x02 ; request first byte to send to DAC
09BE 12040D     642       lcall Send_SPI
09C1            642       
09C1            642       ; How many bytes to play?
09C1 754E00     642       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
09C4 754D23     642       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
09C7 754C28     642       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
09CA            642       
09CA            642       
09CA D2A6       642       setb SPEAKER ;Turn on speaker
09CC D28E       642       setb TR1 ;Start playback by enabling Timer1
09CE            642       ;clr sound_flag ; sound ends
09CE 020A39     643           ljmp state_8_hop1
09D1            644   
09D1            645       play_8:
09D1 B40834     646           cjne a, #0x08, play_9
09D4            647       ; ***play audio***
09D4            647       ;cjne sound_flag, #0, $
09D4            647       
09D4 1217B2     647       lcall Wait_Half_Second
09D7 C28E       647       clr TR1 ; Stop Timer 1 ISR from playing previous request
09D9 D2A5       647       setb FLASH_CE
09DB            647       ;setb sound_flag ; sound starts
09DB C2A6       647       clr SPEAKER ; Turn off speaker
09DD C2A5       647       clr FLASH_CE ; Enable SPI Flash
09DF 7403       647       mov a, #READ_BYTES
09E1 12040D     647       lcall Send_SPI
09E4            647       ; Set the initial position in memory where to start playing
09E4            647       
09E4 7402       647       mov a, #0x02 ; change initial position
09E6 12040D     647       lcall Send_SPI
09E9 7457       647       mov a, #0x57 ; next memory position
09EB 12040D     647       lcall Send_SPI
09EE 749C       647       mov a, #0x9c ; next memory position
09F0 12040D     647       lcall Send_SPI
09F3 7402       647       mov a, #0x02 ; request first byte to send to DAC
09F5 12040D     647       lcall Send_SPI
09F8            647       
09F8            647       ; How many bytes to play?
09F8 754E00     647       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
09FB 754D1B     647       mov w+1, #0x1b ; Load the middle byte of the number of bytes to play
09FE 754C58     647       mov w+0, #0x58 ; Load the low byte of the number of bytes to play
0A01            647       
0A01            647       
0A01 D2A6       647       setb SPEAKER ;Turn on speaker
0A03 D28E       647       setb TR1 ;Start playback by enabling Timer1
0A05            647       ;clr sound_flag ; sound ends
0A05 020A39     648           ljmp state_8_hop1
0A08            649   
0A08            650       play_9:
0A08            651       ; ***play audio***
0A08            651       ;cjne sound_flag, #0, $
0A08            651       
0A08 1217B2     651       lcall Wait_Half_Second
0A0B C28E       651       clr TR1 ; Stop Timer 1 ISR from playing previous request
0A0D D2A5       651       setb FLASH_CE
0A0F            651       ;setb sound_flag ; sound starts
0A0F C2A6       651       clr SPEAKER ; Turn off speaker
0A11 C2A5       651       clr FLASH_CE ; Enable SPI Flash
0A13 7403       651       mov a, #READ_BYTES
0A15 12040D     651       lcall Send_SPI
0A18            651       ; Set the initial position in memory where to start playing
0A18            651       
0A18 7402       651       mov a, #0x02 ; change initial position
0A1A 12040D     651       lcall Send_SPI
0A1D 7469       651       mov a, #0x69 ; next memory position
0A1F 12040D     651       lcall Send_SPI
0A22 7430       651       mov a, #0x30 ; next memory position
0A24 12040D     651       lcall Send_SPI
0A27 7402       651       mov a, #0x02 ; request first byte to send to DAC
0A29 12040D     651       lcall Send_SPI
0A2C            651       
0A2C            651       ; How many bytes to play?
0A2C 754E00     651       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0A2F 754D1F     651       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
0A32 754C40     651       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
0A35            651       
0A35            651       
0A35 D2A6       651       setb SPEAKER ;Turn on speaker
0A37 D28E       651       setb TR1 ;Start playback by enabling Timer1
0A39            651       ;clr sound_flag ; sound ends
0A39            652   
0A39            653   state_8_hop1:
0A39            654   ; go to state_8_sound
0A39 020C67     655       ljmp state_8_sound
0A3C            656   
0A3C            657   
0A3C            658   state_7_sound:
0A3C            659   ; play 10 - 19
0A3C            660       ;ljmp PLAYBACK_TEMP
0A3C 75F064     661       mov b, #100
0A3F E53B       662       mov a, Temp_oven
0A41 84         663       div ab
0A42 E5F0       664       mov a, b
0A44 B40A34     665       cjne a, #0x0a, play_11
0A47            666       
0A47            667       ; ***play audio***
0A47            667       ;cjne sound_flag, #0, $
0A47            667       
0A47 1217B2     667       lcall Wait_Half_Second
0A4A C28E       667       clr TR1 ; Stop Timer 1 ISR from playing previous request
0A4C D2A5       667       setb FLASH_CE
0A4E            667       ;setb sound_flag ; sound starts
0A4E C2A6       667       clr SPEAKER ; Turn off speaker
0A50 C2A5       667       clr FLASH_CE ; Enable SPI Flash
0A52 7403       667       mov a, #READ_BYTES
0A54 12040D     667       lcall Send_SPI
0A57            667       ; Set the initial position in memory where to start playing
0A57            667       
0A57 7402       667       mov a, #0x02 ; change initial position
0A59 12040D     667       lcall Send_SPI
0A5C 7484       667       mov a, #0x84 ; next memory position
0A5E 12040D     667       lcall Send_SPI
0A61 7488       667       mov a, #0x88 ; next memory position
0A63 12040D     667       lcall Send_SPI
0A66 7402       667       mov a, #0x02 ; request first byte to send to DAC
0A68 12040D     667       lcall Send_SPI
0A6B            667       
0A6B            667       ; How many bytes to play?
0A6B 754E00     667       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0A6E 754D17     667       mov w+1, #0x17 ; Load the middle byte of the number of bytes to play
0A71 754C70     667       mov w+0, #0x70 ; Load the low byte of the number of bytes to play
0A74            667       
0A74            667       
0A74 D2A6       667       setb SPEAKER ;Turn on speaker
0A76 D28E       667       setb TR1 ;Start playback by enabling Timer1
0A78            667       ;clr sound_flag ; sound ends
0A78 020C64     668       ljmp state_8_hop2
0A7B            669   
0A7B            670       play_11:
0A7B B40B34     671           cjne a, #0x0b, play_12
0A7E            672       ; ***play audio***
0A7E            672       ;cjne sound_flag, #0, $
0A7E            672       
0A7E 1217B2     672       lcall Wait_Half_Second
0A81 C28E       672       clr TR1 ; Stop Timer 1 ISR from playing previous request
0A83 D2A5       672       setb FLASH_CE
0A85            672       ;setb sound_flag ; sound starts
0A85 C2A6       672       clr SPEAKER ; Turn off speaker
0A87 C2A5       672       clr FLASH_CE ; Enable SPI Flash
0A89 7403       672       mov a, #READ_BYTES
0A8B 12040D     672       lcall Send_SPI
0A8E            672       ; Set the initial position in memory where to start playing
0A8E            672       
0A8E 7402       672       mov a, #0x02 ; change initial position
0A90 12040D     672       lcall Send_SPI
0A93 749B       672       mov a, #0x9b ; next memory position
0A95 12040D     672       lcall Send_SPI
0A98 74F8       672       mov a, #0xf8 ; next memory position
0A9A 12040D     672       lcall Send_SPI
0A9D 7402       672       mov a, #0x02 ; request first byte to send to DAC
0A9F 12040D     672       lcall Send_SPI
0AA2            672       
0AA2            672       ; How many bytes to play?
0AA2 754E00     672       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0AA5 754D1F     672       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
0AA8 754C40     672       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
0AAB            672       
0AAB            672       
0AAB D2A6       672       setb SPEAKER ;Turn on speaker
0AAD D28E       672       setb TR1 ;Start playback by enabling Timer1
0AAF            672       ;clr sound_flag ; sound ends
0AAF 020C64     673           ljmp state_8_hop2
0AB2            674   
0AB2            675       play_12:
0AB2 B40C34     676           cjne a, #0x0c, play_13
0AB5            677       ; ***play audio***
0AB5            677       ;cjne sound_flag, #0, $
0AB5            677       
0AB5 1217B2     677       lcall Wait_Half_Second
0AB8 C28E       677       clr TR1 ; Stop Timer 1 ISR from playing previous request
0ABA D2A5       677       setb FLASH_CE
0ABC            677       ;setb sound_flag ; sound starts
0ABC C2A6       677       clr SPEAKER ; Turn off speaker
0ABE C2A5       677       clr FLASH_CE ; Enable SPI Flash
0AC0 7403       677       mov a, #READ_BYTES
0AC2 12040D     677       lcall Send_SPI
0AC5            677       ; Set the initial position in memory where to start playing
0AC5            677       
0AC5 7402       677       mov a, #0x02 ; change initial position
0AC7 12040D     677       lcall Send_SPI
0ACA 74B7       677       mov a, #0xb7 ; next memory position
0ACC 12040D     677       lcall Send_SPI
0ACF 7450       677       mov a, #0x50 ; next memory position
0AD1 12040D     677       lcall Send_SPI
0AD4 7402       677       mov a, #0x02 ; request first byte to send to DAC
0AD6 12040D     677       lcall Send_SPI
0AD9            677       
0AD9            677       ; How many bytes to play?
0AD9 754E00     677       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0ADC 754D1F     677       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
0ADF 754C40     677       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
0AE2            677       
0AE2            677       
0AE2 D2A6       677       setb SPEAKER ;Turn on speaker
0AE4 D28E       677       setb TR1 ;Start playback by enabling Timer1
0AE6            677       ;clr sound_flag ; sound ends
0AE6 020C64     678           ljmp state_8_hop2
0AE9            679   
0AE9            680       play_13:
0AE9 B40D34     681           cjne a, #0x0d, play_14
0AEC            682       ; ***play audio***
0AEC            682       ;cjne sound_flag, #0, $
0AEC            682       
0AEC 1217B2     682       lcall Wait_Half_Second
0AEF C28E       682       clr TR1 ; Stop Timer 1 ISR from playing previous request
0AF1 D2A5       682       setb FLASH_CE
0AF3            682       ;setb sound_flag ; sound starts
0AF3 C2A6       682       clr SPEAKER ; Turn off speaker
0AF5 C2A5       682       clr FLASH_CE ; Enable SPI Flash
0AF7 7403       682       mov a, #READ_BYTES
0AF9 12040D     682       lcall Send_SPI
0AFC            682       ; Set the initial position in memory where to start playing
0AFC            682       
0AFC 7402       682       mov a, #0x02 ; change initial position
0AFE 12040D     682       lcall Send_SPI
0B01 74CE       682       mov a, #0xce ; next memory position
0B03 12040D     682       lcall Send_SPI
0B06 74C0       682       mov a, #0xc0 ; next memory position
0B08 12040D     682       lcall Send_SPI
0B0B 7402       682       mov a, #0x02 ; request first byte to send to DAC
0B0D 12040D     682       lcall Send_SPI
0B10            682       
0B10            682       ; How many bytes to play?
0B10 754E00     682       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0B13 754D2E     682       mov w+1, #0x2e ; Load the middle byte of the number of bytes to play
0B16 754CE0     682       mov w+0, #0xe0 ; Load the low byte of the number of bytes to play
0B19            682       
0B19            682       
0B19 D2A6       682       setb SPEAKER ;Turn on speaker
0B1B D28E       682       setb TR1 ;Start playback by enabling Timer1
0B1D            682       ;clr sound_flag ; sound ends
0B1D 020C64     683           ljmp state_8_hop2
0B20            684   
0B20            685       play_14:
0B20 B40E34     686           cjne a, #0x0e, play_15
0B23            687       ; ***play audio***
0B23            687       ;cjne sound_flag, #0, $
0B23            687       
0B23 1217B2     687       lcall Wait_Half_Second
0B26 C28E       687       clr TR1 ; Stop Timer 1 ISR from playing previous request
0B28 D2A5       687       setb FLASH_CE
0B2A            687       ;setb sound_flag ; sound starts
0B2A C2A6       687       clr SPEAKER ; Turn off speaker
0B2C C2A5       687       clr FLASH_CE ; Enable SPI Flash
0B2E 7403       687       mov a, #READ_BYTES
0B30 12040D     687       lcall Send_SPI
0B33            687       ; Set the initial position in memory where to start playing
0B33            687       
0B33 7402       687       mov a, #0x02 ; change initial position
0B35 12040D     687       lcall Send_SPI
0B38 74F5       687       mov a, #0xf5 ; next memory position
0B3A 12040D     687       lcall Send_SPI
0B3D 74D0       687       mov a, #0xd0 ; next memory position
0B3F 12040D     687       lcall Send_SPI
0B42 7402       687       mov a, #0x02 ; request first byte to send to DAC
0B44 12040D     687       lcall Send_SPI
0B47            687       
0B47            687       ; How many bytes to play?
0B47 754E00     687       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0B4A 754D36     687       mov w+1, #0x36 ; Load the middle byte of the number of bytes to play
0B4D 754CB0     687       mov w+0, #0xb0 ; Load the low byte of the number of bytes to play
0B50            687       
0B50            687       
0B50 D2A6       687       setb SPEAKER ;Turn on speaker
0B52 D28E       687       setb TR1 ;Start playback by enabling Timer1
0B54            687       ;clr sound_flag ; sound ends
0B54 020C64     688           ljmp state_8_hop2
0B57            689   
0B57            690       play_15:
0B57 B40F34     691           cjne a, #0x0f, play_16
0B5A            692       ; ***play audio***
0B5A            692       ;cjne sound_flag, #0, $
0B5A            692       
0B5A 1217B2     692       lcall Wait_Half_Second
0B5D C28E       692       clr TR1 ; Stop Timer 1 ISR from playing previous request
0B5F D2A5       692       setb FLASH_CE
0B61            692       ;setb sound_flag ; sound starts
0B61 C2A6       692       clr SPEAKER ; Turn off speaker
0B63 C2A5       692       clr FLASH_CE ; Enable SPI Flash
0B65 7403       692       mov a, #READ_BYTES
0B67 12040D     692       lcall Send_SPI
0B6A            692       ; Set the initial position in memory where to start playing
0B6A            692       
0B6A 7403       692       mov a, #0x03 ; change initial position
0B6C 12040D     692       lcall Send_SPI
0B6F 7428       692       mov a, #0x28 ; next memory position
0B71 12040D     692       lcall Send_SPI
0B74 7498       692       mov a, #0x98 ; next memory position
0B76 12040D     692       lcall Send_SPI
0B79 7403       692       mov a, #0x03 ; request first byte to send to DAC
0B7B 12040D     692       lcall Send_SPI
0B7E            692       
0B7E            692       ; How many bytes to play?
0B7E 754E00     692       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0B81 754D23     692       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
0B84 754C28     692       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
0B87            692       
0B87            692       
0B87 D2A6       692       setb SPEAKER ;Turn on speaker
0B89 D28E       692       setb TR1 ;Start playback by enabling Timer1
0B8B            692       ;clr sound_flag ; sound ends
0B8B 020C64     693           ljmp state_8_hop2
0B8E            694   
0B8E            695       play_16:
0B8E B41034     696           cjne a, #0x10, play_17
0B91            697       ; ***play audio***
0B91            697       ;cjne sound_flag, #0, $
0B91            697       
0B91 1217B2     697       lcall Wait_Half_Second
0B94 C28E       697       clr TR1 ; Stop Timer 1 ISR from playing previous request
0B96 D2A5       697       setb FLASH_CE
0B98            697       ;setb sound_flag ; sound starts
0B98 C2A6       697       clr SPEAKER ; Turn off speaker
0B9A C2A5       697       clr FLASH_CE ; Enable SPI Flash
0B9C 7403       697       mov a, #READ_BYTES
0B9E 12040D     697       lcall Send_SPI
0BA1            697       ; Set the initial position in memory where to start playing
0BA1            697       
0BA1 7403       697       mov a, #0x03 ; change initial position
0BA3 12040D     697       lcall Send_SPI
0BA6 7447       697       mov a, #0x47 ; next memory position
0BA8 12040D     697       lcall Send_SPI
0BAB 74D8       697       mov a, #0xd8 ; next memory position
0BAD 12040D     697       lcall Send_SPI
0BB0 7403       697       mov a, #0x03 ; request first byte to send to DAC
0BB2 12040D     697       lcall Send_SPI
0BB5            697       
0BB5            697       ; How many bytes to play?
0BB5 754E00     697       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0BB8 754D32     697       mov w+1, #0x32 ; Load the middle byte of the number of bytes to play
0BBB 754CC8     697       mov w+0, #0xc8 ; Load the low byte of the number of bytes to play
0BBE            697       
0BBE            697       
0BBE D2A6       697       setb SPEAKER ;Turn on speaker
0BC0 D28E       697       setb TR1 ;Start playback by enabling Timer1
0BC2            697       ;clr sound_flag ; sound ends
0BC2 020C64     698           ljmp state_8_hop2
0BC5            699   
0BC5            700       play_17:
0BC5 B41134     701           cjne a, #0x11, play_18
0BC8            702       ; ***play audio***
0BC8            702       ;cjne sound_flag, #0, $
0BC8            702       
0BC8 1217B2     702       lcall Wait_Half_Second
0BCB C28E       702       clr TR1 ; Stop Timer 1 ISR from playing previous request
0BCD D2A5       702       setb FLASH_CE
0BCF            702       ;setb sound_flag ; sound starts
0BCF C2A6       702       clr SPEAKER ; Turn off speaker
0BD1 C2A5       702       clr FLASH_CE ; Enable SPI Flash
0BD3 7403       702       mov a, #READ_BYTES
0BD5 12040D     702       lcall Send_SPI
0BD8            702       ; Set the initial position in memory where to start playing
0BD8            702       
0BD8 7403       702       mov a, #0x03 ; change initial position
0BDA 12040D     702       lcall Send_SPI
0BDD 7476       702       mov a, #0x76 ; next memory position
0BDF 12040D     702       lcall Send_SPI
0BE2 74B8       702       mov a, #0xb8 ; next memory position
0BE4 12040D     702       lcall Send_SPI
0BE7 7403       702       mov a, #0x03 ; request first byte to send to DAC
0BE9 12040D     702       lcall Send_SPI
0BEC            702       
0BEC            702       ; How many bytes to play?
0BEC 754E00     702       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0BEF 754D2E     702       mov w+1, #0x2e ; Load the middle byte of the number of bytes to play
0BF2 754C20     702       mov w+0, #0x20 ; Load the low byte of the number of bytes to play
0BF5            702       
0BF5            702       
0BF5 D2A6       702       setb SPEAKER ;Turn on speaker
0BF7 D28E       702       setb TR1 ;Start playback by enabling Timer1
0BF9            702       ;clr sound_flag ; sound ends
0BF9 020C64     703           ljmp state_8_hop2
0BFC            704   
0BFC            705       play_18:
0BFC B41234     706           cjne a, #0x12, play_19
0BFF            707       ; ***play audio***
0BFF            707       ;cjne sound_flag, #0, $
0BFF            707       
0BFF 1217B2     707       lcall Wait_Half_Second
0C02 C28E       707       clr TR1 ; Stop Timer 1 ISR from playing previous request
0C04 D2A5       707       setb FLASH_CE
0C06            707       ;setb sound_flag ; sound starts
0C06 C2A6       707       clr SPEAKER ; Turn off speaker
0C08 C2A5       707       clr FLASH_CE ; Enable SPI Flash
0C0A 7403       707       mov a, #READ_BYTES
0C0C 12040D     707       lcall Send_SPI
0C0F            707       ; Set the initial position in memory where to start playing
0C0F            707       
0C0F 7403       707       mov a, #0x03 ; change initial position
0C11 12040D     707       lcall Send_SPI
0C14 74A1       707       mov a, #0xa1 ; next memory position
0C16 12040D     707       lcall Send_SPI
0C19 74B0       707       mov a, #0xb0 ; next memory position
0C1B 12040D     707       lcall Send_SPI
0C1E 7403       707       mov a, #0x03 ; request first byte to send to DAC
0C20 12040D     707       lcall Send_SPI
0C23            707       
0C23            707       ; How many bytes to play?
0C23 754E00     707       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0C26 754D27     707       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
0C29 754C10     707       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
0C2C            707       
0C2C            707       
0C2C D2A6       707       setb SPEAKER ;Turn on speaker
0C2E D28E       707       setb TR1 ;Start playback by enabling Timer1
0C30            707       ;clr sound_flag ; sound ends
0C30 020C64     708           ljmp state_8_hop2
0C33            709   
0C33            710       play_19:
0C33            711       ; ***play audio***
0C33            711       ;cjne sound_flag, #0, $
0C33            711       
0C33 1217B2     711       lcall Wait_Half_Second
0C36 C28E       711       clr TR1 ; Stop Timer 1 ISR from playing previous request
0C38 D2A5       711       setb FLASH_CE
0C3A            711       ;setb sound_flag ; sound starts
0C3A C2A6       711       clr SPEAKER ; Turn off speaker
0C3C C2A5       711       clr FLASH_CE ; Enable SPI Flash
0C3E 7403       711       mov a, #READ_BYTES
0C40 12040D     711       lcall Send_SPI
0C43            711       ; Set the initial position in memory where to start playing
0C43            711       
0C43 7403       711       mov a, #0x03 ; change initial position
0C45 12040D     711       lcall Send_SPI
0C48 74C8       711       mov a, #0xc8 ; next memory position
0C4A 12040D     711       lcall Send_SPI
0C4D 74C0       711       mov a, #0xc0 ; next memory position
0C4F 12040D     711       lcall Send_SPI
0C52 7403       711       mov a, #0x03 ; request first byte to send to DAC
0C54 12040D     711       lcall Send_SPI
0C57            711       
0C57            711       ; How many bytes to play?
0C57 754E00     711       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0C5A 754D27     711       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
0C5D 754C10     711       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
0C60            711       
0C60            711       
0C60 D2A6       711       setb SPEAKER ;Turn on speaker
0C62 D28E       711       setb TR1 ;Start playback by enabling Timer1
0C64            711       ;clr sound_flag ; sound ends
0C64            712   
0C64            713       state_8_hop2:
0C64            714       ; go to state_8_sound
0C64 020C67     715           ljmp state_8_sound
0C67            716   
0C67            717   state_8_sound:
0C67            718   ; go to state_0_sound
0C67 020541     719       ljmp Sound_ret
0C6A            720   
0C6A            721   ;****SPANISH SOUND FSM--------------------------------------------------------
0C6A            722   SOUND_FSM_S:
0C6A            723   state_0_sound_S:
0C6A            724   ;check if 5 seconds has passed, if yes go to state 1, if no exit function 
0C6A 300104     725       jnb five_seconds_flag, Sound_ret_S
0C6D C201       726       clr five_seconds_flag
0C6F 8001       727       sjmp state_1_sound_S
0C71            728   Sound_ret_S:
0C71 22         729       ret
0C72            730   
0C72            731   state_1_sound_S:
0C72            732   ; check if temp is greater than or equal to 100, if yes go to state 2
0C72            733   ; check if temp is less than 100, if yes go to state 4
0C72 E53B       734       mov a, Temp_oven
0C74 9464       735       subb a, #100
0C76 5002       736       jnc state_2_sound_hop_S
0C78 4002       737       jc state_4_sound_hop_S
0C7A            738   
0C7A            739       state_2_sound_hop_S:
0C7A 8003       740           sjmp state_2_sound_S
0C7C            741   
0C7C            742       state_4_sound_hop_S:
0C7C 020D78     743           ljmp state_4_sound_S
0C7F            744   
0C7F            745   state_2_sound_S:
0C7F            746   ;divide temp by 100, if it is 1 play sound: "100", if it is 2 play sound: "200"
0C7F            747   ; go to state_3_sound
0C7F 75F064     748       mov b, #100
0C82 E53B       749       mov a, Temp_oven
0C84 84         750       div ab
0C85 9401       751       subb a, #1
0C87 600A       752       jz play_sound_100_S
0C89            753   
0C89 75F064     754       mov b, #100
0C8C E53B       755       mov a, Temp_oven
0C8E 84         756       div ab
0C8F 9402       757       subb a, #2
0C91 6065       758       jz play_sound_200_S
0C93            759      
0C93            760       play_sound_100_S: 
0C93            761       ; ***play audio***
0C93            761       ;cjne sound_flag, #0, $
0C93            761       
0C93 1217B2     761       lcall Wait_Half_Second
0C96 C28E       761       clr TR1 ; Stop Timer 1 ISR from playing previous request
0C98 D2A5       761       setb FLASH_CE
0C9A            761       ;setb sound_flag ; sound starts
0C9A C2A6       761       clr SPEAKER ; Turn off speaker
0C9C C2A5       761       clr FLASH_CE ; Enable SPI Flash
0C9E 7403       761       mov a, #READ_BYTES
0CA0 12040D     761       lcall Send_SPI
0CA3            761       ; Set the initial position in memory where to start playing
0CA3            761       
0CA3 7401       761       mov a, #0x01 ; change initial position
0CA5 12040D     761       lcall Send_SPI
0CA8 7493       761       mov a, #0x93 ; next memory position
0CAA 12040D     761       lcall Send_SPI
0CAD 7484       761       mov a, #0x84 ; next memory position
0CAF 12040D     761       lcall Send_SPI
0CB2 7401       761       mov a, #0x01 ; request first byte to send to DAC
0CB4 12040D     761       lcall Send_SPI
0CB7            761       
0CB7            761       ; How many bytes to play?
0CB7 754E00     761       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0CBA 754D36     761       mov w+1, #0x36 ; Load the middle byte of the number of bytes to play
0CBD 754CB0     761       mov w+0, #0xb0 ; Load the low byte of the number of bytes to play
0CC0            761       
0CC0            761       
0CC0 D2A6       761       setb SPEAKER ;Turn on speaker
0CC2 D28E       761       setb TR1 ;Start playback by enabling Timer1
0CC4            761       ;clr sound_flag ; sound ends ;one
0CC4            762       ; ***play audio***
0CC4            762       ;cjne sound_flag, #0, $
0CC4            762       
0CC4 1217B2     762       lcall Wait_Half_Second
0CC7 C28E       762       clr TR1 ; Stop Timer 1 ISR from playing previous request
0CC9 D2A5       762       setb FLASH_CE
0CCB            762       ;setb sound_flag ; sound starts
0CCB C2A6       762       clr SPEAKER ; Turn off speaker
0CCD C2A5       762       clr FLASH_CE ; Enable SPI Flash
0CCF 7403       762       mov a, #READ_BYTES
0CD1 12040D     762       lcall Send_SPI
0CD4            762       ; Set the initial position in memory where to start playing
0CD4            762       
0CD4 7405       762       mov a, #0x05 ; change initial position
0CD6 12040D     762       lcall Send_SPI
0CD9 7409       762       mov a, #0x09 ; next memory position
0CDB 12040D     762       lcall Send_SPI
0CDE 7410       762       mov a, #0x10 ; next memory position
0CE0 12040D     762       lcall Send_SPI
0CE3 7405       762       mov a, #0x05 ; request first byte to send to DAC
0CE5 12040D     762       lcall Send_SPI
0CE8            762       
0CE8            762       ; How many bytes to play?
0CE8 754E00     762       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0CEB 754D27     762       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
0CEE 754C10     762       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
0CF1            762       
0CF1            762       
0CF1 D2A6       762       setb SPEAKER ;Turn on speaker
0CF3 D28E       762       setb TR1 ;Start playback by enabling Timer1
0CF5            762       ;clr sound_flag ; sound ends ;hundred
0CF5 020D5D     763           ljmp state_3_sound_S
0CF8            764   
0CF8            765       play_sound_200_S:
0CF8            766       ; ***play audio***
0CF8            766       ;cjne sound_flag, #0, $
0CF8            766       
0CF8 1217B2     766       lcall Wait_Half_Second
0CFB C28E       766       clr TR1 ; Stop Timer 1 ISR from playing previous request
0CFD D2A5       766       setb FLASH_CE
0CFF            766       ;setb sound_flag ; sound starts
0CFF C2A6       766       clr SPEAKER ; Turn off speaker
0D01 C2A5       766       clr FLASH_CE ; Enable SPI Flash
0D03 7403       766       mov a, #READ_BYTES
0D05 12040D     766       lcall Send_SPI
0D08            766       ; Set the initial position in memory where to start playing
0D08            766       
0D08 7401       766       mov a, #0x01 ; change initial position
0D0A 12040D     766       lcall Send_SPI
0D0D 74C7       766       mov a, #0xc7 ; next memory position
0D0F 12040D     766       lcall Send_SPI
0D12 7414       766       mov a, #0x14 ; next memory position
0D14 12040D     766       lcall Send_SPI
0D17 7401       766       mov a, #0x01 ; request first byte to send to DAC
0D19 12040D     766       lcall Send_SPI
0D1C            766       
0D1C            766       ; How many bytes to play?
0D1C 754E00     766       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0D1F 754D13     766       mov w+1, #0x13 ; Load the middle byte of the number of bytes to play
0D22 754C88     766       mov w+0, #0x88 ; Load the low byte of the number of bytes to play
0D25            766       
0D25            766       
0D25 D2A6       766       setb SPEAKER ;Turn on speaker
0D27 D28E       766       setb TR1 ;Start playback by enabling Timer1
0D29            766       ;clr sound_flag ; sound ends ;two
0D29            767       ; ***play audio***
0D29            767       ;cjne sound_flag, #0, $
0D29            767       
0D29 1217B2     767       lcall Wait_Half_Second
0D2C C28E       767       clr TR1 ; Stop Timer 1 ISR from playing previous request
0D2E D2A5       767       setb FLASH_CE
0D30            767       ;setb sound_flag ; sound starts
0D30 C2A6       767       clr SPEAKER ; Turn off speaker
0D32 C2A5       767       clr FLASH_CE ; Enable SPI Flash
0D34 7403       767       mov a, #READ_BYTES
0D36 12040D     767       lcall Send_SPI
0D39            767       ; Set the initial position in memory where to start playing
0D39            767       
0D39 7405       767       mov a, #0x05 ; change initial position
0D3B 12040D     767       lcall Send_SPI
0D3E 7409       767       mov a, #0x09 ; next memory position
0D40 12040D     767       lcall Send_SPI
0D43 7410       767       mov a, #0x10 ; next memory position
0D45 12040D     767       lcall Send_SPI
0D48 7405       767       mov a, #0x05 ; request first byte to send to DAC
0D4A 12040D     767       lcall Send_SPI
0D4D            767       
0D4D            767       ; How many bytes to play?
0D4D 754E00     767       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0D50 754D27     767       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
0D53 754C10     767       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
0D56            767       
0D56            767       
0D56 D2A6       767       setb SPEAKER ;Turn on speaker
0D58 D28E       767       setb TR1 ;Start playback by enabling Timer1
0D5A            767       ;clr sound_flag ; sound ends ;hundred
0D5A 020D5D     768           ljmp state_3_sound_S
0D5D            769   
0D5D            770   state_3_sound_S:
0D5D            771   ; check remainder of temp, if it is 0, exit
0D5D            772   ; if not 0, go to state_4_sound
0D5D            773   
0D5D            774   
0D5D 75F064     775       mov b, #100
0D60 E53B       776       mov a, Temp_oven
0D62 95F0       777       subb a, b
0D64 E5F0       778       mov a, b
0D66 600D       779       jz state_3_sound_hop_S
0D68            780       
0D68 75F0C8     781       mov b, #200
0D6B E53B       782       mov a, Temp_oven
0D6D 95F0       783       subb a, b
0D6F E5F0       784       mov a, b
0D71 6002       785       jz state_3_sound_hop_S
0D73            786   
0D73 8003       787       sjmp state_4_sound_S
0D75            788   
0D75            789       state_3_sound_hop_S:
0D75 020C71     790           ljmp Sound_ret_S
0D78            791   
0D78            792   state_4_sound_S:
0D78            793   ; if T % 100 greater or equal to 20, go to state_5_sound,
0D78 75F064     794       mov b, #100
0D7B E53B       795       mov a, Temp_oven
0D7D 84         796       div ab
0D7E            797       ;mov R0, b
0D7E E5F0       798       mov a, b 
0D80            799   
0D80            800   
0D80 9414       801       subb a, #20
0D82 5027       802       jnc state_5_sound_S
0D84 6025       803       jz state_5_sound_S
0D86 E4         804       clr a
0D87            805   ; if T % 100 is less than 10, go to state_6_sound
0D87 75F064     806       mov b, #100
0D8A E53B       807       mov a, Temp_oven
0D8C 84         808       div ab
0D8D E5F0       809       mov a, b
0D8F 940A       810       subb a, #10
0D91 4015       811       jc state_6_sound_hop0_S
0D93            812       
0D93            813       ;mov a, b
0D93            814       
0D93            815       ; ubb a, #0
0D93            816       ;jc state_6_sound_hop0
0D93            817       ;clr a
0D93            818   ; if T % 100 is greater than or equal to 10 and less than 20, go to state_7_sound
0D93            819   
0D93 75F064     820       mov b, #100
0D96 E53B       821       mov a, Temp_oven
0D98 84         822       div ab
0D99 E5F0       823       mov a, b
0D9B 940A       824       subb a, #10
0D9D 6000       825       jz and_branch_S
0D9F            826   
0D9F            827       and_branch_S:
0D9F E5F0       828           mov a, b
0DA1 9414       829           subb a, #20
0DA3 4000       830           jc state_7_sound_hop0_S
0DA5            831       
0DA5            832       state_7_sound_hop0_S:
0DA5 02116C     833           ljmp state_7_sound_S
0DA8            834   
0DA8            835       state_6_sound_hop0_S:
0DA8 020F6C     836           ljmp state_6_sound_S
0DAB            837       
0DAB            838   
0DAB            839   state_5_sound_S:
0DAB            840   ; play number from 20 to 90 in decades (20, 30, 40, 50, 60, 70, 80, 90), based off remainder from temp divided by 100
0DAB            841   ; if (T % 100) % 10 is not equal to 0, go to state_6_sound
0DAB            842   ; if (T % 100) % 10 is equal to 0, go to state_8_sound
0DAB            843   
0DAB            844       play_sound_S:
0DAB            845           ;ljmp PLAYBACK_TEMP
0DAB E53B       846           mov a, Temp_oven
0DAD 75F064     847           mov b, #100
0DB0 84         848           div ab
0DB1 E5F0       849           mov a, b
0DB3 75F00A     850           mov b, #10
0DB6 84         851           div ab
0DB7 B40234     852           cjne a, #2, play_30_S
0DBA            853           ;mov    
0DBA            854   
0DBA            855           play_20_S:
0DBA            856       ; ***play audio***
0DBA            856       ;cjne sound_flag, #0, $
0DBA            856       
0DBA 1217B2     856       lcall Wait_Half_Second
0DBD C28E       856       clr TR1 ; Stop Timer 1 ISR from playing previous request
0DBF D2A5       856       setb FLASH_CE
0DC1            856       ;setb sound_flag ; sound starts
0DC1 C2A6       856       clr SPEAKER ; Turn off speaker
0DC3 C2A5       856       clr FLASH_CE ; Enable SPI Flash
0DC5 7403       856       mov a, #READ_BYTES
0DC7 12040D     856       lcall Send_SPI
0DCA            856       ; Set the initial position in memory where to start playing
0DCA            856       
0DCA 7403       856       mov a, #0x03 ; change initial position
0DCC 12040D     856       lcall Send_SPI
0DCF 74EF       856       mov a, #0xef ; next memory position
0DD1 12040D     856       lcall Send_SPI
0DD4 74D0       856       mov a, #0xd0 ; next memory position
0DD6 12040D     856       lcall Send_SPI
0DD9 7403       856       mov a, #0x03 ; request first byte to send to DAC
0DDB 12040D     856       lcall Send_SPI
0DDE            856       
0DDE            856       ; How many bytes to play?
0DDE 754E00     856       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0DE1 754D27     856       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
0DE4 754C10     856       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
0DE7            856       
0DE7            856       
0DE7 D2A6       856       setb SPEAKER ;Turn on speaker
0DE9 D28E       856       setb TR1 ;Start playback by enabling Timer1
0DEB            856       ;clr sound_flag ; sound ends
0DEB            857               ;lcall Wait_One_Second
0DEB 020F69     858               ljmp state_6_sound_hop1_S
0DEE            859   
0DEE            860           play_30_S:
0DEE            861               
0DEE B40334     862               cjne a, #3, play_40_S   
0DF1            863       ; ***play audio***
0DF1            863       ;cjne sound_flag, #0, $
0DF1            863       
0DF1 1217B2     863       lcall Wait_Half_Second
0DF4 C28E       863       clr TR1 ; Stop Timer 1 ISR from playing previous request
0DF6 D2A5       863       setb FLASH_CE
0DF8            863       ;setb sound_flag ; sound starts
0DF8 C2A6       863       clr SPEAKER ; Turn off speaker
0DFA C2A5       863       clr FLASH_CE ; Enable SPI Flash
0DFC 7403       863       mov a, #READ_BYTES
0DFE 12040D     863       lcall Send_SPI
0E01            863       ; Set the initial position in memory where to start playing
0E01            863       
0E01 7404       863       mov a, #0x04 ; change initial position
0E03 12040D     863       lcall Send_SPI
0E06 7416       863       mov a, #0x16 ; next memory position
0E08 12040D     863       lcall Send_SPI
0E0B 74E0       863       mov a, #0xe0 ; next memory position
0E0D 12040D     863       lcall Send_SPI
0E10 7404       863       mov a, #0x04 ; request first byte to send to DAC
0E12 12040D     863       lcall Send_SPI
0E15            863       
0E15            863       ; How many bytes to play?
0E15 754E00     863       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0E18 754D23     863       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
0E1B 754C28     863       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
0E1E            863       
0E1E            863       
0E1E D2A6       863       setb SPEAKER ;Turn on speaker
0E20 D28E       863       setb TR1 ;Start playback by enabling Timer1
0E22            863       ;clr sound_flag ; sound ends
0E22 020F69     864               ljmp state_6_sound_hop1_S
0E25            865   
0E25            866           play_40_S:
0E25            867               
0E25 B40434     868               cjne a, #4, play_50_S 
0E28            869       ; ***play audio***
0E28            869       ;cjne sound_flag, #0, $
0E28            869       
0E28 1217B2     869       lcall Wait_Half_Second
0E2B C28E       869       clr TR1 ; Stop Timer 1 ISR from playing previous request
0E2D D2A5       869       setb FLASH_CE
0E2F            869       ;setb sound_flag ; sound starts
0E2F C2A6       869       clr SPEAKER ; Turn off speaker
0E31 C2A5       869       clr FLASH_CE ; Enable SPI Flash
0E33 7403       869       mov a, #READ_BYTES
0E35 12040D     869       lcall Send_SPI
0E38            869       ; Set the initial position in memory where to start playing
0E38            869       
0E38 7404       869       mov a, #0x04 ; change initial position
0E3A 12040D     869       lcall Send_SPI
0E3D 743D       869       mov a, #0x3d ; next memory position
0E3F 12040D     869       lcall Send_SPI
0E42 74F0       869       mov a, #0xf0 ; next memory position
0E44 12040D     869       lcall Send_SPI
0E47 7404       869       mov a, #0x04 ; request first byte to send to DAC
0E49 12040D     869       lcall Send_SPI
0E4C            869       
0E4C            869       ; How many bytes to play?
0E4C 754E00     869       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0E4F 754D1F     869       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
0E52 754C40     869       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
0E55            869       
0E55            869       
0E55 D2A6       869       setb SPEAKER ;Turn on speaker
0E57 D28E       869       setb TR1 ;Start playback by enabling Timer1
0E59            869       ;clr sound_flag ; sound ends
0E59 020F69     870               ljmp state_6_sound_hop1_S
0E5C            871   
0E5C            872           play_50_S:
0E5C            873              
0E5C B40534     874               cjne a, #5, play_60_S  
0E5F            875       ; ***play audio***
0E5F            875       ;cjne sound_flag, #0, $
0E5F            875       
0E5F 1217B2     875       lcall Wait_Half_Second
0E62 C28E       875       clr TR1 ; Stop Timer 1 ISR from playing previous request
0E64 D2A5       875       setb FLASH_CE
0E66            875       ;setb sound_flag ; sound starts
0E66 C2A6       875       clr SPEAKER ; Turn off speaker
0E68 C2A5       875       clr FLASH_CE ; Enable SPI Flash
0E6A 7403       875       mov a, #READ_BYTES
0E6C 12040D     875       lcall Send_SPI
0E6F            875       ; Set the initial position in memory where to start playing
0E6F            875       
0E6F 7404       875       mov a, #0x04 ; change initial position
0E71 12040D     875       lcall Send_SPI
0E74 7451       875       mov a, #0x51 ; next memory position
0E76 12040D     875       lcall Send_SPI
0E79 7478       875       mov a, #0x78 ; next memory position
0E7B 12040D     875       lcall Send_SPI
0E7E 7404       875       mov a, #0x04 ; request first byte to send to DAC
0E80 12040D     875       lcall Send_SPI
0E83            875       
0E83            875       ; How many bytes to play?
0E83 754E00     875       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0E86 754D23     875       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
0E89 754C28     875       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
0E8C            875       
0E8C            875       
0E8C D2A6       875       setb SPEAKER ;Turn on speaker
0E8E D28E       875       setb TR1 ;Start playback by enabling Timer1
0E90            875       ;clr sound_flag ; sound ends
0E90 020F69     876               ljmp state_6_sound_hop1_S
0E93            877   
0E93            878           play_60_S:
0E93            879               
0E93 B40634     880               cjne a, #6, play_70_S  
0E96            881       ; ***play audio***
0E96            881       ;cjne sound_flag, #0, $
0E96            881       
0E96 1217B2     881       lcall Wait_Half_Second
0E99 C28E       881       clr TR1 ; Stop Timer 1 ISR from playing previous request
0E9B D2A5       881       setb FLASH_CE
0E9D            881       ;setb sound_flag ; sound starts
0E9D C2A6       881       clr SPEAKER ; Turn off speaker
0E9F C2A5       881       clr FLASH_CE ; Enable SPI Flash
0EA1 7403       881       mov a, #READ_BYTES
0EA3 12040D     881       lcall Send_SPI
0EA6            881       ; Set the initial position in memory where to start playing
0EA6            881       
0EA6 7404       881       mov a, #0x04 ; change initial position
0EA8 12040D     881       lcall Send_SPI
0EAB 7474       881       mov a, #0x74 ; next memory position
0EAD 12040D     881       lcall Send_SPI
0EB0 74A0       881       mov a, #0xa0 ; next memory position
0EB2 12040D     881       lcall Send_SPI
0EB5 7404       881       mov a, #0x04 ; request first byte to send to DAC
0EB7 12040D     881       lcall Send_SPI
0EBA            881       
0EBA            881       ; How many bytes to play?
0EBA 754E00     881       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0EBD 754D27     881       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
0EC0 754C10     881       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
0EC3            881       
0EC3            881       
0EC3 D2A6       881       setb SPEAKER ;Turn on speaker
0EC5 D28E       881       setb TR1 ;Start playback by enabling Timer1
0EC7            881       ;clr sound_flag ; sound ends
0EC7 020F69     882               ljmp state_6_sound_hop1_S
0ECA            883   
0ECA            884           play_70_S:
0ECA            885              
0ECA B40734     886               cjne a, #7, play_80_S  
0ECD            887       ; ***play audio***
0ECD            887       ;cjne sound_flag, #0, $
0ECD            887       
0ECD 1217B2     887       lcall Wait_Half_Second
0ED0 C28E       887       clr TR1 ; Stop Timer 1 ISR from playing previous request
0ED2 D2A5       887       setb FLASH_CE
0ED4            887       ;setb sound_flag ; sound starts
0ED4 C2A6       887       clr SPEAKER ; Turn off speaker
0ED6 C2A5       887       clr FLASH_CE ; Enable SPI Flash
0ED8 7403       887       mov a, #READ_BYTES
0EDA 12040D     887       lcall Send_SPI
0EDD            887       ; Set the initial position in memory where to start playing
0EDD            887       
0EDD 7404       887       mov a, #0x04 ; change initial position
0EDF 12040D     887       lcall Send_SPI
0EE2 749B       887       mov a, #0x9b ; next memory position
0EE4 12040D     887       lcall Send_SPI
0EE7 74B0       887       mov a, #0xb0 ; next memory position
0EE9 12040D     887       lcall Send_SPI
0EEC 7404       887       mov a, #0x04 ; request first byte to send to DAC
0EEE 12040D     887       lcall Send_SPI
0EF1            887       
0EF1            887       ; How many bytes to play?
0EF1 754E00     887       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0EF4 754D32     887       mov w+1, #0x32 ; Load the middle byte of the number of bytes to play
0EF7 754CC8     887       mov w+0, #0xc8 ; Load the low byte of the number of bytes to play
0EFA            887       
0EFA            887       
0EFA D2A6       887       setb SPEAKER ;Turn on speaker
0EFC D28E       887       setb TR1 ;Start playback by enabling Timer1
0EFE            887       ;clr sound_flag ; sound ends
0EFE 020F69     888               ljmp state_6_sound_hop1_S
0F01            889   
0F01            890           play_80_S:
0F01            891               
0F01 B40834     892               cjne a, #8, play_90_S  
0F04            893       ; ***play audio***
0F04            893       ;cjne sound_flag, #0, $
0F04            893       
0F04 1217B2     893       lcall Wait_Half_Second
0F07 C28E       893       clr TR1 ; Stop Timer 1 ISR from playing previous request
0F09 D2A5       893       setb FLASH_CE
0F0B            893       ;setb sound_flag ; sound starts
0F0B C2A6       893       clr SPEAKER ; Turn off speaker
0F0D C2A5       893       clr FLASH_CE ; Enable SPI Flash
0F0F 7403       893       mov a, #READ_BYTES
0F11 12040D     893       lcall Send_SPI
0F14            893       ; Set the initial position in memory where to start playing
0F14            893       
0F14 7404       893       mov a, #0x04 ; change initial position
0F16 12040D     893       lcall Send_SPI
0F19 74C6       893       mov a, #0xc6 ; next memory position
0F1B 12040D     893       lcall Send_SPI
0F1E 74A8       893       mov a, #0xa8 ; next memory position
0F20 12040D     893       lcall Send_SPI
0F23 7404       893       mov a, #0x04 ; request first byte to send to DAC
0F25 12040D     893       lcall Send_SPI
0F28            893       
0F28            893       ; How many bytes to play?
0F28 754E00     893       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0F2B 754D23     893       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
0F2E 754C28     893       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
0F31            893       
0F31            893       
0F31 D2A6       893       setb SPEAKER ;Turn on speaker
0F33 D28E       893       setb TR1 ;Start playback by enabling Timer1
0F35            893       ;clr sound_flag ; sound ends
0F35 020F69     894               ljmp state_6_sound_hop1_S
0F38            895   
0F38            896           play_90_S:
0F38            897       ; ***play audio***
0F38            897       ;cjne sound_flag, #0, $
0F38            897       
0F38 1217B2     897       lcall Wait_Half_Second
0F3B C28E       897       clr TR1 ; Stop Timer 1 ISR from playing previous request
0F3D D2A5       897       setb FLASH_CE
0F3F            897       ;setb sound_flag ; sound starts
0F3F C2A6       897       clr SPEAKER ; Turn off speaker
0F41 C2A5       897       clr FLASH_CE ; Enable SPI Flash
0F43 7403       897       mov a, #READ_BYTES
0F45 12040D     897       lcall Send_SPI
0F48            897       ; Set the initial position in memory where to start playing
0F48            897       
0F48 7404       897       mov a, #0x04 ; change initial position
0F4A 12040D     897       lcall Send_SPI
0F4D 74ED       897       mov a, #0xed ; next memory position
0F4F 12040D     897       lcall Send_SPI
0F52 74B8       897       mov a, #0xb8 ; next memory position
0F54 12040D     897       lcall Send_SPI
0F57 7404       897       mov a, #0x04 ; request first byte to send to DAC
0F59 12040D     897       lcall Send_SPI
0F5C            897       
0F5C            897       ; How many bytes to play?
0F5C 754E00     897       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0F5F 754D1F     897       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
0F62 754C40     897       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
0F65            897       
0F65            897       
0F65 D2A6       897       setb SPEAKER ;Turn on speaker
0F67 D28E       897       setb TR1 ;Start playback by enabling Timer1
0F69            897       ;clr sound_flag ; sound ends
0F69            898   
0F69            899   
0F69            900   
0F69            901   
0F69            902       state_6_sound_hop1_S:
0F69 020F6C     903           ljmp state_6_sound_S
0F6C            904           
0F6C            905       ;state_8_hop0:
0F6C            906           ;ljmp state_6_sound ;state_8_sound
0F6C            907   
0F6C            908   
0F6C            909   state_6_sound_S:
0F6C            910   ; play 1 - 9
0F6C            911       ;ljmp PLAYBACK_TEMP
0F6C 75F064     912       mov b, #100
0F6F E53B       913       mov a, Temp_oven
0F71 84         914       div ab
0F72 E5F0       915       mov a, b
0F74 75F00A     916       mov b, #10
0F77 84         917       div ab
0F78 E5F0       918       mov a, b
0F7A            919       
0F7A B40003     920       cjne a, #0x00, play_1_S
0F7D 021169     921       ljmp state_8_hop1_S
0F80            922   
0F80            923       play_1_S:
0F80 B40134     924           cjne a, #0x01, play_2_S
0F83            925       ; ***play audio***
0F83            925       ;cjne sound_flag, #0, $
0F83            925       
0F83 1217B2     925       lcall Wait_Half_Second
0F86 C28E       925       clr TR1 ; Stop Timer 1 ISR from playing previous request
0F88 D2A5       925       setb FLASH_CE
0F8A            925       ;setb sound_flag ; sound starts
0F8A C2A6       925       clr SPEAKER ; Turn off speaker
0F8C C2A5       925       clr FLASH_CE ; Enable SPI Flash
0F8E 7403       925       mov a, #READ_BYTES
0F90 12040D     925       lcall Send_SPI
0F93            925       ; Set the initial position in memory where to start playing
0F93            925       
0F93 7401       925       mov a, #0x01 ; change initial position
0F95 12040D     925       lcall Send_SPI
0F98 7493       925       mov a, #0x93 ; next memory position
0F9A 12040D     925       lcall Send_SPI
0F9D 7484       925       mov a, #0x84 ; next memory position
0F9F 12040D     925       lcall Send_SPI
0FA2 7401       925       mov a, #0x01 ; request first byte to send to DAC
0FA4 12040D     925       lcall Send_SPI
0FA7            925       
0FA7            925       ; How many bytes to play?
0FA7 754E00     925       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0FAA 754D36     925       mov w+1, #0x36 ; Load the middle byte of the number of bytes to play
0FAD 754CB0     925       mov w+0, #0xb0 ; Load the low byte of the number of bytes to play
0FB0            925       
0FB0            925       
0FB0 D2A6       925       setb SPEAKER ;Turn on speaker
0FB2 D28E       925       setb TR1 ;Start playback by enabling Timer1
0FB4            925       ;clr sound_flag ; sound ends 
0FB4 021169     926           ljmp state_8_hop1_S
0FB7            927   
0FB7            928       play_2_S:
0FB7 B40234     929           cjne a, #0x02, play_3_S
0FBA            930       ; ***play audio***
0FBA            930       ;cjne sound_flag, #0, $
0FBA            930       
0FBA 1217B2     930       lcall Wait_Half_Second
0FBD C28E       930       clr TR1 ; Stop Timer 1 ISR from playing previous request
0FBF D2A5       930       setb FLASH_CE
0FC1            930       ;setb sound_flag ; sound starts
0FC1 C2A6       930       clr SPEAKER ; Turn off speaker
0FC3 C2A5       930       clr FLASH_CE ; Enable SPI Flash
0FC5 7403       930       mov a, #READ_BYTES
0FC7 12040D     930       lcall Send_SPI
0FCA            930       ; Set the initial position in memory where to start playing
0FCA            930       
0FCA 7401       930       mov a, #0x01 ; change initial position
0FCC 12040D     930       lcall Send_SPI
0FCF 74C7       930       mov a, #0xc7 ; next memory position
0FD1 12040D     930       lcall Send_SPI
0FD4 7414       930       mov a, #0x14 ; next memory position
0FD6 12040D     930       lcall Send_SPI
0FD9 7401       930       mov a, #0x01 ; request first byte to send to DAC
0FDB 12040D     930       lcall Send_SPI
0FDE            930       
0FDE            930       ; How many bytes to play?
0FDE 754E00     930       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
0FE1 754D13     930       mov w+1, #0x13 ; Load the middle byte of the number of bytes to play
0FE4 754C88     930       mov w+0, #0x88 ; Load the low byte of the number of bytes to play
0FE7            930       
0FE7            930       
0FE7 D2A6       930       setb SPEAKER ;Turn on speaker
0FE9 D28E       930       setb TR1 ;Start playback by enabling Timer1
0FEB            930       ;clr sound_flag ; sound ends
0FEB 021169     931           ljmp state_8_hop1_S
0FEE            932   
0FEE            933       play_3_S:
0FEE B40334     934           cjne a, #0x03, play_4_S
0FF1            935       ; ***play audio***
0FF1            935       ;cjne sound_flag, #0, $
0FF1            935       
0FF1 1217B2     935       lcall Wait_Half_Second
0FF4 C28E       935       clr TR1 ; Stop Timer 1 ISR from playing previous request
0FF6 D2A5       935       setb FLASH_CE
0FF8            935       ;setb sound_flag ; sound starts
0FF8 C2A6       935       clr SPEAKER ; Turn off speaker
0FFA C2A5       935       clr FLASH_CE ; Enable SPI Flash
0FFC 7403       935       mov a, #READ_BYTES
0FFE 12040D     935       lcall Send_SPI
1001            935       ; Set the initial position in memory where to start playing
1001            935       
1001 7401       935       mov a, #0x01 ; change initial position
1003 12040D     935       lcall Send_SPI
1006 74D6       935       mov a, #0xd6 ; next memory position
1008 12040D     935       lcall Send_SPI
100B 7468       935       mov a, #0x68 ; next memory position
100D 12040D     935       lcall Send_SPI
1010 7401       935       mov a, #0x01 ; request first byte to send to DAC
1012 12040D     935       lcall Send_SPI
1015            935       
1015            935       ; How many bytes to play?
1015 754E00     935       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1018 754D23     935       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
101B 754C28     935       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
101E            935       
101E            935       
101E D2A6       935       setb SPEAKER ;Turn on speaker
1020 D28E       935       setb TR1 ;Start playback by enabling Timer1
1022            935       ;clr sound_flag ; sound ends
1022 021169     936           ljmp state_8_hop1_S
1025            937   
1025            938       play_4_S:
1025 B40434     939           cjne a, #0x04, play_5_S
1028            940       ; ***play audio***
1028            940       ;cjne sound_flag, #0, $
1028            940       
1028 1217B2     940       lcall Wait_Half_Second
102B C28E       940       clr TR1 ; Stop Timer 1 ISR from playing previous request
102D D2A5       940       setb FLASH_CE
102F            940       ;setb sound_flag ; sound starts
102F C2A6       940       clr SPEAKER ; Turn off speaker
1031 C2A5       940       clr FLASH_CE ; Enable SPI Flash
1033 7403       940       mov a, #READ_BYTES
1035 12040D     940       lcall Send_SPI
1038            940       ; Set the initial position in memory where to start playing
1038            940       
1038 7401       940       mov a, #0x01 ; change initial position
103A 12040D     940       lcall Send_SPI
103D 74F4       940       mov a, #0xf4 ; next memory position
103F 12040D     940       lcall Send_SPI
1042 7400       940       mov a, #0x00 ; next memory position
1044 12040D     940       lcall Send_SPI
1047 7401       940       mov a, #0x01 ; request first byte to send to DAC
1049 12040D     940       lcall Send_SPI
104C            940       
104C            940       ; How many bytes to play?
104C 754E00     940       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
104F 754D1B     940       mov w+1, #0x1b ; Load the middle byte of the number of bytes to play
1052 754C58     940       mov w+0, #0x58 ; Load the low byte of the number of bytes to play
1055            940       
1055            940       
1055 D2A6       940       setb SPEAKER ;Turn on speaker
1057 D28E       940       setb TR1 ;Start playback by enabling Timer1
1059            940       ;clr sound_flag ; sound ends
1059 021169     941           ljmp state_8_hop1_S
105C            942   
105C            943       play_5_S:
105C B40534     944           cjne a, #0x05, play_6_S
105F            945       ; ***play audio***
105F            945       ;cjne sound_flag, #0, $
105F            945       
105F 1217B2     945       lcall Wait_Half_Second
1062 C28E       945       clr TR1 ; Stop Timer 1 ISR from playing previous request
1064 D2A5       945       setb FLASH_CE
1066            945       ;setb sound_flag ; sound starts
1066 C2A6       945       clr SPEAKER ; Turn off speaker
1068 C2A5       945       clr FLASH_CE ; Enable SPI Flash
106A 7403       945       mov a, #READ_BYTES
106C 12040D     945       lcall Send_SPI
106F            945       ; Set the initial position in memory where to start playing
106F            945       
106F 7402       945       mov a, #0x02 ; change initial position
1071 12040D     945       lcall Send_SPI
1074 7407       945       mov a, #0x07 ; next memory position
1076 12040D     945       lcall Send_SPI
1079 7488       945       mov a, #0x88 ; next memory position
107B 12040D     945       lcall Send_SPI
107E 7402       945       mov a, #0x02 ; request first byte to send to DAC
1080 12040D     945       lcall Send_SPI
1083            945       
1083            945       ; How many bytes to play?
1083 754E00     945       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1086 754D1B     945       mov w+1, #0x1b ; Load the middle byte of the number of bytes to play
1089 754C58     945       mov w+0, #0x58 ; Load the low byte of the number of bytes to play
108C            945       
108C            945       
108C D2A6       945       setb SPEAKER ;Turn on speaker
108E D28E       945       setb TR1 ;Start playback by enabling Timer1
1090            945       ;clr sound_flag ; sound ends
1090 021169     946           ljmp state_8_hop1_S
1093            947   
1093            948       play_6_S:
1093 B40634     949           cjne a, #0x06, play_7_S
1096            950       ; ***play audio***
1096            950       ;cjne sound_flag, #0, $
1096            950       
1096 1217B2     950       lcall Wait_Half_Second
1099 C28E       950       clr TR1 ; Stop Timer 1 ISR from playing previous request
109B D2A5       950       setb FLASH_CE
109D            950       ;setb sound_flag ; sound starts
109D C2A6       950       clr SPEAKER ; Turn off speaker
109F C2A5       950       clr FLASH_CE ; Enable SPI Flash
10A1 7403       950       mov a, #READ_BYTES
10A3 12040D     950       lcall Send_SPI
10A6            950       ; Set the initial position in memory where to start playing
10A6            950       
10A6 7402       950       mov a, #0x02 ; change initial position
10A8 12040D     950       lcall Send_SPI
10AB 7426       950       mov a, #0x26 ; next memory position
10AD 12040D     950       lcall Send_SPI
10B0 74C8       950       mov a, #0xc8 ; next memory position
10B2 12040D     950       lcall Send_SPI
10B5 7402       950       mov a, #0x02 ; request first byte to send to DAC
10B7 12040D     950       lcall Send_SPI
10BA            950       
10BA            950       ; How many bytes to play?
10BA 754E00     950       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
10BD 754D1F     950       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
10C0 754C40     950       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
10C3            950       
10C3            950       
10C3 D2A6       950       setb SPEAKER ;Turn on speaker
10C5 D28E       950       setb TR1 ;Start playback by enabling Timer1
10C7            950       ;clr sound_flag ; sound ends
10C7 021169     951           ljmp state_8_hop1_S
10CA            952   
10CA            953       play_7_S:
10CA B40734     954           cjne a, #0x07, play_8_S
10CD            955       ; ***play audio***
10CD            955       ;cjne sound_flag, #0, $
10CD            955       
10CD 1217B2     955       lcall Wait_Half_Second
10D0 C28E       955       clr TR1 ; Stop Timer 1 ISR from playing previous request
10D2 D2A5       955       setb FLASH_CE
10D4            955       ;setb sound_flag ; sound starts
10D4 C2A6       955       clr SPEAKER ; Turn off speaker
10D6 C2A5       955       clr FLASH_CE ; Enable SPI Flash
10D8 7403       955       mov a, #READ_BYTES
10DA 12040D     955       lcall Send_SPI
10DD            955       ; Set the initial position in memory where to start playing
10DD            955       
10DD 7402       955       mov a, #0x02 ; change initial position
10DF 12040D     955       lcall Send_SPI
10E2 7436       955       mov a, #0x36 ; next memory position
10E4 12040D     955       lcall Send_SPI
10E7 7468       955       mov a, #0x68 ; next memory position
10E9 12040D     955       lcall Send_SPI
10EC 7402       955       mov a, #0x02 ; request first byte to send to DAC
10EE 12040D     955       lcall Send_SPI
10F1            955       
10F1            955       ; How many bytes to play?
10F1 754E00     955       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
10F4 754D23     955       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
10F7 754C28     955       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
10FA            955       
10FA            955       
10FA D2A6       955       setb SPEAKER ;Turn on speaker
10FC D28E       955       setb TR1 ;Start playback by enabling Timer1
10FE            955       ;clr sound_flag ; sound ends
10FE 021169     956           ljmp state_8_hop1_S
1101            957   
1101            958       play_8_S:
1101 B40834     959           cjne a, #0x08, play_9_S
1104            960       ; ***play audio***
1104            960       ;cjne sound_flag, #0, $
1104            960       
1104 1217B2     960       lcall Wait_Half_Second
1107 C28E       960       clr TR1 ; Stop Timer 1 ISR from playing previous request
1109 D2A5       960       setb FLASH_CE
110B            960       ;setb sound_flag ; sound starts
110B C2A6       960       clr SPEAKER ; Turn off speaker
110D C2A5       960       clr FLASH_CE ; Enable SPI Flash
110F 7403       960       mov a, #READ_BYTES
1111 12040D     960       lcall Send_SPI
1114            960       ; Set the initial position in memory where to start playing
1114            960       
1114 7402       960       mov a, #0x02 ; change initial position
1116 12040D     960       lcall Send_SPI
1119 7457       960       mov a, #0x57 ; next memory position
111B 12040D     960       lcall Send_SPI
111E 749C       960       mov a, #0x9c ; next memory position
1120 12040D     960       lcall Send_SPI
1123 7402       960       mov a, #0x02 ; request first byte to send to DAC
1125 12040D     960       lcall Send_SPI
1128            960       
1128            960       ; How many bytes to play?
1128 754E00     960       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
112B 754D1B     960       mov w+1, #0x1b ; Load the middle byte of the number of bytes to play
112E 754C58     960       mov w+0, #0x58 ; Load the low byte of the number of bytes to play
1131            960       
1131            960       
1131 D2A6       960       setb SPEAKER ;Turn on speaker
1133 D28E       960       setb TR1 ;Start playback by enabling Timer1
1135            960       ;clr sound_flag ; sound ends
1135 021169     961           ljmp state_8_hop1_S
1138            962   
1138            963       play_9_S:
1138            964       ; ***play audio***
1138            964       ;cjne sound_flag, #0, $
1138            964       
1138 1217B2     964       lcall Wait_Half_Second
113B C28E       964       clr TR1 ; Stop Timer 1 ISR from playing previous request
113D D2A5       964       setb FLASH_CE
113F            964       ;setb sound_flag ; sound starts
113F C2A6       964       clr SPEAKER ; Turn off speaker
1141 C2A5       964       clr FLASH_CE ; Enable SPI Flash
1143 7403       964       mov a, #READ_BYTES
1145 12040D     964       lcall Send_SPI
1148            964       ; Set the initial position in memory where to start playing
1148            964       
1148 7402       964       mov a, #0x02 ; change initial position
114A 12040D     964       lcall Send_SPI
114D 7469       964       mov a, #0x69 ; next memory position
114F 12040D     964       lcall Send_SPI
1152 7430       964       mov a, #0x30 ; next memory position
1154 12040D     964       lcall Send_SPI
1157 7402       964       mov a, #0x02 ; request first byte to send to DAC
1159 12040D     964       lcall Send_SPI
115C            964       
115C            964       ; How many bytes to play?
115C 754E00     964       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
115F 754D1F     964       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
1162 754C40     964       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
1165            964       
1165            964       
1165 D2A6       964       setb SPEAKER ;Turn on speaker
1167 D28E       964       setb TR1 ;Start playback by enabling Timer1
1169            964       ;clr sound_flag ; sound ends
1169            965   
1169            966   state_8_hop1_S:
1169            967   ; go to state_8_sound
1169 021397     968       ljmp state_8_sound_S
116C            969   
116C            970   
116C            971   state_7_sound_S:
116C            972   ; play 10 - 19
116C            973       ;ljmp PLAYBACK_TEMP
116C 75F064     974       mov b, #100
116F E53B       975       mov a, Temp_oven
1171 84         976       div ab
1172 E5F0       977       mov a, b
1174 B40A34     978       cjne a, #0x0a, play_11_S
1177            979       
1177            980       ; ***play audio***
1177            980       ;cjne sound_flag, #0, $
1177            980       
1177 1217B2     980       lcall Wait_Half_Second
117A C28E       980       clr TR1 ; Stop Timer 1 ISR from playing previous request
117C D2A5       980       setb FLASH_CE
117E            980       ;setb sound_flag ; sound starts
117E C2A6       980       clr SPEAKER ; Turn off speaker
1180 C2A5       980       clr FLASH_CE ; Enable SPI Flash
1182 7403       980       mov a, #READ_BYTES
1184 12040D     980       lcall Send_SPI
1187            980       ; Set the initial position in memory where to start playing
1187            980       
1187 7402       980       mov a, #0x02 ; change initial position
1189 12040D     980       lcall Send_SPI
118C 7484       980       mov a, #0x84 ; next memory position
118E 12040D     980       lcall Send_SPI
1191 7488       980       mov a, #0x88 ; next memory position
1193 12040D     980       lcall Send_SPI
1196 7402       980       mov a, #0x02 ; request first byte to send to DAC
1198 12040D     980       lcall Send_SPI
119B            980       
119B            980       ; How many bytes to play?
119B 754E00     980       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
119E 754D17     980       mov w+1, #0x17 ; Load the middle byte of the number of bytes to play
11A1 754C70     980       mov w+0, #0x70 ; Load the low byte of the number of bytes to play
11A4            980       
11A4            980       
11A4 D2A6       980       setb SPEAKER ;Turn on speaker
11A6 D28E       980       setb TR1 ;Start playback by enabling Timer1
11A8            980       ;clr sound_flag ; sound ends
11A8 021394     981       ljmp state_8_hop2_S
11AB            982   
11AB            983       play_11_S:
11AB B40B34     984           cjne a, #0x0b, play_12_S
11AE            985       ; ***play audio***
11AE            985       ;cjne sound_flag, #0, $
11AE            985       
11AE 1217B2     985       lcall Wait_Half_Second
11B1 C28E       985       clr TR1 ; Stop Timer 1 ISR from playing previous request
11B3 D2A5       985       setb FLASH_CE
11B5            985       ;setb sound_flag ; sound starts
11B5 C2A6       985       clr SPEAKER ; Turn off speaker
11B7 C2A5       985       clr FLASH_CE ; Enable SPI Flash
11B9 7403       985       mov a, #READ_BYTES
11BB 12040D     985       lcall Send_SPI
11BE            985       ; Set the initial position in memory where to start playing
11BE            985       
11BE 7402       985       mov a, #0x02 ; change initial position
11C0 12040D     985       lcall Send_SPI
11C3 749B       985       mov a, #0x9b ; next memory position
11C5 12040D     985       lcall Send_SPI
11C8 74F8       985       mov a, #0xf8 ; next memory position
11CA 12040D     985       lcall Send_SPI
11CD 7402       985       mov a, #0x02 ; request first byte to send to DAC
11CF 12040D     985       lcall Send_SPI
11D2            985       
11D2            985       ; How many bytes to play?
11D2 754E00     985       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
11D5 754D1F     985       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
11D8 754C40     985       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
11DB            985       
11DB            985       
11DB D2A6       985       setb SPEAKER ;Turn on speaker
11DD D28E       985       setb TR1 ;Start playback by enabling Timer1
11DF            985       ;clr sound_flag ; sound ends
11DF 021394     986           ljmp state_8_hop2_S
11E2            987   
11E2            988       play_12_S:
11E2 B40C34     989           cjne a, #0x0c, play_13_S
11E5            990       ; ***play audio***
11E5            990       ;cjne sound_flag, #0, $
11E5            990       
11E5 1217B2     990       lcall Wait_Half_Second
11E8 C28E       990       clr TR1 ; Stop Timer 1 ISR from playing previous request
11EA D2A5       990       setb FLASH_CE
11EC            990       ;setb sound_flag ; sound starts
11EC C2A6       990       clr SPEAKER ; Turn off speaker
11EE C2A5       990       clr FLASH_CE ; Enable SPI Flash
11F0 7403       990       mov a, #READ_BYTES
11F2 12040D     990       lcall Send_SPI
11F5            990       ; Set the initial position in memory where to start playing
11F5            990       
11F5 7402       990       mov a, #0x02 ; change initial position
11F7 12040D     990       lcall Send_SPI
11FA 74B7       990       mov a, #0xb7 ; next memory position
11FC 12040D     990       lcall Send_SPI
11FF 7450       990       mov a, #0x50 ; next memory position
1201 12040D     990       lcall Send_SPI
1204 7402       990       mov a, #0x02 ; request first byte to send to DAC
1206 12040D     990       lcall Send_SPI
1209            990       
1209            990       ; How many bytes to play?
1209 754E00     990       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
120C 754D1F     990       mov w+1, #0x1f ; Load the middle byte of the number of bytes to play
120F 754C40     990       mov w+0, #0x40 ; Load the low byte of the number of bytes to play
1212            990       
1212            990       
1212 D2A6       990       setb SPEAKER ;Turn on speaker
1214 D28E       990       setb TR1 ;Start playback by enabling Timer1
1216            990       ;clr sound_flag ; sound ends
1216 021394     991           ljmp state_8_hop2_S
1219            992   
1219            993       play_13_S:
1219 B40D34     994           cjne a, #0x0d, play_14_S
121C            995       ; ***play audio***
121C            995       ;cjne sound_flag, #0, $
121C            995       
121C 1217B2     995       lcall Wait_Half_Second
121F C28E       995       clr TR1 ; Stop Timer 1 ISR from playing previous request
1221 D2A5       995       setb FLASH_CE
1223            995       ;setb sound_flag ; sound starts
1223 C2A6       995       clr SPEAKER ; Turn off speaker
1225 C2A5       995       clr FLASH_CE ; Enable SPI Flash
1227 7403       995       mov a, #READ_BYTES
1229 12040D     995       lcall Send_SPI
122C            995       ; Set the initial position in memory where to start playing
122C            995       
122C 7402       995       mov a, #0x02 ; change initial position
122E 12040D     995       lcall Send_SPI
1231 74CE       995       mov a, #0xce ; next memory position
1233 12040D     995       lcall Send_SPI
1236 74C0       995       mov a, #0xc0 ; next memory position
1238 12040D     995       lcall Send_SPI
123B 7402       995       mov a, #0x02 ; request first byte to send to DAC
123D 12040D     995       lcall Send_SPI
1240            995       
1240            995       ; How many bytes to play?
1240 754E00     995       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1243 754D2E     995       mov w+1, #0x2e ; Load the middle byte of the number of bytes to play
1246 754CE0     995       mov w+0, #0xe0 ; Load the low byte of the number of bytes to play
1249            995       
1249            995       
1249 D2A6       995       setb SPEAKER ;Turn on speaker
124B D28E       995       setb TR1 ;Start playback by enabling Timer1
124D            995       ;clr sound_flag ; sound ends
124D 021394     996           ljmp state_8_hop2_S
1250            997   
1250            998       play_14_S:
1250 B40E34     999           cjne a, #0x0e, play_15_S
1253           1000       ; ***play audio***
1253           1000       ;cjne sound_flag, #0, $
1253           1000       
1253 1217B2    1000       lcall Wait_Half_Second
1256 C28E      1000       clr TR1 ; Stop Timer 1 ISR from playing previous request
1258 D2A5      1000       setb FLASH_CE
125A           1000       ;setb sound_flag ; sound starts
125A C2A6      1000       clr SPEAKER ; Turn off speaker
125C C2A5      1000       clr FLASH_CE ; Enable SPI Flash
125E 7403      1000       mov a, #READ_BYTES
1260 12040D    1000       lcall Send_SPI
1263           1000       ; Set the initial position in memory where to start playing
1263           1000       
1263 7402      1000       mov a, #0x02 ; change initial position
1265 12040D    1000       lcall Send_SPI
1268 74F5      1000       mov a, #0xf5 ; next memory position
126A 12040D    1000       lcall Send_SPI
126D 74D0      1000       mov a, #0xd0 ; next memory position
126F 12040D    1000       lcall Send_SPI
1272 7402      1000       mov a, #0x02 ; request first byte to send to DAC
1274 12040D    1000       lcall Send_SPI
1277           1000       
1277           1000       ; How many bytes to play?
1277 754E00    1000       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
127A 754D36    1000       mov w+1, #0x36 ; Load the middle byte of the number of bytes to play
127D 754CB0    1000       mov w+0, #0xb0 ; Load the low byte of the number of bytes to play
1280           1000       
1280           1000       
1280 D2A6      1000       setb SPEAKER ;Turn on speaker
1282 D28E      1000       setb TR1 ;Start playback by enabling Timer1
1284           1000       ;clr sound_flag ; sound ends
1284 021394    1001           ljmp state_8_hop2_S
1287           1002   
1287           1003       play_15_S:
1287 B40F34    1004           cjne a, #0x0f, play_16_S
128A           1005       ; ***play audio***
128A           1005       ;cjne sound_flag, #0, $
128A           1005       
128A 1217B2    1005       lcall Wait_Half_Second
128D C28E      1005       clr TR1 ; Stop Timer 1 ISR from playing previous request
128F D2A5      1005       setb FLASH_CE
1291           1005       ;setb sound_flag ; sound starts
1291 C2A6      1005       clr SPEAKER ; Turn off speaker
1293 C2A5      1005       clr FLASH_CE ; Enable SPI Flash
1295 7403      1005       mov a, #READ_BYTES
1297 12040D    1005       lcall Send_SPI
129A           1005       ; Set the initial position in memory where to start playing
129A           1005       
129A 7403      1005       mov a, #0x03 ; change initial position
129C 12040D    1005       lcall Send_SPI
129F 7428      1005       mov a, #0x28 ; next memory position
12A1 12040D    1005       lcall Send_SPI
12A4 7498      1005       mov a, #0x98 ; next memory position
12A6 12040D    1005       lcall Send_SPI
12A9 7403      1005       mov a, #0x03 ; request first byte to send to DAC
12AB 12040D    1005       lcall Send_SPI
12AE           1005       
12AE           1005       ; How many bytes to play?
12AE 754E00    1005       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
12B1 754D23    1005       mov w+1, #0x23 ; Load the middle byte of the number of bytes to play
12B4 754C28    1005       mov w+0, #0x28 ; Load the low byte of the number of bytes to play
12B7           1005       
12B7           1005       
12B7 D2A6      1005       setb SPEAKER ;Turn on speaker
12B9 D28E      1005       setb TR1 ;Start playback by enabling Timer1
12BB           1005       ;clr sound_flag ; sound ends
12BB 021394    1006           ljmp state_8_hop2_S
12BE           1007   
12BE           1008       play_16_S:
12BE B41034    1009           cjne a, #0x10, play_17_S
12C1           1010       ; ***play audio***
12C1           1010       ;cjne sound_flag, #0, $
12C1           1010       
12C1 1217B2    1010       lcall Wait_Half_Second
12C4 C28E      1010       clr TR1 ; Stop Timer 1 ISR from playing previous request
12C6 D2A5      1010       setb FLASH_CE
12C8           1010       ;setb sound_flag ; sound starts
12C8 C2A6      1010       clr SPEAKER ; Turn off speaker
12CA C2A5      1010       clr FLASH_CE ; Enable SPI Flash
12CC 7403      1010       mov a, #READ_BYTES
12CE 12040D    1010       lcall Send_SPI
12D1           1010       ; Set the initial position in memory where to start playing
12D1           1010       
12D1 7403      1010       mov a, #0x03 ; change initial position
12D3 12040D    1010       lcall Send_SPI
12D6 7447      1010       mov a, #0x47 ; next memory position
12D8 12040D    1010       lcall Send_SPI
12DB 74D8      1010       mov a, #0xd8 ; next memory position
12DD 12040D    1010       lcall Send_SPI
12E0 7403      1010       mov a, #0x03 ; request first byte to send to DAC
12E2 12040D    1010       lcall Send_SPI
12E5           1010       
12E5           1010       ; How many bytes to play?
12E5 754E00    1010       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
12E8 754D32    1010       mov w+1, #0x32 ; Load the middle byte of the number of bytes to play
12EB 754CC8    1010       mov w+0, #0xc8 ; Load the low byte of the number of bytes to play
12EE           1010       
12EE           1010       
12EE D2A6      1010       setb SPEAKER ;Turn on speaker
12F0 D28E      1010       setb TR1 ;Start playback by enabling Timer1
12F2           1010       ;clr sound_flag ; sound ends
12F2 021394    1011           ljmp state_8_hop2_S
12F5           1012   
12F5           1013       play_17_S:
12F5 B41134    1014           cjne a, #0x11, play_18_S
12F8           1015       ; ***play audio***
12F8           1015       ;cjne sound_flag, #0, $
12F8           1015       
12F8 1217B2    1015       lcall Wait_Half_Second
12FB C28E      1015       clr TR1 ; Stop Timer 1 ISR from playing previous request
12FD D2A5      1015       setb FLASH_CE
12FF           1015       ;setb sound_flag ; sound starts
12FF C2A6      1015       clr SPEAKER ; Turn off speaker
1301 C2A5      1015       clr FLASH_CE ; Enable SPI Flash
1303 7403      1015       mov a, #READ_BYTES
1305 12040D    1015       lcall Send_SPI
1308           1015       ; Set the initial position in memory where to start playing
1308           1015       
1308 7403      1015       mov a, #0x03 ; change initial position
130A 12040D    1015       lcall Send_SPI
130D 7476      1015       mov a, #0x76 ; next memory position
130F 12040D    1015       lcall Send_SPI
1312 74B8      1015       mov a, #0xb8 ; next memory position
1314 12040D    1015       lcall Send_SPI
1317 7403      1015       mov a, #0x03 ; request first byte to send to DAC
1319 12040D    1015       lcall Send_SPI
131C           1015       
131C           1015       ; How many bytes to play?
131C 754E00    1015       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
131F 754D2E    1015       mov w+1, #0x2e ; Load the middle byte of the number of bytes to play
1322 754C20    1015       mov w+0, #0x20 ; Load the low byte of the number of bytes to play
1325           1015       
1325           1015       
1325 D2A6      1015       setb SPEAKER ;Turn on speaker
1327 D28E      1015       setb TR1 ;Start playback by enabling Timer1
1329           1015       ;clr sound_flag ; sound ends
1329 021394    1016           ljmp state_8_hop2_S
132C           1017   
132C           1018       play_18_S:
132C B41234    1019           cjne a, #0x12, play_19_S
132F           1020       ; ***play audio***
132F           1020       ;cjne sound_flag, #0, $
132F           1020       
132F 1217B2    1020       lcall Wait_Half_Second
1332 C28E      1020       clr TR1 ; Stop Timer 1 ISR from playing previous request
1334 D2A5      1020       setb FLASH_CE
1336           1020       ;setb sound_flag ; sound starts
1336 C2A6      1020       clr SPEAKER ; Turn off speaker
1338 C2A5      1020       clr FLASH_CE ; Enable SPI Flash
133A 7403      1020       mov a, #READ_BYTES
133C 12040D    1020       lcall Send_SPI
133F           1020       ; Set the initial position in memory where to start playing
133F           1020       
133F 7403      1020       mov a, #0x03 ; change initial position
1341 12040D    1020       lcall Send_SPI
1344 74A1      1020       mov a, #0xa1 ; next memory position
1346 12040D    1020       lcall Send_SPI
1349 74B0      1020       mov a, #0xb0 ; next memory position
134B 12040D    1020       lcall Send_SPI
134E 7403      1020       mov a, #0x03 ; request first byte to send to DAC
1350 12040D    1020       lcall Send_SPI
1353           1020       
1353           1020       ; How many bytes to play?
1353 754E00    1020       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1356 754D27    1020       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
1359 754C10    1020       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
135C           1020       
135C           1020       
135C D2A6      1020       setb SPEAKER ;Turn on speaker
135E D28E      1020       setb TR1 ;Start playback by enabling Timer1
1360           1020       ;clr sound_flag ; sound ends
1360 021394    1021           ljmp state_8_hop2_S
1363           1022   
1363           1023       play_19_S:
1363           1024       ; ***play audio***
1363           1024       ;cjne sound_flag, #0, $
1363           1024       
1363 1217B2    1024       lcall Wait_Half_Second
1366 C28E      1024       clr TR1 ; Stop Timer 1 ISR from playing previous request
1368 D2A5      1024       setb FLASH_CE
136A           1024       ;setb sound_flag ; sound starts
136A C2A6      1024       clr SPEAKER ; Turn off speaker
136C C2A5      1024       clr FLASH_CE ; Enable SPI Flash
136E 7403      1024       mov a, #READ_BYTES
1370 12040D    1024       lcall Send_SPI
1373           1024       ; Set the initial position in memory where to start playing
1373           1024       
1373 7403      1024       mov a, #0x03 ; change initial position
1375 12040D    1024       lcall Send_SPI
1378 74C8      1024       mov a, #0xc8 ; next memory position
137A 12040D    1024       lcall Send_SPI
137D 74C0      1024       mov a, #0xc0 ; next memory position
137F 12040D    1024       lcall Send_SPI
1382 7403      1024       mov a, #0x03 ; request first byte to send to DAC
1384 12040D    1024       lcall Send_SPI
1387           1024       
1387           1024       ; How many bytes to play?
1387 754E00    1024       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
138A 754D27    1024       mov w+1, #0x27 ; Load the middle byte of the number of bytes to play
138D 754C10    1024       mov w+0, #0x10 ; Load the low byte of the number of bytes to play
1390           1024       
1390           1024       
1390 D2A6      1024       setb SPEAKER ;Turn on speaker
1392 D28E      1024       setb TR1 ;Start playback by enabling Timer1
1394           1024       ;clr sound_flag ; sound ends
1394           1025   
1394           1026       state_8_hop2_S:
1394           1027       ; go to state_8_sound
1394 021397    1028           ljmp state_8_sound_S
1397           1029   
1397           1030   state_8_sound_S:
1397           1031   ; go to state_0_sound
1397 020C71    1032       ljmp Sound_ret_S
139A           1033   
139A           1034   
139A           1035   
139A           1036   
139A           1037   INI_PLAYBACK_TEMP:
139A           1038       ; ****INITIALIZATION****
139A           1039       ; Configure SPI pins and turn off speaker
139A           1040            ;anl P2M0, #0b_1100_1110
139A 43CE90    1041       orl P2M0, #0b_1001_0000
139D           1042       ;orl P2M0, #0b_0011_0001
139D           1043            ;orl P2M1, #0b_0011_0001
139D 43CF90    1044       orl P2M1, #0b_1001_0000
13A0 D2A1      1045            setb MY_MISO_SOUND  ; Configured as input
13A2 D2A5      1046            setb FLASH_CE ; CS=1 for SPI flash memory
13A4 C2A0      1047            clr MY_SCLK_SOUND   ; Rest state of SCLK=0
13A6 C2A6      1048            clr SPEAKER   ; Turn off speaker.
13A8           1049            
13A8           1050            ; Configure timer 1
13A8 53890F    1051            anl     TMOD, #0x0F ; Clear the bits of timer 1 in TMOD
13AB 438910    1052            orl     TMOD, #0x10 ; Set timer 1 in 16-bit timer mode.  Don't change the bits of timer 0
13AE 758DFC    1053            mov TH1, #high(TIMER1_RELOAD)
13B1 758B8C    1054            mov TL1, #low(TIMER1_RELOAD)
13B4           1055            ; Set autoreload value
13B4 75F5FC    1056            mov RH1, #high(TIMER1_RELOAD)
13B7 75F38C    1057            mov RL1, #low(TIMER1_RELOAD)
13BA           1058   
13BA           1059            ;Enable the timer and interrupts
13BA D2AB      1060       setb ET1  ; Enable timer 1 interrupt
13BC D28E      1061            setb TR1 ; Timer 1 is only enabled to play stored sound
13BE           1062   
13BE           1063            ; Configure the DAC.  The DAC output we are using is P2.3, but P2.2 is also reserved.
13BE 75A5A0    1064            mov DADI, #0b_1010_0000 ; ACON=1
13C1 75A43A    1065            mov DADC, #0b_0011_1010 ; Enabled, DAC mode, Left adjusted, CLK/4
13C4 75AD80    1066            mov DADH, #0x80 ; Middle of scale
13C7 75AC00    1067            mov DADL, #0
13CA 43A440    1068            orl DADC, #0b_0100_0000 ; Start DAC by GO/BSY=1
13CD           1069       check_DAC_init:
13CD E5A4      1070            mov a, DADC
13CF 20E6FB    1071            jb acc.6, check_DAC_init ; Wait for DAC to finish
13D2           1072            
13D2 22        1073   ret
13D3           1074   
13D3           1075       
13D3           1076   ;-------------------------------------------------------------------------------------------------------------------------------
13D3           1077   ;***LCD FXNS
13D3           1078   
               1079   Display_lower_BCD mac
               1080       push ar0
               1081       mov r0, %0
               1082       lcall ?Display_lower_BCD
               1083       pop ar0
               1084   endmac
13D3           1085   
13D3           1086   ?Display_lower_BCD:
13D3 C0E0      1087       push acc
13D5           1088       ; write least significant digit
13D5 E8        1089       mov a, r0
13D6 540F      1090       anl a, #0fh
13D8 4430      1091       orl a, #30h
13DA 12007E    1092       lcall ?WriteData
13DD D0E0      1093       pop acc
13DF 22        1094   ret
13E0           1095   
13E0           1096   
13E0           1097   SendToLCD:
13E0 75F064    1098       mov b, #100
13E3 84        1099       div ab
13E4 4430      1100       orl a, #0x30h ; Convert hundreds to ASCII
13E6 12007E    1101       lcall ?WriteData ; Send to LCD
13E9 E5F0      1102       mov a, b    ; Remainder is in register b
13EB 75F00A    1103       mov b, #10
13EE 84        1104       div ab
13EF 4430      1105       orl a, #0x30h ; Convert tens to ASCII
13F1 12007E    1106       lcall ?WriteData; Send to LCD
13F4 E5F0      1107       mov a, b
13F6 4430      1108       orl a, #0x30h ; Convert units to ASCII
13F8 12007E    1109       lcall ?WriteData; Send to LCD
13FB 22        1110   ret
13FC           1111   
13FC           1112   Initialize_State_Display:
13FC           1113   
13FC           1114       ;***clear the screen and set new display***
13FC 7401      1115            mov a, #0x01
13FE 120083    1115            lcall ?WriteCommand
1401 C002      1116            push AR2
1403 7A02      1116            mov R2, #2
1405 120039    1116            lcall ?Wait_Milli_Seconds
1408 D002      1116            pop AR2
140A           1117       
140A C0E0      1118            push acc
140C 7401      1118            mov a, #1
140E 14        1118            dec a
140F 1200BF    1118            lcall ?Set_Cursor_1 ; Select column and row
1412 D0E0      1118            pop acc
1414 C083      1119            push dph
1416 C082      1119            push dpl
1418 C0E0      1119            push acc
141A 90037D    1119            mov dptr, #time
141D 1200B2    1119            lcall ?Send_Constant_String
1420 D0E0      1119            pop acc
1422 D082      1119            pop dpl
1424 D083      1119            pop dph
1426           1120            
1426 C0E0      1121            push acc
1428 7406      1121            mov a, #6
142A 14        1121            dec a
142B 1200BF    1121            lcall ?Set_Cursor_1 ; Select column and row
142E D0E0      1121            pop acc
1430 C083      1122            push dph
1432 C082      1122            push dpl
1434 C0E0      1122            push acc
1436 900382    1122            mov dptr, #colon
1439 1200B2    1122            lcall ?Send_Constant_String
143C D0E0      1122            pop acc
143E D082      1122            pop dpl
1440 D083      1122            pop dph
1442           1123      
1442 C0E0      1124            push acc
1444 740A      1124            mov a, #10
1446 14        1124            dec a
1447 1200BF    1124            lcall ?Set_Cursor_1 ; Select column and row
144A D0E0      1124            pop acc
144C C083      1125            push dph
144E C082      1125            push dpl
1450 C0E0      1125            push acc
1452 900384    1125            mov dptr, #temp
1455 1200B2    1125            lcall ?Send_Constant_String
1458 D0E0      1125            pop acc
145A D082      1125            pop dpl
145C D083      1125            pop dph
145E           1126       
145E C0E0      1127            push acc
1460 7401      1127            mov a, #1
1462 14        1127            dec a
1463 1200BD    1127            lcall ?Set_Cursor_2 ; Select column and row
1466 D0E0      1127            pop acc
1468 C083      1128            push dph
146A C082      1128            push dpl
146C C0E0      1128            push acc
146E 900376    1128            mov dptr, #state
1471 1200B2    1128            lcall ?Send_Constant_String
1474 D0E0      1128            pop acc
1476 D082      1128            pop dpl
1478 D083      1128            pop dph
147A 22        1129   ret
147B           1130   
147B           1131   Update_Display:
147B C0E0      1132            push acc
147D 7405      1132            mov a, #5
147F 14        1132            dec a
1480 1200BF    1132            lcall ?Set_Cursor_1 ; Select column and row
1483 D0E0      1132            pop acc
1485 C000      1133       push ar0
1487 A839      1133       mov r0, Run_time_minutes
1489 1213D3    1133       lcall ?Display_lower_BCD
148C D000      1133       pop ar0
148E C0E0      1134            push acc
1490 7407      1134            mov a, #7
1492 14        1134            dec a
1493 1200BF    1134            lcall ?Set_Cursor_1 ; Select column and row
1496 D0E0      1134            pop acc
1498 C000      1135            push ar0
149A A838      1135            mov r0, Run_time_seconds
149C 1200C4    1135            lcall ?Display_BCD
149F D000      1135            pop ar0
14A1           1136       ;Set_Cursor(1,14)
14A1           1137       ;mov a, Temp_oven
14A1           1138       ;SendToLCD(Temp_oven)
14A1 22        1139   ret
14A2           1140   
14A2           1141   State0_display:
14A2 C0E0      1142            push acc
14A4 7401      1142            mov a, #1
14A6 14        1142            dec a
14A7 1200BF    1142            lcall ?Set_Cursor_1 ; Select column and row
14AA D0E0      1142            pop acc
14AC C083      1143            push dph
14AE C082      1143            push dpl
14B0 C0E0      1143            push acc
14B2 900360    1143            mov dptr, #STemp
14B5 1200B2    1143            lcall ?Send_Constant_String
14B8 D0E0      1143            pop acc
14BA D082      1143            pop dpl
14BC D083      1143            pop dph
14BE C0E0      1144            push acc
14C0 7406      1144            mov a, #6
14C2 14        1144            dec a
14C3 1200BF    1144            lcall ?Set_Cursor_1 ; Select column and row
14C6 D0E0      1144            pop acc
14C8 E534      1145       mov a, Temp_soak
14CA 1213E0    1146       lcall SendToLCD
14CD           1147       
14CD C0E0      1148            push acc
14CF 740A      1148            mov a, #10
14D1 14        1148            dec a
14D2 1200BF    1148            lcall ?Set_Cursor_1 ; Select column and row
14D5 D0E0      1148            pop acc
14D7 C083      1149            push dph
14D9 C082      1149            push dpl
14DB C0E0      1149            push acc
14DD 900366    1149            mov dptr, #STime
14E0 1200B2    1149            lcall ?Send_Constant_String
14E3 D0E0      1149            pop acc
14E5 D082      1149            pop dpl
14E7 D083      1149            pop dph
14E9 C0E0      1150            push acc
14EB 740E      1150            mov a, #14
14ED 14        1150            dec a
14EE 1200BF    1150            lcall ?Set_Cursor_1 ; Select column and row
14F1 D0E0      1150            pop acc
14F3 E535      1151       mov a, Time_soak
14F5 1213E0    1152            lcall SendToLCD
14F8           1153       ;Display_BCD(Time_soak)
14F8           1154   
14F8           1155       ;Displays Reflow Temp and Time
14F8 C0E0      1156            push acc
14FA 7401      1156            mov a, #1
14FC 14        1156            dec a
14FD 1200BD    1156            lcall ?Set_Cursor_2 ; Select column and row
1500 D0E0      1156            pop acc
1502 C083      1157            push dph
1504 C082      1157            push dpl
1506 C0E0      1157            push acc
1508 90036B    1157            mov dptr, #RTemp
150B 1200B2    1157            lcall ?Send_Constant_String
150E D0E0      1157            pop acc
1510 D082      1157            pop dpl
1512 D083      1157            pop dph
1514 C0E0      1158            push acc
1516 7406      1158            mov a, #6
1518 14        1158            dec a
1519 1200BD    1158            lcall ?Set_Cursor_2 ; Select column and row
151C D0E0      1158            pop acc
151E E536      1159       mov a, Temp_refl
1520 1213E0    1160       lcall SendToLCD
1523           1161       
1523 C0E0      1162            push acc
1525 740A      1162            mov a, #10
1527 14        1162            dec a
1528 1200BD    1162            lcall ?Set_Cursor_2 ; Select column and row
152B D0E0      1162            pop acc
152D C083      1163            push dph
152F C082      1163            push dpl
1531 C0E0      1163            push acc
1533 900371    1163            mov dptr, #RTime
1536 1200B2    1163            lcall ?Send_Constant_String
1539 D0E0      1163            pop acc
153B D082      1163            pop dpl
153D D083      1163            pop dph
153F C0E0      1164            push acc
1541 740E      1164            mov a, #14
1543 14        1164            dec a
1544 1200BD    1164            lcall ?Set_Cursor_2 ; Select column and row
1547 D0E0      1164            pop acc
1549 E537      1165       mov a, Time_refl
154B 1213E0    1166            lcall SendToLCD
154E 22        1167   ret
154F           1168   
154F           1169   Display_3_digit_BCD:
154F C0E0      1170            push acc
1551 740E      1170            mov a, #14
1553 14        1170            dec a
1554 1200BF    1170            lcall ?Set_Cursor_1 ; Select column and row
1557 D0E0      1170            pop acc
1559 C000      1171       push ar0
155B A846      1171       mov r0, bcd+1
155D 1213D3    1171       lcall ?Display_lower_BCD
1560 D000      1171       pop ar0
1562 C000      1172            push ar0
1564 A845      1172            mov r0, bcd+0
1566 1200C4    1172            lcall ?Display_BCD
1569 D000      1172            pop ar0
156B 22        1173   ret
156C           1174   
156C           1175   Animation:
156C 740F      1176            mov a, #0x0f
156E 120083    1176            lcall ?WriteCommand ;display cursor
1571           1177   
1571           1178       ;name ; Move cursor to line 1 column 1
1571 7480      1179            mov a, #0x80
1573 120083    1179            lcall ?WriteCommand
1576 7457      1180            mov a, #'W'
1578 12007E    1180            lcall ?WriteData
157B C002      1181            push AR2
157D 7AFA      1181            mov R2, #250
157F 120039    1181            lcall ?Wait_Milli_Seconds
1582 D002      1181            pop AR2
1584 7465      1182            mov a, #'e'
1586 12007E    1182            lcall ?WriteData
1589 C002      1183            push AR2
158B 7AFA      1183            mov R2, #250
158D 120039    1183            lcall ?Wait_Milli_Seconds
1590 D002      1183            pop AR2
1592 746C      1184            mov a, #'l'
1594 12007E    1184            lcall ?WriteData
1597 C002      1185            push AR2
1599 7AFA      1185            mov R2, #250
159B 120039    1185            lcall ?Wait_Milli_Seconds
159E D002      1185            pop AR2
15A0 7463      1186            mov a, #'c'
15A2 12007E    1186            lcall ?WriteData
15A5 C002      1187            push AR2
15A7 7AFA      1187            mov R2, #250
15A9 120039    1187            lcall ?Wait_Milli_Seconds
15AC D002      1187            pop AR2
15AE 746F      1188            mov a, #'o'
15B0 12007E    1188            lcall ?WriteData
15B3 C002      1189            push AR2
15B5 7AFA      1189            mov R2, #250
15B7 120039    1189            lcall ?Wait_Milli_Seconds
15BA D002      1189            pop AR2
15BC 746D      1190            mov a, #'m'
15BE 12007E    1190            lcall ?WriteData
15C1 C002      1191            push AR2
15C3 7AFA      1191            mov R2, #250
15C5 120039    1191            lcall ?Wait_Milli_Seconds
15C8 D002      1191            pop AR2
15CA 7465      1192            mov a, #'e'
15CC 12007E    1192            lcall ?WriteData
15CF C002      1193            push AR2
15D1 7AFA      1193            mov R2, #250
15D3 120039    1193            lcall ?Wait_Milli_Seconds
15D6 D002      1193            pop AR2
15D8 7421      1194            mov a, #'!'
15DA 12007E    1194            lcall ?WriteData
15DD C002      1195            push AR2
15DF 7AFA      1195            mov R2, #250
15E1 120039    1195            lcall ?Wait_Milli_Seconds
15E4 D002      1195            pop AR2
15E6 7420      1196            mov a, #' '
15E8 12007E    1196            lcall ?WriteData
15EB C002      1197            push AR2
15ED 7AFA      1197            mov R2, #250
15EF 120039    1197            lcall ?Wait_Milli_Seconds
15F2 D002      1197            pop AR2
15F4 7460      1198            mov a, #96
15F6 12007E    1198            lcall ?WriteData
15F9 C002      1199            push AR2
15FB 7AFA      1199            mov R2, #250
15FD 120039    1199            lcall ?Wait_Milli_Seconds
1600 D002      1199            pop AR2
1602 74EF      1200            mov a, #239
1604 12007E    1200            lcall ?WriteData
1607 C002      1201            push AR2
1609 7AFA      1201            mov R2, #250
160B 120039    1201            lcall ?Wait_Milli_Seconds
160E D002      1201            pop AR2
1610 742F      1202            mov a, #47
1612 12007E    1202            lcall ?WriteData
1615 12178D    1203       lcall Wait_One_Second
1618 12178D    1204       lcall Wait_One_Second
161B 740C      1205            mov a, #0x0c
161D 120083    1205            lcall ?WriteCommand ;clear cursor
1620 22        1206   ret
1621           1207   
1621           1208   ;The following functions store and restore the values--------------------------------------------------------------------------
               1209   loadbyte mac
               1210       mov a, %0
               1211       movx @dptr, a
               1212       inc dptr
               1213   endmac
1621           1214   
1621           1215   Save_Configuration1:
1621 C0A8      1216       push IE ; Save the current state of bit EA in the stack
1623 C2AF      1217       clr EA ; Disable interrupts
1625 75D108    1218       mov FCON, #0x08 ; Page Buffer Mapping Enabled (FPS = 1)
1628 907F80    1219       mov dptr, #0x7f80 ; Last page of flash memory
162B           1220       ; Save variables
162B E534      1221       mov a, temp_soak
162D F0        1221       movx @dptr, a
162E A3        1221       inc dptr ; @0x7f80
162F E535      1222       mov a, time_soak
1631 F0        1222       movx @dptr, a
1632 A3        1222       inc dptr ; @0x7f81
1633 E536      1223       mov a, temp_refl
1635 F0        1223       movx @dptr, a
1636 A3        1223       inc dptr ; @0x7f82
1637 E537      1224       mov a, time_refl
1639 F0        1224       movx @dptr, a
163A A3        1224       inc dptr ; @0x7f83
163B 7455      1225       mov a, #0x55
163D F0        1225       movx @dptr, a
163E A3        1225       inc dptr ; First key value @0x7f84
163F 74AA      1226       mov a, #0xAA
1641 F0        1226       movx @dptr, a
1642 A3        1226       inc dptr ; Second key value @0x7f85
1643 75D100    1227       mov FCON, #0x00 ; Page Buffer Mapping Disabled (FPS = 0) 
1646 43D240    1228       orl EECON, #0b01000000 ; Enable auto-erase on next write sequence  
1649 75D150    1229       mov FCON, #0x50 ; Write trigger first byte
164C 75D1A0    1230       mov FCON, #0xA0 ; Write trigger second byte
164F           1231       ; CPU idles until writing of flash completes.
164F 75D100    1232       mov FCON, #0x00 ; Page Buffer Mapping Disabled (FPS = 0)
1652 53D2BF    1233       anl EECON, #0b10111111 ; Disable auto-erase
1655 D0A8      1234       pop IE ; Restore the state of bit EA from the stack
1657 22        1235   ret
1658           1236   
1658           1237   Save_Configuration2:
1658 C0A8      1238       push IE ; Save the current state of bit EA in the stack
165A C2AF      1239       clr EA ; Disable interrupts
165C 75D108    1240       mov FCON, #0x08 ; Page Buffer Mapping Enabled (FPS = 1)
165F 907F80    1241       mov dptr, #0x7f80 ; Last page of flash memory
1662           1242       ; Save variables
1662 E534      1243       mov a, temp_soak
1664 F0        1243       movx @dptr, a
1665 A3        1243       inc dptr ; @0x7f80
1666 E535      1244       mov a, time_soak
1668 F0        1244       movx @dptr, a
1669 A3        1244       inc dptr ; @0x7f81
166A E536      1245       mov a, temp_refl
166C F0        1245       movx @dptr, a
166D A3        1245       inc dptr ; @0x7f82
166E E537      1246       mov a, time_refl
1670 F0        1246       movx @dptr, a
1671 A3        1246       inc dptr ; @0x7f83
1672 7455      1247       mov a, #0x55
1674 F0        1247       movx @dptr, a
1675 A3        1247       inc dptr ; First key value @0x7f84
1676 74AA      1248       mov a, #0xAA
1678 F0        1248       movx @dptr, a
1679 A3        1248       inc dptr ; Second key value @0x7f85
167A 75D100    1249       mov FCON, #0x00 ; Page Buffer Mapping Disabled (FPS = 0) 
167D 43D240    1250       orl EECON, #0b01000000 ; Enable auto-erase on next write sequence  
1680 75D150    1251       mov FCON, #0x50 ; Write trigger first byte
1683 75D1A0    1252       mov FCON, #0xA0 ; Write trigger second byte
1686           1253       ; CPU idles until writing of flash completes.
1686 75D100    1254       mov FCON, #0x00 ; Page Buffer Mapping Disabled (FPS = 0)
1689 53D2BF    1255       anl EECON, #0b10111111 ; Disable auto-erase
168C D0A8      1256       pop IE ; Restore the state of bit EA from the stack
168E 22        1257   ret
168F           1258   
               1259   getbyte mac
               1260       clr a
               1261       movc a, @a+dptr
               1262       mov %0, a
               1263       inc dptr
               1264   endmac
168F           1265   
168F           1266   Load_Configuration:
168F 907F84    1267       mov dptr, #0x7f84 ; First key value location.
1692 E4        1268       clr a
1693 93        1268       movc a, @a+dptr
1694 F8        1268       mov R0, a
1695 A3        1268       inc dptr ; 0x7f84 should contain 0x55
1696 B8551F    1269       cjne R0, #0x55, Load_Defaults
1699 E4        1270       clr a
169A 93        1270       movc a, @a+dptr
169B F8        1270       mov R0, a
169C A3        1270       inc dptr ; 0x7f85 should contain 0xAA
169D B8AA18    1271       cjne R0, #0xAA, Load_Defaults
16A0           1272   ; Keys are good.  Get stored values.
16A0 907F80    1273       mov dptr, #0x7f80
16A3 E4        1274       clr a
16A4 93        1274       movc a, @a+dptr
16A5 F534      1274       mov Temp_soak, a
16A7 A3        1274       inc dptr ; 0x7f80
16A8 E4        1275       clr a
16A9 93        1275       movc a, @a+dptr
16AA F535      1275       mov Time_soak, a
16AC A3        1275       inc dptr ; 0x7f81
16AD E4        1276       clr a
16AE 93        1276       movc a, @a+dptr
16AF F536      1276       mov Temp_refl, a
16B1 A3        1276       inc dptr ; 0x7f82
16B2 E4        1277       clr a
16B3 93        1277       movc a, @a+dptr
16B4 F537      1277       mov Time_refl, a
16B6 A3        1277       inc dptr ; 0x7f83
16B7 22        1278   ret
16B8           1279   
16B8           1280   Load_Defaults:
16B8 753482    1281       mov Temp_soak, #130 ; Soak Tmp Range is 130-170
16BB 75353C    1282       mov Time_soak, #0x3C ; Range 60-90 seconds
16BE 7536DC    1283       mov Temp_refl, #220 ; Range 220-240
16C1 75371E    1284       mov Time_refl, #0x1E ; Range 30-45 seconds
16C4 22        1285       ret 
16C5           1286   ;-------------------------------------------------------------------------------------------------------------------------------
16C5           1287   ;off state
16C5           1288   
16C5           1289   OFF_STATE:
16C5           1290       ;**CLEAR SCREEN**
16C5 7401      1291            mov a, #0x01
16C7 120083    1291            lcall ?WriteCommand
16CA           1292       ;OFF_STATE1:
16CA           1293       
16CA 20C5FD    1294       jb POWER_BUTTON, $ ; loop while the button is not pressed
16CD C002      1295            push AR2
16CF 7A32      1295            mov R2, #50
16D1 120039    1295            lcall ?Wait_Milli_Seconds
16D4 D002      1295            pop AR2 ; debounce time
16D6 20C5EC    1296            jb POWER_BUTTON, OFF_STATE ; it was a bounce, try again
16D9 30C5FD    1297            jnb POWER_BUTTON, $ ; loop while the button is pressed
16DC 021876    1298       ljmp main
16DF 22        1299   ret
16E0           1300   ;-------------------------------------------------------------------------------------------------------------------------------
16E0           1301   
16E0           1302   ;***CHECK TEMPERATURE BY READING VOLTAGE AND CONVERTING
16E0           1303   Check_Temp:
16E0           1304       
16E0           1305       ;jnb one_seconds_flag, Check_Temp_done
16E0           1306       ;clr one_seconds_flag
16E0           1307       
16E0 C297      1308       clr CE_ADC
16E2 7801      1309            mov R0, #00000001B ; Start bit:1
16E4 1203F4    1310            lcall DO_SPI_G
16E7 7880      1311            mov R0, #10000000B ; Single ended, read channel 0
16E9 1203F4    1312            lcall DO_SPI_G
16EC E9        1313            mov a, R1          ; R1 contains bits 8 and 9
16ED 5403      1314            anl a, #00000011B  ; We need only the two least significant bits
16EF F54B      1315            mov Result+1, a    ; Save result high.
16F1 7855      1316            mov R0, #55H ; It doesn't matter what we transmit...
16F3 1203F4    1317            lcall DO_SPI_G
16F6 894A      1318            mov Result+0, R1     ; R1 contains bits 0 to 7.  Save result low.
16F8 D297      1319            setb CE_ADC
16FA           1320   
16FA C002      1321            push AR2
16FC 7A0A      1321            mov R2, #10
16FE 120039    1321            lcall ?Wait_Milli_Seconds
1701 D002      1321            pop AR2
1703           1322       ; Copy the 10-bits of the ADC conversion into the 32-bits of 'x'
1703 AE4A      1323            mov R6, Result+0
1705 AF4B      1324            mov R7, Result+1
1707 22        1325   ret
1708           1326   
1708           1327       
1708           1328       
1708           1329   ;***CALCULATES THE TEMPERATURE
1708           1330   Average_Temp:
1708 753D00    1331            mov x+0, #low (0 % 0x10000) 
170B 753E00    1331            mov x+1, #high(0 % 0x10000) 
170E 753F00    1331            mov x+2, #low (0 / 0x10000) 
1711 754000    1331            mov x+3, #high(0 / 0x10000) 
1714 7D64      1332       mov R5, #100
1716           1333   Ave_loop:
1716 1216E0    1334       lcall Check_Temp
1719 754400    1335       mov y+3, #0
171C 754300    1336       mov y+2, #0
171F 8F42      1337       mov y+1, R7
1721 8E41      1338       mov y+0, R6
1723 1201B5    1339       lcall add32
1726 1217C5    1340       lcall Wait10us
1729 DDEB      1341       djnz R5, Ave_loop
172B 754164    1342            mov y+0, #low (100 % 0x10000) 
172E 754200    1342            mov y+1, #high(100 % 0x10000) 
1731 754300    1342            mov y+2, #low (100 / 0x10000) 
1734 754400    1342            mov y+3, #high(100 / 0x10000) 
1737 1202F7    1343       lcall div32
173A           1344   
173A           1345       ;**INSERT MATH FUNCTIONS
173A           1346   
173A 75414E    1347            mov y+0, #low (2894 % 0x10000) 
173D 75420B    1347            mov y+1, #high(2894 % 0x10000) 
1740 754300    1347            mov y+2, #low (2894 / 0x10000) 
1743 754400    1347            mov y+3, #high(2894 / 0x10000)  ;6078; 2026
1746 12026A    1348            lcall mul32
1749 754110    1349            mov y+0, #low (10000 % 0x10000) 
174C 754227    1349            mov y+1, #high(10000 % 0x10000) 
174F 754300    1349            mov y+2, #low (10000 / 0x10000) 
1752 754400    1349            mov y+3, #high(10000 / 0x10000)  ;14000; 7000
1755 1202F7    1350            lcall div32
1758 754116    1351            mov y+0, #low (22 % 0x10000) 
175B 754200    1351            mov y+1, #high(22 % 0x10000) 
175E 754300    1351            mov y+2, #low (22 / 0x10000) 
1761 754400    1351            mov y+3, #high(22 / 0x10000) 
1764 1201B5    1352       lcall add32
1767 853D3B    1353       mov Temp_oven, x+0
176A           1354       ;add KTemp_oven, Temp_oven, #273
176A           1355   
176A           1356   Display_Temp_BCD_Or_Kelvin:
176A 1200F0    1357            lcall hex2bcd ; converts binary in x to BCD in BCD
176D           1358       ;mov a, K_or_C
176D           1359       ;cjne a, #1, Display_3_digit_BCD
176D           1360       ;mov a, KTemp_oven
176D           1361       ;SendToLCD
176D           1362       ;sjmp Send_Temp_Port
176D           1363   
176D           1364   Display_Temp_BCD:    
176D 12154F    1365       lcall Display_3_digit_BCD
1770           1366   
1770           1367   Send_Temp_Port:
1770           1368       ;Send_BCD(bcd+4)
1770           1369       ;Send_BCD(bcd+3)
1770           1370       ;Send_BCD(bcd+2)
1770 C000      1371       push ar0
1772 A846      1371       mov r0, bcd+1
1774 1200DA    1371       lcall ?Send_BCD
1777 D000      1371       pop ar0
1779           1371   
1779 C000      1372       push ar0
177B A845      1372       mov r0, bcd+0
177D 1200DA    1372       lcall ?Send_BCD
1780 D000      1372       pop ar0
1782           1372   
1782 740D      1373            mov a, #'\r'
1784 12047E    1374            lcall putchar
1787 740A      1375            mov a, #'\n'
1789 12047E    1376            lcall putchar
178C           1377   Check_Temp_done:
178C 22        1378   ret    
178D           1379   
178D           1380   ;-------------------------------------------------------------------------------------------------------------------------------
178D           1381   
178D           1382   ;Time wait
178D           1383   
178D           1384   Wait_One_Second:
178D C002      1385            push AR2
178F 7AFA      1385            mov R2, #250
1791 120039    1385            lcall ?Wait_Milli_Seconds
1794 D002      1385            pop AR2
1796 C002      1386            push AR2
1798 7AFA      1386            mov R2, #250
179A 120039    1386            lcall ?Wait_Milli_Seconds
179D D002      1386            pop AR2
179F C002      1387            push AR2
17A1 7AFA      1387            mov R2, #250
17A3 120039    1387            lcall ?Wait_Milli_Seconds
17A6 D002      1387            pop AR2
17A8 C002      1388            push AR2
17AA 7AFA      1388            mov R2, #250
17AC 120039    1388            lcall ?Wait_Milli_Seconds
17AF D002      1388            pop AR2
17B1 22        1389   ret
17B2           1390   
17B2           1391   Wait_Half_Second:
17B2 C002      1392            push AR2
17B4 7AFA      1392            mov R2, #250
17B6 120039    1392            lcall ?Wait_Milli_Seconds
17B9 D002      1392            pop AR2
17BB C002      1393            push AR2
17BD 7AFA      1393            mov R2, #250
17BF 120039    1393            lcall ?Wait_Milli_Seconds
17C2 D002      1393            pop AR2
17C4 22        1394   ret
17C5           1395   
17C5           1396   
17C5           1397   
17C5           1398   Wait10us:
17C5 784A      1399       mov R0, #74
17C7 D8FE      1400       djnz R0, $
17C9 22        1401   ret
17CA           1402   ; ==================================================================================================
17CA           1403   
17CA           1404   ;-------------------------------------;
17CA           1405   ; ISR for Timer 1.  Used to playback  ;
17CA           1406   ; the WAV file stored in the SPI      ;
17CA           1407   ; flash memory.                       ;
17CA           1408   ;-------------------------------------;
17CA           1409   Timer1_ISR:
17CA           1410            ; The registers used in the ISR must be saved in the stack
17CA C0E0      1411            push acc
17CC C0D0      1412            push psw
17CE           1413            
17CE           1414            ; Check if the play counter is zero.  If so, stop playing sound.
17CE E54C      1415            mov a, w+0
17D0 454D      1416            orl a, w+1
17D2 454E      1417            orl a, w+2
17D4 601C      1418            jz stop_playing
17D6           1419            
17D6           1420            ; Decrement play counter 'w'.  In this implementation 'w' is a 24-bit counter.
17D6 74FF      1421            mov a, #0xff
17D8 154C      1422            dec w+0
17DA B54C07    1423            cjne a, w+0, keep_playing
17DD 154D      1424            dec w+1
17DF B54D02    1425            cjne a, w+1, keep_playing
17E2 154E      1426            dec w+2
17E4           1427            
17E4           1428   keep_playing:
17E4 D2A6      1429            setb SPEAKER
17E6 12040D    1430            lcall Send_SPI ; Read the next byte from the SPI Flash...
17E9           1431            ;mov P0, a ; WARNING: Remove this if not using an external DAC to use the pins of P0 as GPIO
17E9 2480      1432            add a, #0x80
17EB F5AD      1433            mov DADH, a ; Output to DAC. DAC output is pin P2.3
17ED 43A440    1434            orl DADC, #0b_0100_0000 ; Start DAC by setting GO/BSY=1
17F0 800C      1435            sjmp Timer1_ISR_Done
17F2           1436   
17F2           1437   stop_playing:
17F2 C28E      1438            clr TR1 ; Stop timer 1
17F4 D2A5      1439            setb FLASH_CE  ; Disable SPI Flash
17F6 C2A6      1440            clr SPEAKER ; Turn off speaker.  Removes hissing noise when not playing sound.
17F8 75AD80    1441            mov DADH, #0x80 ; middle of range
17FB 43A440    1442            orl DADC, #0b_0100_0000 ; Start DAC by setting GO/BSY=1
17FE           1443   
17FE           1444   Timer1_ISR_Done:         
17FE D0D0      1445            pop psw
1800 D0E0      1446            pop acc
1802 32        1447            reti
1803           1448   ; ==================================================================================================
1803           1449   
1803           1450   ;---------------------------------;
1803           1451   ; Routine to initialize the ISR   ;
1803           1452   ; for timer 2                     ;
1803           1453   ;---------------------------------;
1803           1454   Timer2_init:
1803 75C800    1455       mov T2CON, #0
1806 75CDA9    1456       mov TH2, #high(TIMER2_RELOAD)
1809 75CC9A    1457       mov TL2, #low(TIMER2_RELOAD)
180C           1458   
180C 75CBA9    1459       mov RCAP2H, #high(TIMER2_RELOAD)
180F 75CA9A    1460       mov RCAP2L, #low(TIMER2_RELOAD)
1812           1461   
1812 E4        1462       clr a
1813 F530      1463       mov Count1ms+0, a
1815 F531      1464       mov Count1ms+1, a
1817 F532      1465       mov Count5sec , a
1819 D2AD      1466       setb ET2
181B D2CA      1467       setb TR2
181D C202      1468       clr enable_clk
181F 22        1469       ret
1820           1470   
1820           1471   ;---------------------------------;
1820           1472   ; ISR for timer 2                 ;
1820           1473   ;---------------------------------;
1820           1474   Timer2_ISR:
1820 C2CF      1475       clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
1822 B290      1476       cpl P1.0 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
1824           1477            
1824           1478            ; The two registers used in the ISR must be saved in the stack
1824 C0E0      1479       push acc
1826 C0D0      1480       push psw
1828           1481            
1828           1482            ; Increment the 16-bit one mili second counter
1828 0530      1483            inc Count1ms+0    ; Increment the low 8-bits first
182A E530      1484            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
182C 7002      1485            jnz Inc_Done
182E 0531      1486            inc Count1ms+1
1830           1487   
1830           1488   Inc_Done:
1830           1489   
1830           1490   ;**Oven Power Output-------------------
1830           1491       ; Do the PWM thing
1830           1492            ; Check if Count1ms > pwm_ratio (this is a 16-bit compare)
1830 C3        1493            clr c
1831 E54F      1494            mov a, pwm_ratio+0
1833 9530      1495            subb a, Count1ms+0
1835 E550      1496            mov a, pwm_ratio+1
1837 9531      1497            subb a, Count1ms+1
1839           1498            ; if Count1ms > pwm_ratio  the carry is set.  Just copy the carry to the pwm output pin:
1839 9290      1499            mov PWM_OUTPUT, c
183B           1500   ;**----------------------------------
183B           1501            ; Check if one second has passed
183B E530      1502            mov a, Count1ms+0
183D B4E831    1503            cjne a, #low(1000), Timer2_ISR_done ; Warning: this instruction changes the carry flag!
1840 E531      1504            mov a, Count1ms+1
1842 B4032C    1505            cjne a, #high(1000), Timer2_ISR_done
1845           1506            
1845           1507            ; 1000 milliseconds have passed.  Set a flag so the main program knows
1845 D200      1508            setb one_seconds_flag ; Let the main program know one second had passed
1847           1509       
1847 0532      1510       inc Count5sec
1849 E532      1511       mov a, Count5sec
184B B40505    1512       cjne a, #5, Set_5sec_flag_done
184E D201      1513       setb five_seconds_flag
1850 E4        1514       clr a
1851 F532      1515       mov Count5sec, a
1853           1516       
1853           1517   Set_5sec_flag_done:
1853 E4        1518            clr a
1854 F530      1519            mov Count1ms+0, a
1856 F531      1520            mov Count1ms+1, a
1858           1521   
1858 300216    1522       jnb enable_clk, Timer2_ISR_done ;if the clk is enabled, increment the second. Otherwise skip
185B           1523   ; Increment the run time counter and state time counter
185B E538      1524            mov a, Run_time_seconds
185D 2401      1525            add a, #0x01
185F D4        1526            da a
1860 F538      1527       mov Run_time_seconds, a
1862           1528       ;check sec overflow
1862 B4600A    1529       cjne a, #0x60, Check_sec_overflow_done
1865 753800    1530       mov Run_time_seconds, #0x00
1868 E539      1531       mov a, Run_time_minutes ;inc min
186A 2401      1532       add a, #1
186C D4        1533       da a
186D F539      1534       mov Run_time_minutes, a
186F           1535   Check_sec_overflow_done:
186F 053A      1536       inc State_time
1871           1537   Timer2_ISR_done:
1871 D0D0      1538            pop psw
1873 D0E0      1539            pop acc
1875 32        1540            reti
1876           1541   
1876           1542   
1876           1543   ; ==================================================================================================
1876           1544   
1876           1545   main:
1876 75817F    1546       mov SP, #0x7F
1879 121803    1547       lcall Timer2_Init
187C           1548       ;lcall INI_SPI
187C 120088    1549       lcall LCD_4BIT
187F 120466    1550       lcall InitSerialPort
1882 12139A    1551       lcall INI_PLAYBACK_TEMP
1885           1552       ; In case you decide to use the pins of P0, configure the port in bidirectional mode. Can be ignored
1885 75E600    1553       mov P0M0, #0
1888 75E700    1554       mov P0M1, #0
188B D2AF      1555       setb EA   ;Enable global enterupt
188D C204      1556       clr SPAN_ENG
188F           1557   
188F           1558       ;lcall Load_Configuration1
188F           1559   
188F           1560       ;Set the default pwm output ratio to 0%.  That is 0ms of every second:
188F 754F00    1561            mov pwm_ratio+0, #low(0)
1892 755000    1562            mov pwm_ratio+1, #high(0)
1895 753300    1563       mov States, #0
1898           1564   
1898           1565       ; ***play audio***
1898           1565       ;cjne sound_flag, #0, $
1898           1565       
1898 1217B2    1565       lcall Wait_Half_Second
189B C28E      1565       clr TR1 ; Stop Timer 1 ISR from playing previous request
189D D2A5      1565       setb FLASH_CE
189F           1565       ;setb sound_flag ; sound starts
189F C2A6      1565       clr SPEAKER ; Turn off speaker
18A1 C2A5      1565       clr FLASH_CE ; Enable SPI Flash
18A3 7403      1565       mov a, #READ_BYTES
18A5 12040D    1565       lcall Send_SPI
18A8           1565       ; Set the initial position in memory where to start playing
18A8           1565       
18A8 7419      1565       mov a, #0x19 ; change initial position
18AA 12040D    1565       lcall Send_SPI
18AD 748E      1565       mov a, #0x8e ; next memory position
18AF 12040D    1565       lcall Send_SPI
18B2 74F8      1565       mov a, #0xf8 ; next memory position
18B4 12040D    1565       lcall Send_SPI
18B7 7419      1565       mov a, #0x19 ; request first byte to send to DAC
18B9 12040D    1565       lcall Send_SPI
18BC           1565       
18BC           1565       ; How many bytes to play?
18BC 754E00    1565       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
18BF 754D75    1565       mov w+1, #0x75 ; Load the middle byte of the number of bytes to play
18C2 754C30    1565       mov w+0, #0x30 ; Load the low byte of the number of bytes to play
18C5           1565       
18C5           1565       
18C5 D2A6      1565       setb SPEAKER ;Turn on speaker
18C7 D28E      1565       setb TR1 ;Start playback by enabling Timer1
18C9           1565       ;clr sound_flag ; sound ends
18C9           1566       ;setb FAN
18C9 12156C    1567       lcall Animation 
18CC           1568   
18CC           1569       
18CC           1570   state0: ; idle 
18CC           1571   ;***initial parameters displayed***
18CC 754F00    1572       mov pwm_ratio+0, #low(0)
18CF 755000    1573            mov pwm_ratio+1, #high(0)
18D2           1574       
18D2           1575       ;Displays Soak Temp and Time
18D2 1214A2    1576       lcall State0_display
18D5           1577       ;check power on
18D5 1204F6    1578       lcall CHECK_POWER
18D8           1579       ; check the parameters being pressed
18D8 120486    1580       lcall CHECK_STIME
18DB 1204A2    1581       lcall CHECK_STEMP
18DE 1204BE    1582       lcall CHECK_RTIME
18E1 1204DA    1583       lcall CHECK_RTEMP
18E4           1584       ;lcall Save_Configuration1
18E4           1585       
18E4 2085E5    1586       jb NEXT_STATE_BUTTON, state0
18E7 C002      1587            push AR2
18E9 7A32      1587            mov R2, #50
18EB 120039    1587            lcall ?Wait_Milli_Seconds
18EE D002      1587            pop AR2 ; debounce time
18F0 2085D9    1588            jb NEXT_STATE_BUTTON, state0 ; if button not pressed, loop
18F3 3085FD    1589            jnb NEXT_STATE_BUTTON, $
18F6           1590   state0_done:
18F6 753301    1591       mov States, #1
18F9 753A00    1592       mov State_time, #0
18FC D202      1593       setb enable_clk
18FE           1594       ; ***play audio***
18FE           1594       ;cjne sound_flag, #0, $
18FE           1594       
18FE C28E      1594       clr TR1 ; Stop Timer 1 ISR from playing previous request
1900 D2A5      1594       setb FLASH_CE
1902           1594       ;setb sound_flag ; sound starts
1902 C2A6      1594       clr SPEAKER ; Turn off speaker
1904 C2A5      1594       clr FLASH_CE ; Enable SPI Flash
1906 7403      1594       mov a, #READ_BYTES
1908 12040D    1594       lcall Send_SPI
190B           1594       ; Set the initial position in memory where to start playing
190B           1594       
190B 7418      1594       mov a, #0x18 ; change initial position
190D 12040D    1594       lcall Send_SPI
1910 74CB      1594       mov a, #0xcb ; next memory position
1912 12040D    1594       lcall Send_SPI
1915 74A8      1594       mov a, #0xa8 ; next memory position
1917 12040D    1594       lcall Send_SPI
191A 7418      1594       mov a, #0x18 ; request first byte to send to DAC
191C 12040D    1594       lcall Send_SPI
191F           1594       
191F           1594       ; How many bytes to play?
191F 754E02    1594       mov w+2, #0x02 ; Load the high byte of the number of bytes to play
1922 754D0F    1594       mov w+1, #0x0f ; Load the middle byte of the number of bytes to play
1925 754C58    1594       mov w+0, #0x58 ; Load the low byte of the number of bytes to play
1928           1594       
1928           1594       
1928 D2A6      1594       setb SPEAKER ;Turn on speaker
192A D28E      1594       setb TR1 ;Start playback by enabling Timer1
192C           1594       ;clr sound_flag ; sound ends
192C 12178D    1595       lcall Wait_One_Second
192F           1596        
192F           1597   
192F           1598   state1_beginning:
192F           1599   
192F           1600       ;Start Run Time
192F 753800    1601       mov Run_time_seconds, #0 ; time starts at 0:00
1932 753900    1602       mov Run_time_minutes, #0
1935 753A00    1603       mov State_time, #0
1938           1604   
1938           1605       ;***clear the screen and set new display***
1938 1213FC    1606       lcall Initialize_State_Display
193B C0E0      1607            push acc
193D 7407      1607            mov a, #7
193F 14        1607            dec a
1940 1200BD    1607            lcall ?Set_Cursor_2 ; Select column and row
1943 D0E0      1607            pop acc
1945 C083      1608            push dph
1947 C082      1608            push dpl
1949 C0E0      1608            push acc
194B 9003C7    1608            mov dptr, #Ramp2Soak
194E 1200B2    1608            lcall ?Send_Constant_String
1951 D0E0      1608            pop acc
1953 D082      1608            pop dpl
1955 D083      1608            pop dph; displays current state
1957           1609   
1957           1610       ;Set the default pwm output ratio to 100%.  That is 1000ms of every second:
1957 754FE8    1611            mov pwm_ratio+0, #low(1000)
195A 755003    1612            mov pwm_ratio+1, #high(1000)
195D           1613       ; ***play audio***
195D           1613       ;cjne sound_flag, #0, $
195D           1613       
195D 1217B2    1613       lcall Wait_Half_Second
1960 C28E      1613       clr TR1 ; Stop Timer 1 ISR from playing previous request
1962 D2A5      1613       setb FLASH_CE
1964           1613       ;setb sound_flag ; sound starts
1964 C2A6      1613       clr SPEAKER ; Turn off speaker
1966 C2A5      1613       clr FLASH_CE ; Enable SPI Flash
1968 7403      1613       mov a, #READ_BYTES
196A 12040D    1613       lcall Send_SPI
196D           1613       ; Set the initial position in memory where to start playing
196D           1613       
196D 7400      1613       mov a, #0x00 ; change initial position
196F 12040D    1613       lcall Send_SPI
1972 7400      1613       mov a, #0x00 ; next memory position
1974 12040D    1613       lcall Send_SPI
1977 742D      1613       mov a, #0x2d ; next memory position
1979 12040D    1613       lcall Send_SPI
197C 7400      1613       mov a, #0x00 ; request first byte to send to DAC
197E 12040D    1613       lcall Send_SPI
1981           1613       
1981           1613       ; How many bytes to play?
1981 754E00    1613       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1984 754D4E    1613       mov w+1, #0x4e ; Load the middle byte of the number of bytes to play
1987 754C20    1613       mov w+0, #0x20 ; Load the low byte of the number of bytes to play
198A           1613       
198A           1613       
198A D2A6      1613       setb SPEAKER ;Turn on speaker
198C D28E      1613       setb TR1 ;Start playback by enabling Timer1
198E           1613       ;clr sound_flag ; sound ends
198E           1614       ;mov FAN, #1
198E 8003      1615       sjmp state1
1990           1616       
1990           1617   main_1:
1990 021876    1618            ljmp main
1993           1619   
1993           1620   state1: ; ramp to soak
1993           1621       
1993           1622       ;PLAYBACK_TEMP(#0x00,#0x00,#0x2d, #0x4e,#0x20)
1993           1623       ;check power on
1993 1204F6    1624       lcall CHECK_POWER
1996           1625       ;Update Time and Temp
1996 12147B    1626       lcall Update_Display
1999 121708    1627       lcall Average_Temp
199C 120512    1628       lcall CHECK_SPAN_OR_ENGL
199F           1629       
199F           1630       ;Decides if going to Spanish or English
199F 200405    1631       jb SPAN_ENG, SPANISH1
19A2 12053A    1632       lcall SOUND_FSM
19A5 8003      1633       sjmp Check_Temp_done1
19A7           1634   SPANISH1:
19A7 120C6A    1635       lcall SOUND_FSM_S
19AA           1636   
19AA           1637   Check_Temp_done1:
19AA           1638   
19AA           1639       ;check if temp is below 150 
19AA E53B      1640       mov a, Temp_oven           
19AC 9534      1641       subb a, Temp_soak
19AE 5014      1642       jnc state1_done        ; if greater, jump to state 2
19B0 6012      1643       jz state1_done         ; if equal to, jump to state 2
19B2 4000      1644       jc Check_state1_safety ; if less than, check state time
19B4           1645   Check_state1_safety:       ; safety
19B4 E53B      1646       mov a, Temp_oven           
19B6 9432      1647       subb a, #50
19B8 50D9      1648       jnc state1             ; if greater, go back to state1
19BA E53A      1649       mov a, State_time      ; if less than 50C, check if state time is too long
19BC 943C      1650       subb a, #60
19BE 50D0      1651       jnc main_1             ; if greater, restart
19C0 60CE      1652       jz main_1              ; if equal to, restart
19C2 40CF      1653       jc state1              ; if less than, go back to state1
19C4           1654   ;*Checking moving to states with buttons---- 
19C4           1655   ;*Will remove after proper temperature reading----
19C4           1656   
19C4           1657       ;jb NEXT_STATE_BUTTON, state1
19C4           1658       ;Wait_Milli_Seconds(#50) ; debounce time
19C4           1659            ;jb NEXT_STATE_BUTTON, state1 ; if button not pressed, loop
19C4           1660            ;jnb NEXT_STATE_BUTTON, $ 
19C4           1661   
19C4           1662   state1_done:
19C4           1663       ;mov FAN, #0
19C4 753302    1664       mov States, #2
19C7           1665   
19C7           1666   ; preheat/soak
19C7           1667   state2_beginning: 
19C7 753A00    1668       mov State_time, #0;x00 ;clear the state time
19CA           1669       ;***clear the screen and set new display***
19CA 1213FC    1670       lcall Initialize_State_Display
19CD C0E0      1671            push acc
19CF 7407      1671            mov a, #7
19D1 14        1671            dec a
19D2 1200BD    1671            lcall ?Set_Cursor_2 ; Select column and row
19D5 D0E0      1671            pop acc
19D7 C083      1672            push dph
19D9 C082      1672            push dpl
19DB C0E0      1672            push acc
19DD 9003D1    1672            mov dptr, #Soak
19E0 1200B2    1672            lcall ?Send_Constant_String
19E3 D0E0      1672            pop acc
19E5 D082      1672            pop dpl
19E7 D083      1672            pop dph ;displays current state
19E9           1673   
19E9           1674       ;Set the default pwm output ratio to 20%.  That is 200ms of every second:
19E9 754FC8    1675            mov pwm_ratio+0, #low(200)
19EC 755000    1676            mov pwm_ratio+1, #high(000)
19EF           1677       ; Produces SOAK on speaker
19EF           1678       ; ***play audio***
19EF           1678       ;cjne sound_flag, #0, $
19EF           1678       
19EF 1217B2    1678       lcall Wait_Half_Second
19F2 C28E      1678       clr TR1 ; Stop Timer 1 ISR from playing previous request
19F4 D2A5      1678       setb FLASH_CE
19F6           1678       ;setb sound_flag ; sound starts
19F6 C2A6      1678       clr SPEAKER ; Turn off speaker
19F8 C2A5      1678       clr FLASH_CE ; Enable SPI Flash
19FA 7403      1678       mov a, #READ_BYTES
19FC 12040D    1678       lcall Send_SPI
19FF           1678       ; Set the initial position in memory where to start playing
19FF           1678       
19FF 7400      1678       mov a, #0x00 ; change initial position
1A01 12040D    1678       lcall Send_SPI
1A04 7444      1678       mov a, #0x44 ; next memory position
1A06 12040D    1678       lcall Send_SPI
1A09 74DD      1678       mov a, #0xdd ; next memory position
1A0B 12040D    1678       lcall Send_SPI
1A0E 7400      1678       mov a, #0x00 ; request first byte to send to DAC
1A10 12040D    1678       lcall Send_SPI
1A13           1678       
1A13           1678       ; How many bytes to play?
1A13 754E00    1678       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1A16 754D4E    1678       mov w+1, #0x4e ; Load the middle byte of the number of bytes to play
1A19 754C20    1678       mov w+0, #0x20 ; Load the low byte of the number of bytes to play
1A1C           1678       
1A1C           1678       
1A1C D2A6      1678       setb SPEAKER ;Turn on speaker
1A1E D28E      1678       setb TR1 ;Start playback by enabling Timer1
1A20           1678       ;clr sound_flag ; sound ends
1A20           1679   
1A20           1680   state2:
1A20           1681       ;check power on
1A20 1204F6    1682       lcall CHECK_POWER 
1A23           1683       ;Update Time and Temp
1A23 12147B    1684       lcall Update_Display
1A26 121708    1685       lcall Average_Temp
1A29           1686   
1A29 200405    1687       jb SPAN_ENG, SPANISH2
1A2C 12053A    1688       lcall SOUND_FSM
1A2F 8003      1689       sjmp Check_Temp_done2
1A31           1690   SPANISH2:
1A31 120C6A    1691       lcall SOUND_FSM_S
1A34           1692       
1A34           1693       ; loop back to state2 if run time is less than soak time. If greater than jump to state3 cuz of overflow of time
1A34           1694   Check_Temp_done2:     
1A34 E53A      1695       mov a, State_time
1A36 9535      1696       subb a, Time_soak
1A38 5002      1697       jnc state2_done
1A3A 40E4      1698       jc state2
1A3C           1699   
1A3C           1700   state2_done:
1A3C 753A03    1701       mov State_time, #3
1A3F           1702   
1A3F           1703   ; ramp to peak
1A3F           1704   state3_beginning:
1A3F           1705       ;setb OVEN_POWER ;turn power on 100%
1A3F           1706   
1A3F           1707       ;***clear the screen and set new display***
1A3F 1213FC    1708       lcall Initialize_State_Display
1A42 C0E0      1709            push acc
1A44 7407      1709            mov a, #7
1A46 14        1709            dec a
1A47 1200BD    1709            lcall ?Set_Cursor_2 ; Select column and row
1A4A D0E0      1709            pop acc
1A4C C083      1710            push dph
1A4E C082      1710            push dpl
1A50 C0E0      1710            push acc
1A52 9003D6    1710            mov dptr, #Ramp2Peak
1A55 1200B2    1710            lcall ?Send_Constant_String
1A58 D0E0      1710            pop acc
1A5A D082      1710            pop dpl
1A5C D083      1710            pop dph
1A5E           1711   
1A5E           1712       ;Set the default pwm output ratio to 100%.  That is 1000ms of every second:
1A5E 754FE8    1713            mov pwm_ratio+0, #low(1000)
1A61 755003    1714            mov pwm_ratio+1, #high(1000)
1A64           1715   
1A64           1716       ; Produces RAMP TO PEAK on speaker
1A64           1717       ; ***play audio***
1A64           1717       ;cjne sound_flag, #0, $
1A64           1717       
1A64 1217B2    1717       lcall Wait_Half_Second
1A67 C28E      1717       clr TR1 ; Stop Timer 1 ISR from playing previous request
1A69 D2A5      1717       setb FLASH_CE
1A6B           1717       ;setb sound_flag ; sound starts
1A6B C2A6      1717       clr SPEAKER ; Turn off speaker
1A6D C2A5      1717       clr FLASH_CE ; Enable SPI Flash
1A6F 7403      1717       mov a, #READ_BYTES
1A71 12040D    1717       lcall Send_SPI
1A74           1717       ; Set the initial position in memory where to start playing
1A74           1717       
1A74 7400      1717       mov a, #0x00 ; change initial position
1A76 12040D    1717       lcall Send_SPI
1A79 748B      1717       mov a, #0x8b ; next memory position
1A7B 12040D    1717       lcall Send_SPI
1A7E 74CA      1717       mov a, #0xca ; next memory position
1A80 12040D    1717       lcall Send_SPI
1A83 7400      1717       mov a, #0x00 ; request first byte to send to DAC
1A85 12040D    1717       lcall Send_SPI
1A88           1717       
1A88           1717       ; How many bytes to play?
1A88 754E00    1717       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1A8B 754D75    1717       mov w+1, #0x75 ; Load the middle byte of the number of bytes to play
1A8E 754C30    1717       mov w+0, #0x30 ; Load the low byte of the number of bytes to play
1A91           1717       
1A91           1717       
1A91 D2A6      1717       setb SPEAKER ;Turn on speaker
1A93 D28E      1717       setb TR1 ;Start playback by enabling Timer1
1A95           1717       ;clr sound_flag ; sound ends
1A95           1718   
1A95           1719   state3: 
1A95           1720       ;check power on
1A95 1204F6    1721       lcall CHECK_POWER
1A98 121708    1722       lcall Average_Temp
1A9B           1723       
1A9B           1724       
1A9B           1725       ;Update Time and Temp
1A9B 12147B    1726       lcall Update_Display
1A9E 200405    1727       jb SPAN_ENG, SPANISH3
1AA1 12053A    1728       lcall SOUND_FSM
1AA4 8003      1729       sjmp Check_Temp_done3
1AA6           1730   SPANISH3:
1AA6 120C6A    1731       lcall SOUND_FSM_S
1AA9           1732       
1AA9           1733   Check_Temp_done3:  
1AA9           1734    
1AA9 E53B      1735       mov a, Temp_oven           
1AAB 9536      1736       subb a, Temp_refl
1AAD 5004      1737       jnc state3_done    ; if greater, jump to state 4
1AAF 6002      1738       jz state3_done ; if equal to, jump to state 4
1AB1 40E2      1739       jc state3 ; if less than, go back to state3
1AB3           1740    
1AB3           1741   state3_done:
1AB3 753A04    1742       mov State_time, #4
1AB6           1743   
1AB6           1744   ; reflow 
1AB6           1745   state4_beginning:
1AB6           1746       
1AB6 753A00    1747       mov State_time, #0;x00 clear the state time
1AB9           1748       ;***clear the screen and set new display***
1AB9 1213FC    1749       lcall Initialize_State_Display
1ABC C0E0      1750            push acc
1ABE 7407      1750            mov a, #7
1AC0 14        1750            dec a
1AC1 1200BD    1750            lcall ?Set_Cursor_2 ; Select column and row
1AC4 D0E0      1750            pop acc
1AC6 C083      1751            push dph
1AC8 C082      1751            push dpl
1ACA C0E0      1751            push acc
1ACC 9003E0    1751            mov dptr, #Reflow
1ACF 1200B2    1751            lcall ?Send_Constant_String
1AD2 D0E0      1751            pop acc
1AD4 D082      1751            pop dpl
1AD6 D083      1751            pop dph
1AD8           1752   
1AD8           1753       ;Set the default pwm output ratio to 20%.  That is 200ms of every second:
1AD8 754FC8    1754            mov pwm_ratio+0, #low(200)
1ADB 755000    1755            mov pwm_ratio+1, #high(000)
1ADE           1756   
1ADE           1757       ; Produces REFLOW on speaker
1ADE           1758       ; ***play audio***
1ADE           1758       ;cjne sound_flag, #0, $
1ADE           1758       
1ADE 1217B2    1758       lcall Wait_Half_Second
1AE1 C28E      1758       clr TR1 ; Stop Timer 1 ISR from playing previous request
1AE3 D2A5      1758       setb FLASH_CE
1AE5           1758       ;setb sound_flag ; sound starts
1AE5 C2A6      1758       clr SPEAKER ; Turn off speaker
1AE7 C2A5      1758       clr FLASH_CE ; Enable SPI Flash
1AE9 7403      1758       mov a, #READ_BYTES
1AEB 12040D    1758       lcall Send_SPI
1AEE           1758       ; Set the initial position in memory where to start playing
1AEE           1758       
1AEE 7400      1758       mov a, #0x00 ; change initial position
1AF0 12040D    1758       lcall Send_SPI
1AF3 74F0      1758       mov a, #0xf0 ; next memory position
1AF5 12040D    1758       lcall Send_SPI
1AF8 7463      1758       mov a, #0x63 ; next memory position
1AFA 12040D    1758       lcall Send_SPI
1AFD 7400      1758       mov a, #0x00 ; request first byte to send to DAC
1AFF 12040D    1758       lcall Send_SPI
1B02           1758       
1B02           1758       ; How many bytes to play?
1B02 754E00    1758       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1B05 754D59    1758       mov w+1, #0x59 ; Load the middle byte of the number of bytes to play
1B08 754CD8    1758       mov w+0, #0xd8 ; Load the low byte of the number of bytes to play
1B0B           1758       
1B0B           1758       
1B0B D2A6      1758       setb SPEAKER ;Turn on speaker
1B0D D28E      1758       setb TR1 ;Start playback by enabling Timer1
1B0F           1758       ;clr sound_flag ; sound ends
1B0F           1759   
1B0F           1760   
1B0F           1761   state4:
1B0F           1762       ;check power on
1B0F 1204F6    1763       lcall CHECK_POWER
1B12           1764       ;Update Time and Temp
1B12 12147B    1765       lcall Update_Display
1B15 121708    1766       lcall Average_Temp
1B18 200405    1767      jb SPAN_ENG, SPANISH4
1B1B 12053A    1768       lcall SOUND_FSM
1B1E 8003      1769       sjmp Check_Temp_done4
1B20           1770   SPANISH4:
1B20 120C6A    1771       lcall SOUND_FSM_S
1B23           1772       
1B23           1773   Check_Temp_done4:  
1B23           1774      
1B23           1775       ; loop back to state2 if run time is less than soak time
1B23 E53A      1776       mov a, State_time
1B25 9537      1777       subb a, Time_refl
1B27 5002      1778       jnc state4_done
1B29 40E4      1779       jc state4
1B2B           1780   
1B2B           1781   state4_done: 
1B2B 753A00    1782       mov State_time, #0
1B2E 021B31    1783       ljmp state5_beginning 
1B31           1784   
1B31           1785   
1B31           1786   ; cooling
1B31           1787   state5_beginning: ; turn oven off
1B31 C287      1788       clr OVEN_POWER
1B33           1789   
1B33           1790   ;***clear the screen and set new display***
1B33 1213FC    1791       lcall Initialize_State_Display
1B36 C083      1792            push dph
1B38 C082      1792            push dpl
1B3A C0E0      1792            push acc
1B3C 9003E7    1792            mov dptr, #Cooling
1B3F 1200B2    1792            lcall ?Send_Constant_String
1B42 D0E0      1792            pop acc
1B44 D082      1792            pop dpl
1B46 D083      1792            pop dph
1B48           1793   
1B48           1794       ;Set the default pwm output ratio to 0%.  That is 0ms of every second:
1B48 754F00    1795            mov pwm_ratio+0, #low(0)
1B4B 755000    1796            mov pwm_ratio+1, #high(0)
1B4E           1797   
1B4E           1798       ; Produces COOLING on speaker
1B4E           1799       ; ***play audio***
1B4E           1799       ;cjne sound_flag, #0, $
1B4E           1799       
1B4E 1217B2    1799       lcall Wait_Half_Second
1B51 C28E      1799       clr TR1 ; Stop Timer 1 ISR from playing previous request
1B53 D2A5      1799       setb FLASH_CE
1B55           1799       ;setb sound_flag ; sound starts
1B55 C2A6      1799       clr SPEAKER ; Turn off speaker
1B57 C2A5      1799       clr FLASH_CE ; Enable SPI Flash
1B59 7403      1799       mov a, #READ_BYTES
1B5B 12040D    1799       lcall Send_SPI
1B5E           1799       ; Set the initial position in memory where to start playing
1B5E           1799       
1B5E 7401      1799       mov a, #0x01 ; change initial position
1B60 12040D    1799       lcall Send_SPI
1B63 7448      1799       mov a, #0x48 ; next memory position
1B65 12040D    1799       lcall Send_SPI
1B68 749A      1799       mov a, #0x9a ; next memory position
1B6A 12040D    1799       lcall Send_SPI
1B6D 7401      1799       mov a, #0x01 ; request first byte to send to DAC
1B6F 12040D    1799       lcall Send_SPI
1B72           1799       
1B72           1799       ; How many bytes to play?
1B72 754E00    1799       mov w+2, #0x00 ; Load the high byte of the number of bytes to play
1B75 754D6B    1799       mov w+1, #0x6b ; Load the middle byte of the number of bytes to play
1B78 754C6C    1799       mov w+0, #0x6c ; Load the low byte of the number of bytes to play
1B7B           1799       
1B7B           1799       
1B7B D2A6      1799       setb SPEAKER ;Turn on speaker
1B7D D28E      1799       setb TR1 ;Start playback by enabling Timer1
1B7F           1799       ;clr sound_flag ; sound ends
1B7F B291      1800       cpl FAN
1B81           1801   
1B81           1802   state5:
1B81           1803       ;check power on
1B81 1204F6    1804       lcall CHECK_POWER
1B84           1805       
1B84           1806       ; update display
1B84 12147B    1807       lcall Update_Display
1B87 121708    1808       lcall Average_Temp
1B8A           1809   
1B8A 200405    1810       jb SPAN_ENG, SPANISH5
1B8D 12053A    1811       lcall SOUND_FSM
1B90 8003      1812       sjmp Check_Temp_done5
1B92           1813   SPANISH5:
1B92 120C6A    1814       lcall SOUND_FSM_S
1B95           1815       
1B95           1816   Check_Temp_done5:  
1B95           1817   
1B95 E53B      1818       mov a, Temp_oven
1B97 943C      1819       subb a, #60
1B99 50E6      1820       JNC state5    ; if greater, jump back to state 5
1B9B 60E4      1821       JZ state5 ; if equal to, go back to state5
1B9D 4000      1822       JC state5_done ; if less than, go back to state 0
1B9F           1823   
1B9F           1824       ;*Checking moving to states with buttons---- 
1B9F           1825   ;*Will remove after proper temperature reading----
1B9F           1826   
1B9F           1827       ;jb NEXT_STATE_BUTTON, state5
1B9F           1828       ;Wait_Milli_Seconds(#50) ; debounce time
1B9F           1829            ;jb NEXT_STATE_BUTTON, state5 ; if button not pressed, loop
1B9F           1830            ;jnb NEXT_STATE_BUTTON, $ 
1B9F           1831   
1B9F           1832   state5_done:
1B9F           1833       ; ***play audio***
1B9F           1833       ;cjne sound_flag, #0, $
1B9F           1833       
1B9F C28E      1833       clr TR1 ; Stop Timer 1 ISR from playing previous request
1BA1 D2A5      1833       setb FLASH_CE
1BA3           1833       ;setb sound_flag ; sound starts
1BA3 C2A6      1833       clr SPEAKER ; Turn off speaker
1BA5 C2A5      1833       clr FLASH_CE ; Enable SPI Flash
1BA7 7403      1833       mov a, #READ_BYTES
1BA9 12040D    1833       lcall Send_SPI
1BAC           1833       ; Set the initial position in memory where to start playing
1BAC           1833       
1BAC 7416      1833       mov a, #0x16 ; change initial position
1BAE 12040D    1833       lcall Send_SPI
1BB1 74BC      1833       mov a, #0xbc ; next memory position
1BB3 12040D    1833       lcall Send_SPI
1BB6 7450      1833       mov a, #0x50 ; next memory position
1BB8 12040D    1833       lcall Send_SPI
1BBB 7416      1833       mov a, #0x16 ; request first byte to send to DAC
1BBD 12040D    1833       lcall Send_SPI
1BC0           1833       
1BC0           1833       ; How many bytes to play?
1BC0 754E02    1833       mov w+2, #0x02 ; Load the high byte of the number of bytes to play
1BC3 754D0F    1833       mov w+1, #0x0f ; Load the middle byte of the number of bytes to play
1BC6 754C58    1833       mov w+0, #0x58 ; Load the low byte of the number of bytes to play
1BC9           1833       
1BC9           1833       
1BC9 D2A6      1833       setb SPEAKER ;Turn on speaker
1BCB D28E      1833       setb TR1 ;Start playback by enabling Timer1
1BCD           1833       ;clr sound_flag ; sound ends
1BCD 12178D    1834       lcall Wait_One_Second
1BD0 753A00    1835       mov State_time, #0
1BD3 753300    1836       mov States, #0
1BD6 D291      1837       setb FAN
1BD8 021876    1838       ljmp main
1BDB           1839   
1BDB           1840   EN
